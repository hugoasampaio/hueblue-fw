/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri Apr 14 15:31:52 -03 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkCBusExample.h"


/* String declarations */
static std::string const __str_literal_1("Current Value %2d at time:", 26u);


/* Constructor */
MOD_mkCBusExample::MOD_mkCBusExample(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_the_counter(simHdl, "the_counter", this),
    PORT_RST_N((tUInt8)1u),
    DEF_v__h105(12297829382473034410llu)
{
  symbol_count = 5u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkCBusExample::init_symbols_0()
{
  init_symbol(&symbols[0u], "RL_decrement", SYM_RULE);
  init_symbol(&symbols[1u], "RL_display_value", SYM_RULE);
  init_symbol(&symbols[2u], "RL_done", SYM_RULE);
  init_symbol(&symbols[3u], "RL_init_counter", SYM_RULE);
  init_symbol(&symbols[4u], "the_counter", SYM_MODULE, &INST_the_counter);
}


/* Rule actions */

void MOD_mkCBusExample::RL_display_value()
{
  DEF_the_counter_cbus_ifc_read_13___d1 = INST_the_counter.METH_cbus_ifc_read(13u);
  DEF_x__h247 = (tUInt32)(DEF_the_counter_cbus_ifc_read_13___d1);
  DEF_read_value__h215 = (tUInt8)(DEF_the_counter_cbus_ifc_read_13___d1 >> 32u) ? DEF_x__h247 : 0u;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_v__h105 = dollar_time(sim_hdl);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,32,64", &__str_literal_1, DEF_read_value__h215, DEF_v__h105);
}

void MOD_mkCBusExample::RL_init_counter()
{
  INST_the_counter.METH_device_ifc_load((tUInt8)4u);
}

void MOD_mkCBusExample::RL_decrement()
{
  INST_the_counter.METH_device_ifc_decrement();
}

void MOD_mkCBusExample::RL_done()
{
  tUInt8 DEF_IF_the_counter_cbus_ifc_read_13_BIT_32_THEN_th_ETC___d8;
  DEF_the_counter_cbus_ifc_read_13___d1 = INST_the_counter.METH_cbus_ifc_read(13u);
  DEF_x__h247 = (tUInt32)(DEF_the_counter_cbus_ifc_read_13___d1);
  DEF_read_value__h215 = (tUInt8)(DEF_the_counter_cbus_ifc_read_13___d1 >> 32u) ? DEF_x__h247 : 0u;
  DEF_IF_the_counter_cbus_ifc_read_13_BIT_32_THEN_th_ETC___d8 = DEF_read_value__h215 == 1u;
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_IF_the_counter_cbus_ifc_read_13_BIT_32_THEN_th_ETC___d8)
      dollar_finish(sim_hdl, "32", 1u);
}


/* Methods */


/* Reset routines */

void MOD_mkCBusExample::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_the_counter.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkCBusExample::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkCBusExample::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_the_counter.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkCBusExample::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 5u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "read_value__h215", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "the_counter_cbus_ifc_read_13___d1", 33u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "v__h105", 64u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h247", 32u);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_the_counter.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkCBusExample::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkCBusExample &backing)
{
  vcd_defs(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkCBusExample::vcd_defs(tVCDDumpType dt, MOD_mkCBusExample &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 33u);
    vcd_write_x(sim_hdl, num++, 64u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_read_value__h215) != DEF_read_value__h215)
      {
	vcd_write_val(sim_hdl, num, DEF_read_value__h215, 32u);
	backing.DEF_read_value__h215 = DEF_read_value__h215;
      }
      ++num;
      if ((backing.DEF_the_counter_cbus_ifc_read_13___d1) != DEF_the_counter_cbus_ifc_read_13___d1)
      {
	vcd_write_val(sim_hdl, num, DEF_the_counter_cbus_ifc_read_13___d1, 33u);
	backing.DEF_the_counter_cbus_ifc_read_13___d1 = DEF_the_counter_cbus_ifc_read_13___d1;
      }
      ++num;
      if ((backing.DEF_v__h105) != DEF_v__h105)
      {
	vcd_write_val(sim_hdl, num, DEF_v__h105, 64u);
	backing.DEF_v__h105 = DEF_v__h105;
      }
      ++num;
      if ((backing.DEF_x__h247) != DEF_x__h247)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h247, 32u);
	backing.DEF_x__h247 = DEF_x__h247;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_read_value__h215, 32u);
      backing.DEF_read_value__h215 = DEF_read_value__h215;
      vcd_write_val(sim_hdl, num++, DEF_the_counter_cbus_ifc_read_13___d1, 33u);
      backing.DEF_the_counter_cbus_ifc_read_13___d1 = DEF_the_counter_cbus_ifc_read_13___d1;
      vcd_write_val(sim_hdl, num++, DEF_v__h105, 64u);
      backing.DEF_v__h105 = DEF_v__h105;
      vcd_write_val(sim_hdl, num++, DEF_x__h247, 32u);
      backing.DEF_x__h247 = DEF_x__h247;
    }
}

void MOD_mkCBusExample::vcd_submodules(tVCDDumpType dt,
				       unsigned int levels,
				       MOD_mkCBusExample &backing)
{
  INST_the_counter.dump_VCD(dt, levels, backing.INST_the_counter);
}
