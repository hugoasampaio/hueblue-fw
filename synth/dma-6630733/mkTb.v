//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 14:49:20 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire coarseFreq_coarseErrorCalc_start_wire$whas,
       coarseFreq_coarseErrorCalc_state_set_pw$whas,
       coarseFreq_cordic_atanCalc_start_wire$whas,
       coarseFreq_cordic_atanCalc_state_set_pw$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register coarseFreq_accumError
  reg [41 : 0] coarseFreq_accumError;
  wire [41 : 0] coarseFreq_accumError$D_IN;
  wire coarseFreq_accumError$EN;

  // register coarseFreq_coarseErrorCalc_start_reg
  reg coarseFreq_coarseErrorCalc_start_reg;
  wire coarseFreq_coarseErrorCalc_start_reg$D_IN,
       coarseFreq_coarseErrorCalc_start_reg$EN;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  reg coarseFreq_coarseErrorCalc_start_reg_1;
  wire coarseFreq_coarseErrorCalc_start_reg_1$D_IN,
       coarseFreq_coarseErrorCalc_start_reg_1$EN;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  reg coarseFreq_coarseErrorCalc_state_can_overlap;
  wire coarseFreq_coarseErrorCalc_state_can_overlap$D_IN,
       coarseFreq_coarseErrorCalc_state_can_overlap$EN;

  // register coarseFreq_coarseErrorCalc_state_fired
  reg coarseFreq_coarseErrorCalc_state_fired;
  wire coarseFreq_coarseErrorCalc_state_fired$D_IN,
       coarseFreq_coarseErrorCalc_state_fired$EN;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate;
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_coarseErrorCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_atanCalc_start_reg
  reg coarseFreq_cordic_atanCalc_start_reg;
  wire coarseFreq_cordic_atanCalc_start_reg$D_IN,
       coarseFreq_cordic_atanCalc_start_reg$EN;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  reg coarseFreq_cordic_atanCalc_start_reg_1;
  wire coarseFreq_cordic_atanCalc_start_reg_1$D_IN,
       coarseFreq_cordic_atanCalc_start_reg_1$EN;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  reg coarseFreq_cordic_atanCalc_state_can_overlap;
  wire coarseFreq_cordic_atanCalc_state_can_overlap$D_IN,
       coarseFreq_cordic_atanCalc_state_can_overlap$EN;

  // register coarseFreq_cordic_atanCalc_state_fired
  reg coarseFreq_cordic_atanCalc_state_fired;
  wire coarseFreq_cordic_atanCalc_state_fired$D_IN,
       coarseFreq_cordic_atanCalc_state_fired$EN;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate;
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_cordic_atanCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_n
  reg [3 : 0] coarseFreq_cordic_n;
  wire [3 : 0] coarseFreq_cordic_n$D_IN;
  wire coarseFreq_cordic_n$EN;

  // register coarseFreq_cordic_x_
  reg [23 : 0] coarseFreq_cordic_x_;
  reg [23 : 0] coarseFreq_cordic_x_$D_IN;
  wire coarseFreq_cordic_x_$EN;

  // register coarseFreq_cordic_y_
  reg [23 : 0] coarseFreq_cordic_y_;
  reg [23 : 0] coarseFreq_cordic_y_$D_IN;
  wire coarseFreq_cordic_y_$EN;

  // register coarseFreq_cordic_z_
  reg [23 : 0] coarseFreq_cordic_z_;
  reg [23 : 0] coarseFreq_cordic_z_$D_IN;
  wire coarseFreq_cordic_z_$EN;

  // register coarseFreq_currSample
  reg [35 : 0] coarseFreq_currSample;
  wire [35 : 0] coarseFreq_currSample$D_IN;
  wire coarseFreq_currSample$EN;

  // register coarseFreq_fsError
  reg [23 : 0] coarseFreq_fsError;
  wire [23 : 0] coarseFreq_fsError$D_IN;
  wire coarseFreq_fsError$EN;

  // register coarseFreq_lastSample
  reg [35 : 0] coarseFreq_lastSample;
  reg [35 : 0] coarseFreq_lastSample$D_IN;
  wire coarseFreq_lastSample$EN;

  // register coarseFreq_n
  reg [9 : 0] coarseFreq_n;
  wire [9 : 0] coarseFreq_n$D_IN;
  wire coarseFreq_n$EN;

  // register coarseFreq_samples_0
  reg [35 : 0] coarseFreq_samples_0;
  reg [35 : 0] coarseFreq_samples_0$D_IN;
  wire coarseFreq_samples_0$EN;

  // register coarseFreq_samples_1
  reg [35 : 0] coarseFreq_samples_1;
  reg [35 : 0] coarseFreq_samples_1$D_IN;
  wire coarseFreq_samples_1$EN;

  // register coarseFreq_samples_10
  reg [35 : 0] coarseFreq_samples_10;
  reg [35 : 0] coarseFreq_samples_10$D_IN;
  wire coarseFreq_samples_10$EN;

  // register coarseFreq_samples_11
  reg [35 : 0] coarseFreq_samples_11;
  reg [35 : 0] coarseFreq_samples_11$D_IN;
  wire coarseFreq_samples_11$EN;

  // register coarseFreq_samples_12
  reg [35 : 0] coarseFreq_samples_12;
  reg [35 : 0] coarseFreq_samples_12$D_IN;
  wire coarseFreq_samples_12$EN;

  // register coarseFreq_samples_13
  reg [35 : 0] coarseFreq_samples_13;
  reg [35 : 0] coarseFreq_samples_13$D_IN;
  wire coarseFreq_samples_13$EN;

  // register coarseFreq_samples_14
  reg [35 : 0] coarseFreq_samples_14;
  reg [35 : 0] coarseFreq_samples_14$D_IN;
  wire coarseFreq_samples_14$EN;

  // register coarseFreq_samples_15
  reg [35 : 0] coarseFreq_samples_15;
  reg [35 : 0] coarseFreq_samples_15$D_IN;
  wire coarseFreq_samples_15$EN;

  // register coarseFreq_samples_16
  reg [35 : 0] coarseFreq_samples_16;
  reg [35 : 0] coarseFreq_samples_16$D_IN;
  wire coarseFreq_samples_16$EN;

  // register coarseFreq_samples_17
  reg [35 : 0] coarseFreq_samples_17;
  reg [35 : 0] coarseFreq_samples_17$D_IN;
  wire coarseFreq_samples_17$EN;

  // register coarseFreq_samples_18
  reg [35 : 0] coarseFreq_samples_18;
  reg [35 : 0] coarseFreq_samples_18$D_IN;
  wire coarseFreq_samples_18$EN;

  // register coarseFreq_samples_19
  reg [35 : 0] coarseFreq_samples_19;
  reg [35 : 0] coarseFreq_samples_19$D_IN;
  wire coarseFreq_samples_19$EN;

  // register coarseFreq_samples_2
  reg [35 : 0] coarseFreq_samples_2;
  reg [35 : 0] coarseFreq_samples_2$D_IN;
  wire coarseFreq_samples_2$EN;

  // register coarseFreq_samples_3
  reg [35 : 0] coarseFreq_samples_3;
  reg [35 : 0] coarseFreq_samples_3$D_IN;
  wire coarseFreq_samples_3$EN;

  // register coarseFreq_samples_4
  reg [35 : 0] coarseFreq_samples_4;
  reg [35 : 0] coarseFreq_samples_4$D_IN;
  wire coarseFreq_samples_4$EN;

  // register coarseFreq_samples_5
  reg [35 : 0] coarseFreq_samples_5;
  reg [35 : 0] coarseFreq_samples_5$D_IN;
  wire coarseFreq_samples_5$EN;

  // register coarseFreq_samples_6
  reg [35 : 0] coarseFreq_samples_6;
  reg [35 : 0] coarseFreq_samples_6$D_IN;
  wire coarseFreq_samples_6$EN;

  // register coarseFreq_samples_7
  reg [35 : 0] coarseFreq_samples_7;
  reg [35 : 0] coarseFreq_samples_7$D_IN;
  wire coarseFreq_samples_7$EN;

  // register coarseFreq_samples_8
  reg [35 : 0] coarseFreq_samples_8;
  reg [35 : 0] coarseFreq_samples_8$D_IN;
  wire coarseFreq_samples_8$EN;

  // register coarseFreq_samples_9
  reg [35 : 0] coarseFreq_samples_9;
  reg [35 : 0] coarseFreq_samples_9$D_IN;
  wire coarseFreq_samples_9$EN;

  // register coarseFreq_xFix
  reg [20 : 0] coarseFreq_xFix;
  wire [20 : 0] coarseFreq_xFix$D_IN;
  wire coarseFreq_xFix$EN;

  // register coarseFreq_yFix
  reg [20 : 0] coarseFreq_yFix;
  wire [20 : 0] coarseFreq_yFix$D_IN;
  wire coarseFreq_yFix$EN;

  // register fV
  reg [17 : 0] fV;
  wire [17 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule coarseFreq_cordic_ix
  wire [23 : 0] coarseFreq_cordic_ix$D_IN, coarseFreq_cordic_ix$D_OUT;
  wire coarseFreq_cordic_ix$CLR,
       coarseFreq_cordic_ix$DEQ,
       coarseFreq_cordic_ix$EMPTY_N,
       coarseFreq_cordic_ix$ENQ,
       coarseFreq_cordic_ix$FULL_N;

  // ports of submodule coarseFreq_cordic_iy
  wire [23 : 0] coarseFreq_cordic_iy$D_IN, coarseFreq_cordic_iy$D_OUT;
  wire coarseFreq_cordic_iy$CLR,
       coarseFreq_cordic_iy$DEQ,
       coarseFreq_cordic_iy$EMPTY_N,
       coarseFreq_cordic_iy$ENQ,
       coarseFreq_cordic_iy$FULL_N;

  // ports of submodule coarseFreq_cordic_iz
  wire [23 : 0] coarseFreq_cordic_iz$D_IN, coarseFreq_cordic_iz$D_OUT;
  wire coarseFreq_cordic_iz$CLR,
       coarseFreq_cordic_iz$DEQ,
       coarseFreq_cordic_iz$EMPTY_N,
       coarseFreq_cordic_iz$ENQ,
       coarseFreq_cordic_iz$FULL_N;

  // ports of submodule coarseFreq_newSample
  wire [35 : 0] coarseFreq_newSample$D_IN, coarseFreq_newSample$D_OUT;
  wire coarseFreq_newSample$CLR,
       coarseFreq_newSample$DEQ,
       coarseFreq_newSample$EMPTY_N,
       coarseFreq_newSample$ENQ,
       coarseFreq_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l40c23,
       WILL_FIRE_RL_action_l41c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1;

  // inputs to muxes for submodule ports
  wire [41 : 0] MUX_coarseFreq_accumError$write_1__VAL_1;
  wire [35 : 0] MUX_coarseFreq_currSample$write_1__VAL_1,
		MUX_coarseFreq_lastSample$write_1__VAL_2,
		MUX_coarseFreq_lastSample$write_1__VAL_3,
		MUX_coarseFreq_samples_0$write_1__VAL_3;
  wire [23 : 0] MUX_coarseFreq_cordic_x_$write_1__VAL_2,
		MUX_coarseFreq_cordic_x_$write_1__VAL_3,
		MUX_coarseFreq_cordic_x_$write_1__VAL_4,
		MUX_coarseFreq_cordic_y_$write_1__VAL_2,
		MUX_coarseFreq_cordic_y_$write_1__VAL_3,
		MUX_coarseFreq_cordic_y_$write_1__VAL_4,
		MUX_coarseFreq_cordic_z_$write_1__VAL_1,
		MUX_coarseFreq_cordic_z_$write_1__VAL_2,
		MUX_coarseFreq_cordic_z_$write_1__VAL_4,
		MUX_coarseFreq_fsError$write_1__VAL_1;
  wire [9 : 0] MUX_coarseFreq_n$write_1__VAL_1, MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_coarseFreq_cordic_n$write_1__VAL_1;
  wire MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_n$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_2,
       MUX_coarseFreq_samples_0$write_1__SEL_3,
       MUX_coarseFreq_samples_1$write_1__SEL_1,
       MUX_coarseFreq_samples_1$write_1__SEL_2,
       MUX_coarseFreq_samples_1$write_1__SEL_3,
       MUX_coarseFreq_samples_10$write_1__SEL_1,
       MUX_coarseFreq_samples_10$write_1__SEL_2,
       MUX_coarseFreq_samples_10$write_1__SEL_3,
       MUX_coarseFreq_samples_11$write_1__SEL_1,
       MUX_coarseFreq_samples_11$write_1__SEL_2,
       MUX_coarseFreq_samples_11$write_1__SEL_3,
       MUX_coarseFreq_samples_12$write_1__SEL_1,
       MUX_coarseFreq_samples_12$write_1__SEL_2,
       MUX_coarseFreq_samples_12$write_1__SEL_3,
       MUX_coarseFreq_samples_13$write_1__SEL_1,
       MUX_coarseFreq_samples_13$write_1__SEL_2,
       MUX_coarseFreq_samples_13$write_1__SEL_3,
       MUX_coarseFreq_samples_14$write_1__SEL_1,
       MUX_coarseFreq_samples_14$write_1__SEL_2,
       MUX_coarseFreq_samples_14$write_1__SEL_3,
       MUX_coarseFreq_samples_15$write_1__SEL_1,
       MUX_coarseFreq_samples_15$write_1__SEL_2,
       MUX_coarseFreq_samples_15$write_1__SEL_3,
       MUX_coarseFreq_samples_16$write_1__SEL_1,
       MUX_coarseFreq_samples_16$write_1__SEL_2,
       MUX_coarseFreq_samples_16$write_1__SEL_3,
       MUX_coarseFreq_samples_17$write_1__SEL_1,
       MUX_coarseFreq_samples_17$write_1__SEL_2,
       MUX_coarseFreq_samples_17$write_1__SEL_3,
       MUX_coarseFreq_samples_18$write_1__SEL_1,
       MUX_coarseFreq_samples_18$write_1__SEL_2,
       MUX_coarseFreq_samples_18$write_1__SEL_3,
       MUX_coarseFreq_samples_19$write_1__SEL_1,
       MUX_coarseFreq_samples_19$write_1__SEL_2,
       MUX_coarseFreq_samples_19$write_1__SEL_3,
       MUX_coarseFreq_samples_2$write_1__SEL_1,
       MUX_coarseFreq_samples_2$write_1__SEL_2,
       MUX_coarseFreq_samples_2$write_1__SEL_3,
       MUX_coarseFreq_samples_3$write_1__SEL_1,
       MUX_coarseFreq_samples_3$write_1__SEL_2,
       MUX_coarseFreq_samples_3$write_1__SEL_3,
       MUX_coarseFreq_samples_4$write_1__SEL_1,
       MUX_coarseFreq_samples_4$write_1__SEL_2,
       MUX_coarseFreq_samples_4$write_1__SEL_3,
       MUX_coarseFreq_samples_5$write_1__SEL_1,
       MUX_coarseFreq_samples_5$write_1__SEL_2,
       MUX_coarseFreq_samples_5$write_1__SEL_3,
       MUX_coarseFreq_samples_6$write_1__SEL_1,
       MUX_coarseFreq_samples_6$write_1__SEL_2,
       MUX_coarseFreq_samples_6$write_1__SEL_3,
       MUX_coarseFreq_samples_7$write_1__SEL_1,
       MUX_coarseFreq_samples_7$write_1__SEL_2,
       MUX_coarseFreq_samples_7$write_1__SEL_3,
       MUX_coarseFreq_samples_8$write_1__SEL_1,
       MUX_coarseFreq_samples_8$write_1__SEL_2,
       MUX_coarseFreq_samples_8$write_1__SEL_3,
       MUX_coarseFreq_samples_9$write_1__SEL_1,
       MUX_coarseFreq_samples_9$write_1__SEL_2,
       MUX_coarseFreq_samples_9$write_1__SEL_3,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423;
  reg [5 : 0] fpart__h393752, fpart__h394538;
  wire [77 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1494,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1497,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1505,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1514,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1523,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1532,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1558,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1561,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1569,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1578,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1587,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1596,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1500,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1564,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1509,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1573,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1518,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1582,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1527,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1591,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1536,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1600;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1017,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d923,
		IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d815,
		IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1392,
		IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172,
		IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1435,
		IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124,
		IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353,
		_25734_MUL_IF_coarseFreq_fsError_347_BIT_23_348_ETC___d1351,
		_651_MUL_IF_IF_coarseFreq_accumError_12_BIT_20__ETC___d1119,
		x__h119021,
		x__h119953,
		x__h122813,
		x__h126745,
		x__h129472,
		x__h132184,
		x__h132850,
		x__h145844,
		x__h39600,
		x__h42778,
		x__h45523;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1060,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d975,
		digit__h393978,
		digit__h394045,
		digit__h394134,
		digit__h394223,
		digit__h394312,
		digit__h394401,
		digit__h394758,
		digit__h394825,
		digit__h394914,
		digit__h395003,
		digit__h395092,
		digit__h395181,
		tx94043_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2,
		tx94132_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3,
		tx94221_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4,
		tx94310_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5,
		tx94399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6,
		tx94823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7,
		tx94912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8,
		tx95001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9,
		tx95090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10,
		tx95179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11,
		tx__h394043,
		tx__h394132,
		tx__h394221,
		tx__h394310,
		tx__h394399,
		tx__h394823,
		tx__h394912,
		tx__h395001,
		tx__h395090,
		tx__h395179,
		x__h126065,
		x__h137022,
		x__h139725,
		y__h394191,
		y__h394280,
		y__h394369,
		y__h394458,
		y__h394971,
		y__h395060,
		y__h395149,
		y__h395238;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1072,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d987,
		x__h125726,
		x__h139386;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1031,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d937,
		IF_IF_coarseFreq_accumError_12_BIT_20_27_AND_N_ETC___d1133,
		IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409,
		IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102,
		IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452,
		IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1220,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1297,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1172,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1259,
		IF_coarseFreq_accumError_12_BIT_20_27_THEN_0_C_ETC___d745,
		IF_coarseFreq_accumError_12_BIT_20_27_THEN_NEG_ETC___d864,
		IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d829,
		IF_coarseFreq_accumError_12_BIT_41_67_THEN_0_C_ETC___d785,
		IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d897,
		IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1406,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186,
		IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1449,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138,
		IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d596,
		IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d673,
		IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d552,
		IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d635,
		IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1365,
		x__h104652,
		x__h107416,
		x__h109720,
		x__h112028,
		x__h114320,
		x__h118692,
		x__h119624,
		x__h122484,
		x__h126416,
		x__h129143,
		x__h131855,
		x__h132521,
		x__h145515,
		x__h206392,
		x__h208725,
		x__h211037,
		x__h213331,
		x__h39271,
		x__h42449,
		x__h45194;
  wire [29 : 0] IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1234,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1311,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1186,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1273,
		IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d610,
		IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d687,
		IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d566,
		IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d649,
		IF_coarseFreq_lastSample_95_BIT_17_97_THEN_0_C_ETC___d515,
		x__h104365,
		x__h107129,
		x__h109433,
		x__h111741,
		x__h114033,
		x__h206105,
		x__h208438,
		x__h210750,
		x__h213044;
  wire [25 : 0] ax2_f__h126088;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1007,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1092,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958,
		IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1100,
		IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1102,
		IF_coarseFreq_accumError_12_BIT_20_27_THEN_IF__ETC___d766,
		IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1101,
		IF_coarseFreq_accumError_12_BIT_41_67_THEN_IF__ETC___d806,
		_0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1008,
		ax1_f__h126093,
		coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81,
		coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168,
		coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207,
		coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120,
		x__h125104,
		x__h125136,
		x__h125269,
		x__h126790,
		x__h126809,
		x__h134993,
		x__h137041,
		x__h148643,
		x__h150691,
		x__h193424,
		x__h36907,
		x__h385058,
		x__h388361,
		x__h391156,
		x__h39655,
		x__h42833,
		x__h45578,
		x__h48636,
		x__h48736,
		x__h48807,
		x__h49698,
		x__h49713,
		x__h49769,
		x__h49784,
		x__h49840;
  wire [20 : 0] x__h116457, x__h116494;
  wire [17 : 0] x__h106841,
		x__h107492,
		x__h109771,
		x__h109790,
		x__h111453,
		x__h112073,
		x__h201828,
		x__h204122,
		x__h205817,
		x__h210462,
		x__h373444,
		x__h375730,
		x__h378034;
  wire [12 : 0] SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541,
		SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477,
		ax2_i__h126087;
  wire [11 : 0] IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1113,
		IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1115,
		IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1114,
		res_f__h128790,
		res_i__h138917,
		res_i__h393184,
		res_i__h393212,
		x__h126095,
		x__h393197,
		x__h393225,
		y_f__h120902,
		y_f__h123762,
		y_f__h127638,
		y_f__h130365,
		y_f__h133743,
		y_f__h135835,
		y_f__h137745,
		y_f__h149485,
		y_f__h151395,
		y_f__h194254,
		y_f__h37752,
		y_f__h385888,
		y_f__h389203,
		y_f__h391998,
		y_f__h40497,
		y_f__h43675,
		y_f__h46420;
  wire [5 : 0] x__h394008,
	       x__h394788,
	       y_avValue_snd__h393942,
	       y_avValue_snd__h394722,
	       y_f__h105439,
	       y_f__h108153,
	       y_f__h110451,
	       y_f__h112753,
	       y_f__h115045,
	       y_f__h207158,
	       y_f__h209460,
	       y_f__h211764,
	       y_f__h214058;
  wire NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808,
       NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010,
       abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697,
       coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1616,
       coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283,
       coarseFreq_cordic_n_8_ULT_14___d39,
       coarseFreq_cordic_z__1_SLE_0___d256,
       coarseFreq_cordic_z__1_SLE_3216___d72,
       coarseFreq_cordic_z__1_SLT_3216___d160,
       coarseFreq_n_21_ULT_20___d322,
       n_656_ULT_20___d1657;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule coarseFreq_cordic_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_ix(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_ix$D_IN),
							       .ENQ(coarseFreq_cordic_ix$ENQ),
							       .DEQ(coarseFreq_cordic_ix$DEQ),
							       .CLR(coarseFreq_cordic_ix$CLR),
							       .D_OUT(coarseFreq_cordic_ix$D_OUT),
							       .FULL_N(coarseFreq_cordic_ix$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_ix$EMPTY_N));

  // submodule coarseFreq_cordic_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iy(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iy$D_IN),
							       .ENQ(coarseFreq_cordic_iy$ENQ),
							       .DEQ(coarseFreq_cordic_iy$DEQ),
							       .CLR(coarseFreq_cordic_iy$CLR),
							       .D_OUT(coarseFreq_cordic_iy$D_OUT),
							       .FULL_N(coarseFreq_cordic_iy$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iy$EMPTY_N));

  // submodule coarseFreq_cordic_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iz(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iz$D_IN),
							       .ENQ(coarseFreq_cordic_iz$ENQ),
							       .DEQ(coarseFreq_cordic_iz$DEQ),
							       .CLR(coarseFreq_cordic_iz$CLR),
							       .D_OUT(coarseFreq_cordic_iz$D_OUT),
							       .FULL_N(coarseFreq_cordic_iz$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iz$EMPTY_N));

  // submodule coarseFreq_newSample
  FIFO2 #(.width(32'd36), .guarded(1'd1)) coarseFreq_newSample(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_newSample$D_IN),
							       .ENQ(coarseFreq_newSample$ENQ),
							       .DEQ(coarseFreq_newSample$DEQ),
							       .CLR(coarseFreq_newSample$CLR),
							       .D_OUT(coarseFreq_newSample$D_OUT),
							       .FULL_N(coarseFreq_newSample$FULL_N),
							       .EMPTY_N(coarseFreq_newSample$EMPTY_N));

  // rule RL_action_l40c23
  assign WILL_FIRE_RL_action_l40c23 =
	     coarseFreq_newSample$FULL_N && n_656_ULT_20___d1657 &&
	     (state_mkFSMstate == 3'd2 || state_mkFSMstate == 3'd5) ;

  // rule RL_action_l41c13
  assign WILL_FIRE_RL_action_l41c13 =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1616 &&
	     !coarseFreq_coarseErrorCalc_start_reg &&
	     state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 3'd0 ||
	     !n_656_ULT_20___d1657 && start_wire$whas &&
	     state_mkFSMstate == 3'd2 ||
	     !n_656_ULT_20___d1657 && start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_656_ULT_20___d1657 && !start_wire$whas &&
	     state_mkFSMstate == 3'd2 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_656_ULT_20___d1657 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l47c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd1 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l48c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd2 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l49c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd3 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l50c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd4 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l51c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l53c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 =
	     !coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l66c13
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 =
	     coarseFreq_cordic_n_8_ULT_14___d39 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_cordic_atanCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     coarseFreq_cordic_atanCalc_start_reg ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l59c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22_1
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l87c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 =
	     coarseFreq_newSample$EMPTY_N && coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l88c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 =
	     coarseFreq_newSample$EMPTY_N &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd6 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l91c24
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 =
	     coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l99c17
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l102c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 =
	     coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l103c19
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 =
	     coarseFreq_cordic_ix$FULL_N && coarseFreq_cordic_iy$FULL_N &&
	     coarseFreq_cordic_iz$FULL_N &&
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd19 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l104c13
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l46c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     (coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1616 &&
	     coarseFreq_coarseErrorCalc_start_reg ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l82c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 =
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	     !coarseFreq_n_21_ULT_20___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	     !coarseFreq_n_21_ULT_20___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22_1
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ;
  assign MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ;
  assign MUX_coarseFreq_n$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_coarseFreq_accumError$write_1__VAL_1 =
	     { x__h116457, x__h116494 } ;
  assign MUX_coarseFreq_cordic_n$write_1__VAL_1 = coarseFreq_cordic_n + 4'd1 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_3 =
	     (!x__h42449[35] &&
	      (x__h42449[23] || x__h42449[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h42449[35] &&
		 (!x__h42449[23] || ~x__h42449[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h42449[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49698 : x__h48636 ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_2 =
	     (!x__h39271[35] &&
	      (x__h39271[23] || x__h39271[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h39271[35] &&
		 (!x__h39271[23] || ~x__h39271[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h39271[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_3 =
	     (!x__h45194[35] &&
	      (x__h45194[23] || x__h45194[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h45194[35] &&
		 (!x__h45194[23] || ~x__h45194[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h45194[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49769 : x__h48736 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_1 =
	     coarseFreq_cordic_z_ + 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_2 =
	     coarseFreq_cordic_z_ - 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49840 : x__h48807 ;
  assign MUX_coarseFreq_currSample$write_1__VAL_1 =
	     { x__h373444,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468,
	       fpart__h394538 } ;
  assign MUX_coarseFreq_fsError$write_1__VAL_1 =
	     (!x__h118692[35] &&
	      (x__h118692[23] || x__h118692[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h118692[35] &&
		 (!x__h118692[23] || ~x__h118692[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h118692[23:0]) ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_2 =
	     { coarseFreq_lastSample[35:18],
	       (!x__h104365[29] &&
		(x__h104365[17] || x__h104365[29:18] != 12'd0)) ?
		 18'd131071 :
		 ((x__h104365[29] &&
		   (!x__h104365[17] || ~x__h104365[29:18] != 12'd0)) ?
		    18'd131072 :
		    x__h104365[17:0]) } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_3 =
	     { x__h106841, x__h111453 } ;
  assign MUX_coarseFreq_n$write_1__VAL_1 = coarseFreq_n + 10'd1 ;
  assign MUX_coarseFreq_samples_0$write_1__VAL_3 =
	     { x__h205817, x__h210462 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign coarseFreq_cordic_atanCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     coarseFreq_cordic_atanCalc_start_reg_1 &&
	     !coarseFreq_cordic_atanCalc_state_fired ;
  assign coarseFreq_coarseErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_start_reg_1 &&
	     !coarseFreq_coarseErrorCalc_state_fired ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign coarseFreq_cordic_atanCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ;
  assign coarseFreq_coarseErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 3'd4 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register coarseFreq_accumError
  assign coarseFreq_accumError$D_IN =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12) ?
	       MUX_coarseFreq_accumError$write_1__VAL_1 :
	       42'd0 ;
  assign coarseFreq_accumError$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ;

  // register coarseFreq_coarseErrorCalc_start_reg
  assign coarseFreq_coarseErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ;
  assign coarseFreq_coarseErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1616 &&
	     !coarseFreq_coarseErrorCalc_start_reg ;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  assign coarseFreq_coarseErrorCalc_start_reg_1$D_IN =
	     coarseFreq_coarseErrorCalc_start_wire$whas ;
  assign coarseFreq_coarseErrorCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  assign coarseFreq_coarseErrorCalc_state_can_overlap$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ||
	     coarseFreq_coarseErrorCalc_state_can_overlap ;
  assign coarseFreq_coarseErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_fired
  assign coarseFreq_coarseErrorCalc_state_fired$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ;
  assign coarseFreq_coarseErrorCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  always@(MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 or
	  coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd21;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd22;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd23;
      default: coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_coarseErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ;

  // register coarseFreq_cordic_atanCalc_start_reg
  assign coarseFreq_cordic_atanCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ;
  assign coarseFreq_cordic_atanCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  assign coarseFreq_cordic_atanCalc_start_reg_1$D_IN =
	     coarseFreq_cordic_atanCalc_start_wire$whas ;
  assign coarseFreq_cordic_atanCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  assign coarseFreq_cordic_atanCalc_state_can_overlap$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ||
	     coarseFreq_cordic_atanCalc_state_can_overlap ;
  assign coarseFreq_cordic_atanCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_fired
  assign coarseFreq_cordic_atanCalc_state_fired$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ;
  assign coarseFreq_cordic_atanCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  always@(MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  coarseFreq_cordic_atanCalc_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd10;
      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd11;
      default: coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_atanCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ;

  // register coarseFreq_cordic_n
  assign coarseFreq_cordic_n$D_IN =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10) ?
	       MUX_coarseFreq_cordic_n$write_1__VAL_1 :
	       4'd0 ;
  assign coarseFreq_cordic_n$EN =
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ;

  // register coarseFreq_cordic_x_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  coarseFreq_cordic_ix$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_x_$D_IN = coarseFreq_cordic_ix$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_4;
      default: coarseFreq_cordic_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_x_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_y_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  coarseFreq_cordic_iy$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_y_$D_IN = coarseFreq_cordic_iy$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_4;
      default: coarseFreq_cordic_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_y_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_z_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  coarseFreq_cordic_iz$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_z_$D_IN = coarseFreq_cordic_iz$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_4;
      default: coarseFreq_cordic_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_z_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_currSample
  assign coarseFreq_currSample$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ?
	       MUX_coarseFreq_currSample$write_1__VAL_1 :
	       36'd0 ;
  assign coarseFreq_currSample$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ;

  // register coarseFreq_fsError
  assign coarseFreq_fsError$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ?
	       MUX_coarseFreq_fsError$write_1__VAL_1 :
	       24'd0 ;
  assign coarseFreq_fsError$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ;

  // register coarseFreq_lastSample
  always@(coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  coarseFreq_currSample or
	  MUX_coarseFreq_lastSample$write_1__VAL_2 or
	  MUX_coarseFreq_lastSample$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseFreq_lastSample$D_IN = coarseFreq_currSample;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_lastSample$D_IN = 36'd0;
      default: coarseFreq_lastSample$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_lastSample$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;

  // register coarseFreq_n
  assign coarseFreq_n$D_IN =
	     MUX_coarseFreq_n$write_1__SEL_1 ?
	       MUX_coarseFreq_n$write_1__VAL_1 :
	       10'd0 ;
  assign coarseFreq_n$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ;

  // register coarseFreq_samples_0
  always@(MUX_coarseFreq_samples_0$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_0$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_0$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_0$write_1__SEL_1:
	  coarseFreq_samples_0$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_0$write_1__SEL_2:
	  coarseFreq_samples_0$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_0$write_1__SEL_3:
	  coarseFreq_samples_0$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_0$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_0$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd0 ;

  // register coarseFreq_samples_1
  always@(MUX_coarseFreq_samples_1$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_1$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_1$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_1$write_1__SEL_1:
	  coarseFreq_samples_1$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_1$write_1__SEL_2:
	  coarseFreq_samples_1$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_1$write_1__SEL_3:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_1$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_1$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd1 ;

  // register coarseFreq_samples_10
  always@(MUX_coarseFreq_samples_10$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_10$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_10$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_10$write_1__SEL_1:
	  coarseFreq_samples_10$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_10$write_1__SEL_2:
	  coarseFreq_samples_10$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_10$write_1__SEL_3:
	  coarseFreq_samples_10$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_10$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_10$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd10 ;

  // register coarseFreq_samples_11
  always@(MUX_coarseFreq_samples_11$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_11$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_11$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_11$write_1__SEL_1:
	  coarseFreq_samples_11$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_11$write_1__SEL_2:
	  coarseFreq_samples_11$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_11$write_1__SEL_3:
	  coarseFreq_samples_11$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_11$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_11$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd11 ;

  // register coarseFreq_samples_12
  always@(MUX_coarseFreq_samples_12$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_12$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_12$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_12$write_1__SEL_1:
	  coarseFreq_samples_12$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_12$write_1__SEL_2:
	  coarseFreq_samples_12$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_12$write_1__SEL_3:
	  coarseFreq_samples_12$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_12$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_12$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd12 ;

  // register coarseFreq_samples_13
  always@(MUX_coarseFreq_samples_13$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_13$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_13$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_13$write_1__SEL_1:
	  coarseFreq_samples_13$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_13$write_1__SEL_2:
	  coarseFreq_samples_13$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_13$write_1__SEL_3:
	  coarseFreq_samples_13$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_13$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_13$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd13 ;

  // register coarseFreq_samples_14
  always@(MUX_coarseFreq_samples_14$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_14$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_14$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_14$write_1__SEL_1:
	  coarseFreq_samples_14$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_14$write_1__SEL_2:
	  coarseFreq_samples_14$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_14$write_1__SEL_3:
	  coarseFreq_samples_14$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_14$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_14$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd14 ;

  // register coarseFreq_samples_15
  always@(MUX_coarseFreq_samples_15$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_15$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_15$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_15$write_1__SEL_1:
	  coarseFreq_samples_15$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_15$write_1__SEL_2:
	  coarseFreq_samples_15$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_15$write_1__SEL_3:
	  coarseFreq_samples_15$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_15$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_15$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd15 ;

  // register coarseFreq_samples_16
  always@(MUX_coarseFreq_samples_16$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_16$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_16$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_16$write_1__SEL_1:
	  coarseFreq_samples_16$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_16$write_1__SEL_2:
	  coarseFreq_samples_16$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_16$write_1__SEL_3:
	  coarseFreq_samples_16$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_16$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_16$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd16 ;

  // register coarseFreq_samples_17
  always@(MUX_coarseFreq_samples_17$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_17$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_17$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_17$write_1__SEL_1:
	  coarseFreq_samples_17$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_17$write_1__SEL_2:
	  coarseFreq_samples_17$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_17$write_1__SEL_3:
	  coarseFreq_samples_17$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_17$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_17$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd17 ;

  // register coarseFreq_samples_18
  always@(MUX_coarseFreq_samples_18$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_18$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_18$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_18$write_1__SEL_1:
	  coarseFreq_samples_18$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_18$write_1__SEL_2:
	  coarseFreq_samples_18$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_18$write_1__SEL_3:
	  coarseFreq_samples_18$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_18$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_18$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd18 ;

  // register coarseFreq_samples_19
  always@(MUX_coarseFreq_samples_19$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_19$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_19$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_19$write_1__SEL_1:
	  coarseFreq_samples_19$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_19$write_1__SEL_2:
	  coarseFreq_samples_19$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_19$write_1__SEL_3:
	  coarseFreq_samples_19$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_19$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_19$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd19 ;

  // register coarseFreq_samples_2
  always@(MUX_coarseFreq_samples_2$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_2$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_2$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_2$write_1__SEL_1:
	  coarseFreq_samples_2$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_2$write_1__SEL_2:
	  coarseFreq_samples_2$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_2$write_1__SEL_3:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_2$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_2$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd2 ;

  // register coarseFreq_samples_3
  always@(MUX_coarseFreq_samples_3$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_3$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_3$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_3$write_1__SEL_1:
	  coarseFreq_samples_3$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_3$write_1__SEL_2:
	  coarseFreq_samples_3$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_3$write_1__SEL_3:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_3$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_3$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd3 ;

  // register coarseFreq_samples_4
  always@(MUX_coarseFreq_samples_4$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_4$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_4$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_4$write_1__SEL_1:
	  coarseFreq_samples_4$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_4$write_1__SEL_2:
	  coarseFreq_samples_4$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_4$write_1__SEL_3:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_4$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_4$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd4 ;

  // register coarseFreq_samples_5
  always@(MUX_coarseFreq_samples_5$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_5$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_5$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_5$write_1__SEL_1:
	  coarseFreq_samples_5$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_5$write_1__SEL_2:
	  coarseFreq_samples_5$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_5$write_1__SEL_3:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_5$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_5$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd5 ;

  // register coarseFreq_samples_6
  always@(MUX_coarseFreq_samples_6$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_6$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_6$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_6$write_1__SEL_1:
	  coarseFreq_samples_6$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_6$write_1__SEL_2:
	  coarseFreq_samples_6$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_6$write_1__SEL_3:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_6$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_6$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd6 ;

  // register coarseFreq_samples_7
  always@(MUX_coarseFreq_samples_7$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_7$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_7$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_7$write_1__SEL_1:
	  coarseFreq_samples_7$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_7$write_1__SEL_2:
	  coarseFreq_samples_7$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_7$write_1__SEL_3:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_7$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_7$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd7 ;

  // register coarseFreq_samples_8
  always@(MUX_coarseFreq_samples_8$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_8$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_8$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_8$write_1__SEL_1:
	  coarseFreq_samples_8$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_8$write_1__SEL_2:
	  coarseFreq_samples_8$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_8$write_1__SEL_3:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_8$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_8$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd8 ;

  // register coarseFreq_samples_9
  always@(MUX_coarseFreq_samples_9$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_9$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_9$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_9$write_1__SEL_1:
	  coarseFreq_samples_9$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_9$write_1__SEL_2:
	  coarseFreq_samples_9$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_9$write_1__SEL_3:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_9$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_9$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd9 ;

  // register coarseFreq_xFix
  assign coarseFreq_xFix$D_IN = { res_i__h393184, x__h393197[11:3] } ;
  assign coarseFreq_xFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ;

  // register coarseFreq_yFix
  assign coarseFreq_yFix$D_IN = { res_i__h393212, x__h393225[11:3] } ;
  assign coarseFreq_yFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ;

  // register fV
  assign fV$D_IN = { fV[17:6], inV[11:6] } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 3'd4) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd1 ;

  // register outV
  assign outV$D_IN = coarseFreq_fsError ;
  assign outV$EN = WILL_FIRE_RL_action_l41c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l40c23 or WILL_FIRE_RL_action_l41c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 3'd1;
      state_mkFSMstate == 3'd1: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l40c23: state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l41c13: state_mkFSMstate$D_IN = 3'd4;
      state_mkFSMstate == 3'd4: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     state_mkFSMstate == 3'd4 ;

  // submodule coarseFreq_cordic_ix
  assign coarseFreq_cordic_ix$D_IN = { coarseFreq_xFix, 3'd0 } ;
  assign coarseFreq_cordic_ix$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_ix$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ;
  assign coarseFreq_cordic_ix$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iy
  assign coarseFreq_cordic_iy$D_IN = { coarseFreq_yFix, 3'd0 } ;
  assign coarseFreq_cordic_iy$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_iy$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ;
  assign coarseFreq_cordic_iy$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iz
  assign coarseFreq_cordic_iz$D_IN =
	     (!IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[35] &&
	      (IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[23] ||
	       IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[35] &&
		 (!IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[23] ||
		  ~IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368[23:0]) ;
  assign coarseFreq_cordic_iz$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_iz$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ;
  assign coarseFreq_cordic_iz$CLR = 1'b0 ;

  // submodule coarseFreq_newSample
  assign coarseFreq_newSample$D_IN = {2{fV}} ;
  assign coarseFreq_newSample$ENQ = WILL_FIRE_RL_action_l40c23 ;
  assign coarseFreq_newSample$DEQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ;
  assign coarseFreq_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1017 =
	     x__h134993 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1031 =
	     x__h132184[47:12] + { 24'd0, y_f__h135835 } ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d923 =
	     x__h148643 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d937 =
	     x__h145844[47:12] + { 24'd0, y_f__h149485 } ;
  assign IF_IF_coarseFreq_accumError_12_BIT_20_27_AND_N_ETC___d1133 =
	     x__h119021[47:12] + { 24'd0, y_f__h194254 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1007 =
	     (!x__h139386[36] &&
	      (x__h139386[23] || x__h139386[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h139386[36] &&
		 (!x__h139386[23] || ~x__h139386[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h139386[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1092 =
	     (!x__h125726[36] &&
	      (x__h125726[23] || x__h125726[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h125726[36] &&
		 (!x__h125726[23] || ~x__h125726[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h125726[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917 +
	     ((!x__h131855[35] &&
	       (x__h131855[23] || x__h131855[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h131855[35] &&
		  (!x__h131855[23] || ~x__h131855[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h131855[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884 =
	     (!x__h132521[35] &&
	      (x__h132521[23] || x__h132521[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h132521[35] &&
		 (!x__h132521[23] || ~x__h132521[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h132521[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917 =
	     (!x__h129143[35] &&
	      (x__h129143[23] || x__h129143[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h129143[35] &&
		 (!x__h129143[23] || ~x__h129143[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h129143[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884 +
	     ((!x__h145515[35] &&
	       (x__h145515[23] || x__h145515[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h145515[35] &&
		  (!x__h145515[23] || ~x__h145515[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h145515[23:0])) ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409 =
	     (!IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394[47] &&
	      IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1406[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1406 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102 =
	     (!IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] &&
	      IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 ;
  assign IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452 =
	     (!IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437[47] &&
	      IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1449[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1449 ;
  assign IF_NOT_IF_coarseFreq_fsError_347_BIT_23_348_TH_ETC___d1368 =
	     (!IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353[47] &&
	      IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1365[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1365 ;
  assign IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1100 =
	     (!coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808) ?
	       x__h125269 :
	       ((!coarseFreq_accumError[41] &&
		 NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1092 :
		  24'd0) ;
  assign IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1113 =
	     (!coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808) ?
	       x__h125269[23:12] :
	       ((!coarseFreq_accumError[41] &&
		 NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010) ?
		  res_i__h138917 :
		  12'd0) ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1220 =
	     x__h375730 * x__h201828 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1234 =
	     x__h208725[35:6] + { 24'd0, y_f__h209460 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1297 =
	     x__h375730 * x__h204122 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1311 =
	     x__h213331[35:6] + { 24'd0, y_f__h214058 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1172 =
	     x__h378034 * x__h204122 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1186 =
	     x__h206392[35:6] + { 24'd0, y_f__h207158 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1259 =
	     x__h378034 * x__h201828 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1273 =
	     x__h211037[35:6] + { 24'd0, y_f__h211764 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1060 =
	     x__h137022 / x__h137041 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1072 =
	     x__h126065[38:2] + { 25'd0, y_f__h137745 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d975 =
	     x__h137022 / x__h150691 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d987 =
	     x__h139725[38:2] + { 25'd0, y_f__h151395 } ;
  assign IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1102 =
	     (coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1008 :
	       IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1101 ;
  assign IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1115 =
	     (coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1008[23:12] :
	       IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1114 ;
  assign IF_coarseFreq_accumError_12_BIT_20_27_THEN_0_C_ETC___d745 =
	     x__h119953[47:12] + { 24'd0, y_f__h120902 } ;
  assign IF_coarseFreq_accumError_12_BIT_20_27_THEN_IF__ETC___d766 =
	     coarseFreq_accumError[20] ?
	       ((!x__h119624[35] &&
		 (x__h119624[23] || x__h119624[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h119624[35] &&
		    (!x__h119624[23] || ~x__h119624[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h119624[23:0])) :
	       { coarseFreq_accumError[20:0], 3'd0 } ;
  assign IF_coarseFreq_accumError_12_BIT_20_27_THEN_NEG_ETC___d864 =
	     x__h132850[47:12] + { 24'd0, y_f__h133743 } ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1101 =
	     (coarseFreq_accumError[41] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010) ?
	       (coarseFreq_accumError[20] ? x__h125136 : x__h125104) :
	       IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1100 ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d1114 =
	     (coarseFreq_accumError[41] &&
	      NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010) ?
	       (coarseFreq_accumError[20] ?
		  x__h125136[23:12] :
		  x__h125104[23:12]) :
	       IF_NOT_coarseFreq_accumError_12_BIT_20_27_10_A_ETC___d1113 ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d829 =
	     x__h126745[47:12] + { 24'd0, y_f__h127638 } ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_THEN_0_C_ETC___d785 =
	     x__h122813[47:12] + { 24'd0, y_f__h123762 } ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_THEN_IF__ETC___d806 =
	     coarseFreq_accumError[41] ?
	       ((!x__h122484[35] &&
		 (x__h122484[23] || x__h122484[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h122484[35] &&
		    (!x__h122484[23] || ~x__h122484[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h122484[23:0])) :
	       { coarseFreq_accumError[41:21], 3'd0 } ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d815 =
	     x__h126790 * x__h126809 ;
  assign IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d897 =
	     x__h129472[47:12] + { 24'd0, y_f__h130365 } ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1392 =
	     x__h388361 * 24'd2487 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394 =
	     coarseFreq_cordic_x_[23] ?
	       -IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1392 :
	       IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1392 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1406 =
	     IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394[47:12] +
	     { 24'd0, y_f__h389203 } ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 =
	     x__h36907 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 =
	     IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47:12] +
	     { 24'd0, y_f__h37752 } ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 =
	     x__h42833 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 =
	     x__h42778[47:12] + { 24'd0, y_f__h43675 } ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1435 =
	     x__h391156 * 24'd2487 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437 =
	     coarseFreq_cordic_y_[23] ?
	       -IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1435 :
	       IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1435 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1449 =
	     IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437[47:12] +
	     { 24'd0, y_f__h391998 } ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 =
	     x__h45578 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 =
	     x__h45523[47:12] + { 24'd0, y_f__h46420 } ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 =
	     x__h39655 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 =
	     x__h39600[47:12] + { 24'd0, y_f__h40497 } ;
  assign IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d610 =
	     x__h109720[35:6] + { 24'd0, y_f__h110451 } ;
  assign IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d687 =
	     x__h114320[35:6] + { 24'd0, y_f__h115045 } ;
  assign IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d596 =
	     x__h109771 * x__h109790 ;
  assign IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d673 =
	     x__h109771 * x__h107492 ;
  assign IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d566 =
	     x__h107416[35:6] + { 24'd0, y_f__h108153 } ;
  assign IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d649 =
	     x__h112028[35:6] + { 24'd0, y_f__h112753 } ;
  assign IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d552 =
	     x__h112073 * x__h107492 ;
  assign IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d635 =
	     x__h112073 * x__h109790 ;
  assign IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353 =
	     coarseFreq_fsError[23] ?
	       _25734_MUL_IF_coarseFreq_fsError_347_BIT_23_348_ETC___d1351 :
	       -_25734_MUL_IF_coarseFreq_fsError_347_BIT_23_348_ETC___d1351 ;
  assign IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1365 =
	     IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353[47:12] +
	     { 24'd0, y_f__h385888 } ;
  assign IF_coarseFreq_lastSample_95_BIT_17_97_THEN_0_C_ETC___d515 =
	     x__h104652[35:6] + { 24'd0, y_f__h105439 } ;
  assign NOT_IF_coarseFreq_accumError_12_BIT_20_27_THEN_ETC___d808 =
	     (IF_coarseFreq_accumError_12_BIT_20_27_THEN_IF__ETC___d766 ^
	      24'h800000) >=
	     (IF_coarseFreq_accumError_12_BIT_41_67_THEN_IF__ETC___d806 ^
	      24'h800000) ;
  assign NOT_IF_coarseFreq_accumError_12_BIT_41_67_THEN_ETC___d1010 =
	     (IF_coarseFreq_accumError_12_BIT_41_67_THEN_IF__ETC___d806 ^
	      24'h800000) >
	     (IF_coarseFreq_accumError_12_BIT_20_27_THEN_IF__ETC___d766 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11],
	       SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 } ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11],
	       SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1494 =
	     { 33'd0, x__h394008 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1497 =
	     { 33'd0, x__h394008 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1505 =
	     { 33'd0, x__h394008 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1514 =
	     { 33'd0, x__h394008 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1523 =
	     { 33'd0, x__h394008 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1532 =
	     { 33'd0, x__h394008 } * 39'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1558 =
	     { 33'd0, x__h394788 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1561 =
	     { 33'd0, x__h394788 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1569 =
	     { 33'd0, x__h394788 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1578 =
	     { 33'd0, x__h394788 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1587 =
	     { 33'd0, x__h394788 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1596 =
	     { 33'd0, x__h394788 } * 39'd1000000 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 } ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1500 =
	     39'd10 * digit__h393978 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1564 =
	     39'd10 * digit__h394758 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1509 =
	     39'd10 * y__h394191 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1573 =
	     39'd10 * y__h394971 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1518 =
	     39'd10 * y__h394280 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1582 =
	     39'd10 * y__h395060 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1527 =
	     39'd10 * y__h394369 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1591 =
	     39'd10 * y__h395149 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1536 =
	     39'd10 * y__h394458 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1600 =
	     39'd10 * y__h395238 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1008 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1007 ;
  assign _25734_MUL_IF_coarseFreq_fsError_347_BIT_23_348_ETC___d1351 =
	     24'd25734 * x__h385058 ;
  assign _651_MUL_IF_IF_coarseFreq_accumError_12_BIT_20__ETC___d1119 =
	     24'd651 * x__h193424 ;
  assign abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697 =
	     (state_mkFSMstate == 3'd0 ||
	      !n_656_ULT_20___d1657 && state_mkFSMstate == 3'd2 ||
	      !n_656_ULT_20___d1657 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign ax1_f__h126093 = { res_f__h128790, 12'd0 } ;
  assign ax2_f__h126088 = { ax1_f__h126093, 2'd0 } ;
  assign ax2_i__h126087 = { x__h126095[11], x__h126095 } ;
  assign coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1616 =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	      !coarseFreq_n_21_ULT_20___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      !coarseFreq_n_21_ULT_20___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23) &&
	     (!coarseFreq_coarseErrorCalc_start_reg_1 ||
	      coarseFreq_coarseErrorCalc_state_fired) ;
  assign coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) &&
	     (!coarseFreq_cordic_atanCalc_start_reg_1 ||
	      coarseFreq_cordic_atanCalc_state_fired) ;
  assign coarseFreq_cordic_n_8_ULT_14___d39 = coarseFreq_cordic_n < 4'd14 ;
  assign coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 =
	     coarseFreq_cordic_x_ - coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 =
	     coarseFreq_cordic_x_ + coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 =
	     coarseFreq_cordic_y_ - coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 =
	     coarseFreq_cordic_y_ + coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_z__1_SLE_0___d256 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign coarseFreq_cordic_z__1_SLE_3216___d72 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign coarseFreq_cordic_z__1_SLT_3216___d160 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) < 24'd8391824 ;
  assign coarseFreq_n_21_ULT_20___d322 = coarseFreq_n < 10'd20 ;
  assign digit__h393978 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1494[9:6] } ;
  assign digit__h394045 =
	     { 35'd0,
	       tx94043_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2[3:0] } ;
  assign digit__h394134 =
	     { 35'd0,
	       tx94132_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3[3:0] } ;
  assign digit__h394223 =
	     { 35'd0,
	       tx94221_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4[3:0] } ;
  assign digit__h394312 =
	     { 35'd0,
	       tx94310_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5[3:0] } ;
  assign digit__h394401 =
	     { 35'd0,
	       tx94399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6[3:0] } ;
  assign digit__h394758 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1558[9:6] } ;
  assign digit__h394825 =
	     { 35'd0,
	       tx94823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7[3:0] } ;
  assign digit__h394914 =
	     { 35'd0,
	       tx94912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8[3:0] } ;
  assign digit__h395003 =
	     { 35'd0,
	       tx95001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9[3:0] } ;
  assign digit__h395092 =
	     { 35'd0,
	       tx95090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10[3:0] } ;
  assign digit__h395181 =
	     { 35'd0,
	       tx95179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11[3:0] } ;
  assign n_656_ULT_20___d1657 = n < 10'd20 ;
  assign res_f__h128790 =
	     (!x__h126416[35] &&
	      (x__h126416[23] || x__h126416[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h126416[35] &&
		 (!x__h126416[23] || ~x__h126416[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h126416[11:0]) ;
  assign res_i__h138917 =
	     (!x__h125726[36] &&
	      (x__h125726[23] || x__h125726[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h125726[36] &&
		 (!x__h125726[23] || ~x__h125726[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h125726[23:12]) ;
  assign res_i__h393184 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35:24] !=
	       12'd0)) ?
	       12'd2047 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35:24] !=
		  12'd0)) ?
		  12'd2048 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[23:12]) ;
  assign res_i__h393212 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35:24] !=
	       12'd0)) ?
	       12'd2047 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35:24] !=
		  12'd0)) ?
		  12'd2048 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[23:12]) ;
  assign tx94043_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2 =
	     tx__h394043 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1500[38:0] ;
  assign tx94132_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3 =
	     tx__h394132 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1509[38:0] ;
  assign tx94221_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4 =
	     tx__h394221 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1518[38:0] ;
  assign tx94310_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5 =
	     tx__h394310 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1527[38:0] ;
  assign tx94399_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6 =
	     tx__h394399 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1536[38:0] ;
  assign tx94823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7 =
	     tx__h394823 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1564[38:0] ;
  assign tx94912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8 =
	     tx__h394912 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1573[38:0] ;
  assign tx95001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9 =
	     tx__h395001 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1582[38:0] ;
  assign tx95090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10 =
	     tx__h395090 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1591[38:0] ;
  assign tx95179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11 =
	     tx__h395179 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1600[38:0] ;
  assign tx__h394043 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1497[38:6] } ;
  assign tx__h394132 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1505[38:6] } ;
  assign tx__h394221 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1514[38:6] } ;
  assign tx__h394310 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1523[38:6] } ;
  assign tx__h394399 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1532[38:6] } ;
  assign tx__h394823 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1561[38:6] } ;
  assign tx__h394912 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1569[38:6] } ;
  assign tx__h395001 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1578[38:6] } ;
  assign tx__h395090 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1587[38:6] } ;
  assign tx__h395179 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1596[38:6] } ;
  assign x__h104365 =
	     (!x__h104652[35] &&
	      IF_coarseFreq_lastSample_95_BIT_17_97_THEN_0_C_ETC___d515[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_lastSample_95_BIT_17_97_THEN_0_C_ETC___d515 ;
  assign x__h104652 =
	     coarseFreq_lastSample[17] ?
	       { 12'd0, x__h109790, 6'd0 } :
	       -{ 12'd0, x__h109790, 6'd0 } ;
  assign x__h106841 =
	     ((!x__h107129[29] &&
	       (x__h107129[17] || x__h107129[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h107129[29] &&
		  (!x__h107129[17] || ~x__h107129[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h107129[17:0])) -
	     ((!x__h109433[29] &&
	       (x__h109433[17] || x__h109433[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h109433[29] &&
		  (!x__h109433[17] || ~x__h109433[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h109433[17:0])) ;
  assign x__h107129 =
	     (!x__h107416[35] &&
	      IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d566[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d566 ;
  assign x__h107416 =
	     (coarseFreq_currSample[35] && !coarseFreq_lastSample[35] ||
	      coarseFreq_lastSample[35] && !coarseFreq_currSample[35]) ?
	       -IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d552 :
	       IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d552 ;
  assign x__h107492 =
	     coarseFreq_lastSample[35] ?
	       -coarseFreq_lastSample[35:18] :
	       coarseFreq_lastSample[35:18] ;
  assign x__h109433 =
	     (!x__h109720[35] &&
	      IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d610[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d610 ;
  assign x__h109720 =
	     (coarseFreq_currSample[17] && !coarseFreq_lastSample[17] ||
	      coarseFreq_lastSample[17] && !coarseFreq_currSample[17]) ?
	       -IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d596 :
	       IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d596 ;
  assign x__h109771 =
	     coarseFreq_currSample[17] ?
	       -coarseFreq_currSample[17:0] :
	       coarseFreq_currSample[17:0] ;
  assign x__h109790 =
	     coarseFreq_lastSample[17] ?
	       -coarseFreq_lastSample[17:0] :
	       coarseFreq_lastSample[17:0] ;
  assign x__h111453 =
	     ((!x__h111741[29] &&
	       (x__h111741[17] || x__h111741[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h111741[29] &&
		  (!x__h111741[17] || ~x__h111741[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h111741[17:0])) +
	     ((!x__h114033[29] &&
	       (x__h114033[17] || x__h114033[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h114033[29] &&
		  (!x__h114033[17] || ~x__h114033[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h114033[17:0])) ;
  assign x__h111741 =
	     (!x__h112028[35] &&
	      IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d649[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_39_BIT_35_40_AND_NOT__ETC___d649 ;
  assign x__h112028 =
	     (coarseFreq_currSample[35] && !coarseFreq_lastSample[17] ||
	      coarseFreq_lastSample[17] && !coarseFreq_currSample[35]) ?
	       -IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d635 :
	       IF_coarseFreq_currSample_39_BIT_35_40_THEN_NEG_ETC___d635 ;
  assign x__h112073 =
	     coarseFreq_currSample[35] ?
	       -coarseFreq_currSample[35:18] :
	       coarseFreq_currSample[35:18] ;
  assign x__h114033 =
	     (!x__h114320[35] &&
	      IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d687[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_39_BIT_17_87_AND_NOT__ETC___d687 ;
  assign x__h114320 =
	     (coarseFreq_currSample[17] && !coarseFreq_lastSample[35] ||
	      coarseFreq_lastSample[35] && !coarseFreq_currSample[17]) ?
	       -IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d673 :
	       IF_coarseFreq_currSample_39_BIT_17_87_THEN_NEG_ETC___d673 ;
  assign x__h116457 =
	     coarseFreq_accumError[41:21] +
	     { coarseFreq_lastSample[35:18], 3'd0 } ;
  assign x__h116494 =
	     coarseFreq_accumError[20:0] +
	     { coarseFreq_lastSample[17:0], 3'd0 } ;
  assign x__h118692 =
	     (!x__h119021[47] &&
	      IF_IF_coarseFreq_accumError_12_BIT_20_27_AND_N_ETC___d1133[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_coarseFreq_accumError_12_BIT_20_27_AND_N_ETC___d1133 ;
  assign x__h119021 =
	     IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1102[23] ?
	       -_651_MUL_IF_IF_coarseFreq_accumError_12_BIT_20__ETC___d1119 :
	       _651_MUL_IF_IF_coarseFreq_accumError_12_BIT_20__ETC___d1119 ;
  assign x__h119624 =
	     (!x__h119953[47] &&
	      IF_coarseFreq_accumError_12_BIT_20_27_THEN_0_C_ETC___d745[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_12_BIT_20_27_THEN_0_C_ETC___d745 ;
  assign x__h119953 =
	     coarseFreq_accumError[20] ?
	       { 12'd0, x__h126809, 12'd0 } :
	       -{ 12'd0, x__h126809, 12'd0 } ;
  assign x__h122484 =
	     (!x__h122813[47] &&
	      IF_coarseFreq_accumError_12_BIT_41_67_THEN_0_C_ETC___d785[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_12_BIT_41_67_THEN_0_C_ETC___d785 ;
  assign x__h122813 =
	     coarseFreq_accumError[41] ?
	       { 12'd0, x__h126790, 12'd0 } :
	       -{ 12'd0, x__h126790, 12'd0 } ;
  assign x__h125104 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1092 ;
  assign x__h125136 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1092 ;
  assign x__h125269 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1007 ;
  assign x__h125726 =
	     (!x__h126065[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1072[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1072 ;
  assign x__h126065 =
	     (ax2_i__h126087[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052[23] ||
	      !ax2_i__h126087[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1060 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1060 ;
  assign x__h126095 =
	     (!x__h126416[35] &&
	      (x__h126416[23] || x__h126416[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h126416[35] &&
		 (!x__h126416[23] || ~x__h126416[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h126416[23:12]) ;
  assign x__h126416 =
	     (!x__h126745[47] &&
	      IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d829[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_12_BIT_41_67_AND_NOT__ETC___d829 ;
  assign x__h126745 =
	     (coarseFreq_accumError[41] && !coarseFreq_accumError[20] ||
	      coarseFreq_accumError[20] && !coarseFreq_accumError[41]) ?
	       -IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d815 :
	       IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d815 ;
  assign x__h126790 =
	     coarseFreq_accumError[41] ?
	       -{ coarseFreq_accumError[41:21], 3'd0 } :
	       { coarseFreq_accumError[41:21], 3'd0 } ;
  assign x__h126809 =
	     coarseFreq_accumError[20] ?
	       -{ coarseFreq_accumError[20:0], 3'd0 } :
	       { coarseFreq_accumError[20:0], 3'd0 } ;
  assign x__h129143 =
	     (!x__h129472[47] &&
	      IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d897[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_12_BIT_41_67_THEN_NEG_ETC___d897 ;
  assign x__h129472 = x__h126790 * x__h126790 ;
  assign x__h131855 =
	     (!x__h132184[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1031[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1031 ;
  assign x__h132184 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1017 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d1017 ;
  assign x__h132521 =
	     (!x__h132850[47] &&
	      IF_coarseFreq_accumError_12_BIT_20_27_THEN_NEG_ETC___d864[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_12_BIT_20_27_THEN_NEG_ETC___d864 ;
  assign x__h132850 = x__h126809 * x__h126809 ;
  assign x__h134993 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884[23] ?
	       ((!x__h132521[35] &&
		 (x__h132521[23] || x__h132521[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h132521[35] &&
		    (!x__h132521[23] || ~x__h132521[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h132521[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d884 ;
  assign x__h137022 =
	     ax2_i__h126087[12] ?
	       -{ ax2_i__h126087, ax2_f__h126088 } :
	       { ax2_i__h126087, ax2_f__h126088 } ;
  assign x__h137041 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d1052 ;
  assign x__h139386 =
	     (!x__h139725[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d987[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d987 ;
  assign x__h139725 =
	     (ax2_i__h126087[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958[23] ||
	      !ax2_i__h126087[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d975 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d975 ;
  assign x__h145515 =
	     (!x__h145844[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d937[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d937 ;
  assign x__h145844 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d923 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_B_ETC___d923 ;
  assign x__h148643 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917[23] ?
	       ((!x__h129143[35] &&
		 (x__h129143[23] || x__h129143[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h129143[35] &&
		    (!x__h129143[23] || ~x__h129143[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h129143[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d917 ;
  assign x__h150691 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_12_BIT__ETC___d958 ;
  assign x__h193424 =
	     IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1115[11] ?
	       -IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1102 :
	       IF_coarseFreq_accumError_12_BIT_20_27_AND_NOT__ETC___d1102 ;
  assign x__h201828 =
	     coarseFreq_yFix[20] ?
	       -coarseFreq_yFix[20:3] :
	       coarseFreq_yFix[20:3] ;
  assign x__h204122 =
	     coarseFreq_xFix[20] ?
	       -coarseFreq_xFix[20:3] :
	       coarseFreq_xFix[20:3] ;
  assign x__h205817 =
	     ((!x__h206105[29] &&
	       (x__h206105[17] || x__h206105[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h206105[29] &&
		  (!x__h206105[17] || ~x__h206105[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h206105[17:0])) -
	     ((!x__h208438[29] &&
	       (x__h208438[17] || x__h208438[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h208438[29] &&
		  (!x__h208438[17] || ~x__h208438[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h208438[17:0])) ;
  assign x__h206105 =
	     (!x__h206392[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1186[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1186 ;
  assign x__h206392 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11] &&
	      !coarseFreq_xFix[20] ||
	      coarseFreq_xFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1172 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1172 ;
  assign x__h208438 =
	     (!x__h208725[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1234[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1234 ;
  assign x__h208725 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11] &&
	      !coarseFreq_yFix[20] ||
	      coarseFreq_yFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1220 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1220 ;
  assign x__h210462 =
	     ((!x__h210750[29] &&
	       (x__h210750[17] || x__h210750[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h210750[29] &&
		  (!x__h210750[17] || ~x__h210750[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h210750[17:0])) +
	     ((!x__h213044[29] &&
	       (x__h213044[17] || x__h213044[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h213044[29] &&
		  (!x__h213044[17] || ~x__h213044[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h213044[17:0])) ;
  assign x__h210750 =
	     (!x__h211037[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1273[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1273 ;
  assign x__h211037 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11] &&
	      !coarseFreq_yFix[20] ||
	      coarseFreq_yFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1259 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO__ETC___d1259 ;
  assign x__h213044 =
	     (!x__h213331[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1311[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1311 ;
  assign x__h213331 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11] &&
	      !coarseFreq_xFix[20] ||
	      coarseFreq_xFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1297 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO__ETC___d1297 ;
  assign x__h36907 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 :
	       coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 ;
  assign x__h373444 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423,
	       fpart__h393752 } ;
  assign x__h375730 =
	     SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468[11] ?
	       -{ SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468,
		  fpart__h394538 } :
	       { SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468,
		 fpart__h394538 } ;
  assign x__h378034 =
	     SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423[11] ?
	       -x__h373444 :
	       x__h373444 ;
  assign x__h385058 =
	     coarseFreq_fsError[23] ?
	       -coarseFreq_fsError :
	       coarseFreq_fsError ;
  assign x__h388361 =
	     coarseFreq_cordic_x_[23] ?
	       -coarseFreq_cordic_x_ :
	       coarseFreq_cordic_x_ ;
  assign x__h391156 =
	     coarseFreq_cordic_y_[23] ?
	       -coarseFreq_cordic_y_ :
	       coarseFreq_cordic_y_ ;
  assign x__h39271 =
	     (!x__h39600[47] &&
	      IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 ;
  assign x__h393197 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35:24] !=
	       12'd0)) ?
	       12'd4095 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[35:24] !=
		  12'd0)) ?
		  12'd0 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_389_TH_ETC___d1409[11:0]) ;
  assign x__h393225 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35:24] !=
	       12'd0)) ?
	       12'd4095 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[35:24] !=
		  12'd0)) ?
		  12'd0 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_432_TH_ETC___d1452[11:0]) ;
  assign x__h394008 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477[12] &&
	      fpart__h393752 != 6'd0) ?
	       y_avValue_snd__h393942 :
	       fpart__h393752 ;
  assign x__h394788 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541[12] &&
	      fpart__h394538 != 6'd0) ?
	       y_avValue_snd__h394722 :
	       fpart__h394538 ;
  assign x__h39600 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 ;
  assign x__h39655 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 :
	       coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 ;
  assign x__h42449 =
	     (!x__h42778[47] &&
	      IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 ;
  assign x__h42778 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 ;
  assign x__h42833 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 :
	       coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 ;
  assign x__h45194 =
	     (!x__h45523[47] &&
	      IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 ;
  assign x__h45523 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 ;
  assign x__h45578 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 :
	       coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 ;
  assign x__h48636 = coarseFreq_cordic_x_ - x__h49713 ;
  assign x__h48736 = coarseFreq_cordic_y_ + x__h49784 ;
  assign x__h48807 =
	     coarseFreq_cordic_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h49698 = coarseFreq_cordic_x_ + x__h49713 ;
  assign x__h49713 =
	     coarseFreq_cordic_y_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_y_[23]}} ;
  assign x__h49769 = coarseFreq_cordic_y_ - x__h49784 ;
  assign x__h49784 =
	     coarseFreq_cordic_x_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_x_[23]}} ;
  assign x__h49840 =
	     coarseFreq_cordic_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign y__h394191 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1500[38:0] +
	     digit__h394045 ;
  assign y__h394280 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1509[38:0] +
	     digit__h394134 ;
  assign y__h394369 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1518[38:0] +
	     digit__h394223 ;
  assign y__h394458 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1527[38:0] +
	     digit__h394312 ;
  assign y__h394971 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1564[38:0] +
	     digit__h394825 ;
  assign y__h395060 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1573[38:0] +
	     digit__h394914 ;
  assign y__h395149 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1582[38:0] +
	     digit__h395003 ;
  assign y__h395238 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1591[38:0] +
	     digit__h395092 ;
  assign y_avValue_snd__h393942 = 6'd0 - fpart__h393752 ;
  assign y_avValue_snd__h394722 = 6'd0 - fpart__h394538 ;
  assign y_f__h105439 =
	     (x__h104652[5] && (x__h104652[35] || x__h104652[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h108153 =
	     (x__h107416[5] && (x__h107416[35] || x__h107416[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h110451 =
	     (x__h109720[5] && (x__h109720[35] || x__h109720[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h112753 =
	     (x__h112028[5] && (x__h112028[35] || x__h112028[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h115045 =
	     (x__h114320[5] && (x__h114320[35] || x__h114320[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h120902 =
	     (x__h119953[11] &&
	      (x__h119953[47] || x__h119953[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h123762 =
	     (x__h122813[11] &&
	      (x__h122813[47] || x__h122813[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h127638 =
	     (x__h126745[11] &&
	      (x__h126745[47] || x__h126745[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h130365 =
	     (x__h129472[11] &&
	      (x__h129472[47] || x__h129472[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h133743 =
	     (x__h132850[11] &&
	      (x__h132850[47] || x__h132850[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h135835 =
	     (x__h132184[11] &&
	      (x__h132184[47] || x__h132184[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h137745 =
	     (x__h126065[1] && (x__h126065[38] || x__h126065[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h149485 =
	     (x__h145844[11] &&
	      (x__h145844[47] || x__h145844[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h151395 =
	     (x__h139725[1] && (x__h139725[38] || x__h139725[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h194254 =
	     (x__h119021[11] &&
	      (x__h119021[47] || x__h119021[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h207158 =
	     (x__h206392[5] && (x__h206392[35] || x__h206392[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h209460 =
	     (x__h208725[5] && (x__h208725[35] || x__h208725[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h211764 =
	     (x__h211037[5] && (x__h211037[35] || x__h211037[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h214058 =
	     (x__h213331[5] && (x__h213331[35] || x__h213331[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h37752 =
	     (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[11] &&
	      (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] ||
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h385888 =
	     (IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353[11] &&
	      (IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353[47] ||
	       IF_coarseFreq_fsError_347_BIT_23_348_THEN_2573_ETC___d1353[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h389203 =
	     (IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394[11] &&
	      (IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394[47] ||
	       IF_coarseFreq_cordic_x__9_BIT_23_389_THEN_NEG__ETC___d1394[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h391998 =
	     (IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437[11] &&
	      (IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437[47] ||
	       IF_coarseFreq_cordic_y__0_BIT_23_432_THEN_NEG__ETC___d1437[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h40497 =
	     (x__h39600[11] && (x__h39600[47] || x__h39600[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h43675 =
	     (x__h42778[11] && (x__h42778[47] || x__h42778[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h46420 =
	     (x__h45523[11] && (x__h45523[47] || x__h45523[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h393752 = coarseFreq_samples_0[23:18];
      10'd1: fpart__h393752 = coarseFreq_samples_1[23:18];
      10'd2: fpart__h393752 = coarseFreq_samples_2[23:18];
      10'd3: fpart__h393752 = coarseFreq_samples_3[23:18];
      10'd4: fpart__h393752 = coarseFreq_samples_4[23:18];
      10'd5: fpart__h393752 = coarseFreq_samples_5[23:18];
      10'd6: fpart__h393752 = coarseFreq_samples_6[23:18];
      10'd7: fpart__h393752 = coarseFreq_samples_7[23:18];
      10'd8: fpart__h393752 = coarseFreq_samples_8[23:18];
      10'd9: fpart__h393752 = coarseFreq_samples_9[23:18];
      10'd10: fpart__h393752 = coarseFreq_samples_10[23:18];
      10'd11: fpart__h393752 = coarseFreq_samples_11[23:18];
      10'd12: fpart__h393752 = coarseFreq_samples_12[23:18];
      10'd13: fpart__h393752 = coarseFreq_samples_13[23:18];
      10'd14: fpart__h393752 = coarseFreq_samples_14[23:18];
      10'd15: fpart__h393752 = coarseFreq_samples_15[23:18];
      10'd16: fpart__h393752 = coarseFreq_samples_16[23:18];
      10'd17: fpart__h393752 = coarseFreq_samples_17[23:18];
      10'd18: fpart__h393752 = coarseFreq_samples_18[23:18];
      10'd19: fpart__h393752 = coarseFreq_samples_19[23:18];
      default: fpart__h393752 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h394538 = coarseFreq_samples_0[5:0];
      10'd1: fpart__h394538 = coarseFreq_samples_1[5:0];
      10'd2: fpart__h394538 = coarseFreq_samples_2[5:0];
      10'd3: fpart__h394538 = coarseFreq_samples_3[5:0];
      10'd4: fpart__h394538 = coarseFreq_samples_4[5:0];
      10'd5: fpart__h394538 = coarseFreq_samples_5[5:0];
      10'd6: fpart__h394538 = coarseFreq_samples_6[5:0];
      10'd7: fpart__h394538 = coarseFreq_samples_7[5:0];
      10'd8: fpart__h394538 = coarseFreq_samples_8[5:0];
      10'd9: fpart__h394538 = coarseFreq_samples_9[5:0];
      10'd10: fpart__h394538 = coarseFreq_samples_10[5:0];
      10'd11: fpart__h394538 = coarseFreq_samples_11[5:0];
      10'd12: fpart__h394538 = coarseFreq_samples_12[5:0];
      10'd13: fpart__h394538 = coarseFreq_samples_13[5:0];
      10'd14: fpart__h394538 = coarseFreq_samples_14[5:0];
      10'd15: fpart__h394538 = coarseFreq_samples_15[5:0];
      10'd16: fpart__h394538 = coarseFreq_samples_16[5:0];
      10'd17: fpart__h394538 = coarseFreq_samples_17[5:0];
      10'd18: fpart__h394538 = coarseFreq_samples_18[5:0];
      10'd19: fpart__h394538 = coarseFreq_samples_19[5:0];
      default: fpart__h394538 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_cordic_n)
  begin
    case (coarseFreq_cordic_n)
      4'd0: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3216;
      4'd1: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1899;
      4'd2: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1003;
      4'd3: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd509;
      4'd4: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd255;
      4'd5: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd127;
      4'd6: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd63;
      4'd7: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd31;
      4'd8: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd15;
      4'd9: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd7;
      4'd10: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3;
      4'd11: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd0;
      default: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_0[17:6];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_1[17:6];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_2[17:6];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_3[17:6];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_4[17:6];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_5[17:6];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_6[17:6];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_7[17:6];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_8[17:6];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_9[17:6];
      10'd10:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_10[17:6];
      10'd11:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_11[17:6];
      10'd12:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_12[17:6];
      10'd13:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_13[17:6];
      10'd14:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_14[17:6];
      10'd15:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_15[17:6];
      10'd16:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_16[17:6];
      10'd17:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_17[17:6];
      10'd18:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_18[17:6];
      10'd19:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
	      coarseFreq_samples_19[17:6];
      default: SEL_ARR_coarseFreq_samples_0_82_BITS_17_TO_6_4_ETC___d468 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_0[35:24];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_1[35:24];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_2[35:24];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_3[35:24];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_4[35:24];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_5[35:24];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_6[35:24];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_7[35:24];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_8[35:24];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_9[35:24];
      10'd10:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_10[35:24];
      10'd11:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_11[35:24];
      10'd12:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_12[35:24];
      10'd13:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_13[35:24];
      10'd14:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_14[35:24];
      10'd15:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_15[35:24];
      10'd16:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_16[35:24];
      10'd17:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_17[35:24];
      10'd18:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_18[35:24];
      10'd19:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
	      coarseFreq_samples_19[35:24];
      default: SEL_ARR_coarseFreq_samples_0_82_BITS_35_TO_24__ETC___d423 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY 42'd0;
	coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    4'd0;
	coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY 21'd512;
	coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY 21'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 18'd64;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (coarseFreq_accumError$EN)
	  coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_accumError$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg$EN)
	  coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg_1$EN)
	  coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg_1$D_IN;
	if (coarseFreq_coarseErrorCalc_state_can_overlap$EN)
	  coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_can_overlap$D_IN;
	if (coarseFreq_coarseErrorCalc_state_fired$EN)
	  coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_fired$D_IN;
	if (coarseFreq_coarseErrorCalc_state_mkFSMstate$EN)
	  coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg$EN)
	  coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg_1$EN)
	  coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg_1$D_IN;
	if (coarseFreq_cordic_atanCalc_state_can_overlap$EN)
	  coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_can_overlap$D_IN;
	if (coarseFreq_cordic_atanCalc_state_fired$EN)
	  coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_fired$D_IN;
	if (coarseFreq_cordic_atanCalc_state_mkFSMstate$EN)
	  coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_n$EN)
	  coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_n$D_IN;
	if (coarseFreq_cordic_x_$EN)
	  coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_x_$D_IN;
	if (coarseFreq_cordic_y_$EN)
	  coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_y_$D_IN;
	if (coarseFreq_cordic_z_$EN)
	  coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_z_$D_IN;
	if (coarseFreq_currSample$EN)
	  coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_currSample$D_IN;
	if (coarseFreq_fsError$EN)
	  coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY coarseFreq_fsError$D_IN;
	if (coarseFreq_lastSample$EN)
	  coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_lastSample$D_IN;
	if (coarseFreq_n$EN)
	  coarseFreq_n <= `BSV_ASSIGNMENT_DELAY coarseFreq_n$D_IN;
	if (coarseFreq_samples_0$EN)
	  coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_0$D_IN;
	if (coarseFreq_samples_1$EN)
	  coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_1$D_IN;
	if (coarseFreq_samples_10$EN)
	  coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_10$D_IN;
	if (coarseFreq_samples_11$EN)
	  coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_11$D_IN;
	if (coarseFreq_samples_12$EN)
	  coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_12$D_IN;
	if (coarseFreq_samples_13$EN)
	  coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_13$D_IN;
	if (coarseFreq_samples_14$EN)
	  coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_14$D_IN;
	if (coarseFreq_samples_15$EN)
	  coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_15$D_IN;
	if (coarseFreq_samples_16$EN)
	  coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_16$D_IN;
	if (coarseFreq_samples_17$EN)
	  coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_17$D_IN;
	if (coarseFreq_samples_18$EN)
	  coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_18$D_IN;
	if (coarseFreq_samples_19$EN)
	  coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_19$D_IN;
	if (coarseFreq_samples_2$EN)
	  coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_2$D_IN;
	if (coarseFreq_samples_3$EN)
	  coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_3$D_IN;
	if (coarseFreq_samples_4$EN)
	  coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_4$D_IN;
	if (coarseFreq_samples_5$EN)
	  coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_5$D_IN;
	if (coarseFreq_samples_6$EN)
	  coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_6$D_IN;
	if (coarseFreq_samples_7$EN)
	  coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_7$D_IN;
	if (coarseFreq_samples_8$EN)
	  coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_8$D_IN;
	if (coarseFreq_samples_9$EN)
	  coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_9$D_IN;
	if (coarseFreq_xFix$EN)
	  coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_xFix$D_IN;
	if (coarseFreq_yFix$EN)
	  coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_yFix$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coarseFreq_accumError = 42'h2AAAAAAAAAA;
    coarseFreq_coarseErrorCalc_start_reg = 1'h0;
    coarseFreq_coarseErrorCalc_start_reg_1 = 1'h0;
    coarseFreq_coarseErrorCalc_state_can_overlap = 1'h0;
    coarseFreq_coarseErrorCalc_state_fired = 1'h0;
    coarseFreq_coarseErrorCalc_state_mkFSMstate = 5'h0A;
    coarseFreq_cordic_atanCalc_start_reg = 1'h0;
    coarseFreq_cordic_atanCalc_start_reg_1 = 1'h0;
    coarseFreq_cordic_atanCalc_state_can_overlap = 1'h0;
    coarseFreq_cordic_atanCalc_state_fired = 1'h0;
    coarseFreq_cordic_atanCalc_state_mkFSMstate = 4'hA;
    coarseFreq_cordic_n = 4'hA;
    coarseFreq_cordic_x_ = 24'hAAAAAA;
    coarseFreq_cordic_y_ = 24'hAAAAAA;
    coarseFreq_cordic_z_ = 24'hAAAAAA;
    coarseFreq_currSample = 36'hAAAAAAAAA;
    coarseFreq_fsError = 24'hAAAAAA;
    coarseFreq_lastSample = 36'hAAAAAAAAA;
    coarseFreq_n = 10'h2AA;
    coarseFreq_samples_0 = 36'hAAAAAAAAA;
    coarseFreq_samples_1 = 36'hAAAAAAAAA;
    coarseFreq_samples_10 = 36'hAAAAAAAAA;
    coarseFreq_samples_11 = 36'hAAAAAAAAA;
    coarseFreq_samples_12 = 36'hAAAAAAAAA;
    coarseFreq_samples_13 = 36'hAAAAAAAAA;
    coarseFreq_samples_14 = 36'hAAAAAAAAA;
    coarseFreq_samples_15 = 36'hAAAAAAAAA;
    coarseFreq_samples_16 = 36'hAAAAAAAAA;
    coarseFreq_samples_17 = 36'hAAAAAAAAA;
    coarseFreq_samples_18 = 36'hAAAAAAAAA;
    coarseFreq_samples_19 = 36'hAAAAAAAAA;
    coarseFreq_samples_2 = 36'hAAAAAAAAA;
    coarseFreq_samples_3 = 36'hAAAAAAAAA;
    coarseFreq_samples_4 = 36'hAAAAAAAAA;
    coarseFreq_samples_5 = 36'hAAAAAAAAA;
    coarseFreq_samples_6 = 36'hAAAAAAAAA;
    coarseFreq_samples_7 = 36'hAAAAAAAAA;
    coarseFreq_samples_8 = 36'hAAAAAAAAA;
    coarseFreq_samples_9 = 36'hAAAAAAAAA;
    coarseFreq_xFix = 21'h0AAAAA;
    coarseFreq_yFix = 21'h0AAAAA;
    fV = 18'h2AAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_action_l40c23 || WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 38, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l38c9] and\n  [RL_action_l40c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l40c23 &&
	  (WILL_FIRE_RL_action_l41c13 || state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 40, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l40c23] and\n  [RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c13 && state_mkFSMstate == 3'd4)
	$display("Error: \"Tb_tang.bsv\", line 41, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l41c13] and\n  [RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 3'd1 || WILL_FIRE_RL_action_l40c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_f_init_l38c9, RL_action_l40c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__624_AND_abort_wget__625_626_OR_sta_ETC___d1697 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 &&
	  coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10)
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 66, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 47, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 48, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 49, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 50, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 51, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 53, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 59, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 65, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9] and\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 46, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l46c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11,\n  RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477[12] &&
	  fpart__h393752 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477[12] &&
	  fpart__h393752 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477[12] ||
	   fpart__h393752 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_35_T_ETC___d1477));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h393978);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394045);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394134);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394223);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394312);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394401);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541[12] &&
	  fpart__h394538 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541[12] &&
	  fpart__h394538 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541[12] ||
	   fpart__h394538 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_17_T_ETC___d1541));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394758);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394825);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h394914);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h395003);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h395092);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h395181);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 83, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 84, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 85, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 88, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 87, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 91, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 92, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 93, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 94, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 95, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l95c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 96, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 99, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l99c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 101, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 102, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l102c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 103, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l103c19] and\n  [RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 104, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l104c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22)
	$display("Error: \"CoarseFreq_optimal.bsv\", line 110, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l110c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 82, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l82c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20,\n  RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

