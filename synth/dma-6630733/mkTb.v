//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 18:01:15 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire coarseFreq_coarseErrorCalc_start_wire$whas,
       coarseFreq_coarseErrorCalc_state_set_pw$whas,
       coarseFreq_cordic_atanCalc_start_wire$whas,
       coarseFreq_cordic_atanCalc_state_set_pw$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register coarseFreq_accumError
  reg [41 : 0] coarseFreq_accumError;
  wire [41 : 0] coarseFreq_accumError$D_IN;
  wire coarseFreq_accumError$EN;

  // register coarseFreq_coarseErrorCalc_start_reg
  reg coarseFreq_coarseErrorCalc_start_reg;
  wire coarseFreq_coarseErrorCalc_start_reg$D_IN,
       coarseFreq_coarseErrorCalc_start_reg$EN;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  reg coarseFreq_coarseErrorCalc_start_reg_1;
  wire coarseFreq_coarseErrorCalc_start_reg_1$D_IN,
       coarseFreq_coarseErrorCalc_start_reg_1$EN;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  reg coarseFreq_coarseErrorCalc_state_can_overlap;
  wire coarseFreq_coarseErrorCalc_state_can_overlap$D_IN,
       coarseFreq_coarseErrorCalc_state_can_overlap$EN;

  // register coarseFreq_coarseErrorCalc_state_fired
  reg coarseFreq_coarseErrorCalc_state_fired;
  wire coarseFreq_coarseErrorCalc_state_fired$D_IN,
       coarseFreq_coarseErrorCalc_state_fired$EN;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate;
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_coarseErrorCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_atanCalc_start_reg
  reg coarseFreq_cordic_atanCalc_start_reg;
  wire coarseFreq_cordic_atanCalc_start_reg$D_IN,
       coarseFreq_cordic_atanCalc_start_reg$EN;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  reg coarseFreq_cordic_atanCalc_start_reg_1;
  wire coarseFreq_cordic_atanCalc_start_reg_1$D_IN,
       coarseFreq_cordic_atanCalc_start_reg_1$EN;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  reg coarseFreq_cordic_atanCalc_state_can_overlap;
  wire coarseFreq_cordic_atanCalc_state_can_overlap$D_IN,
       coarseFreq_cordic_atanCalc_state_can_overlap$EN;

  // register coarseFreq_cordic_atanCalc_state_fired
  reg coarseFreq_cordic_atanCalc_state_fired;
  wire coarseFreq_cordic_atanCalc_state_fired$D_IN,
       coarseFreq_cordic_atanCalc_state_fired$EN;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate;
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_cordic_atanCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_n
  reg [3 : 0] coarseFreq_cordic_n;
  wire [3 : 0] coarseFreq_cordic_n$D_IN;
  wire coarseFreq_cordic_n$EN;

  // register coarseFreq_cordic_x_
  reg [23 : 0] coarseFreq_cordic_x_;
  reg [23 : 0] coarseFreq_cordic_x_$D_IN;
  wire coarseFreq_cordic_x_$EN;

  // register coarseFreq_cordic_y_
  reg [23 : 0] coarseFreq_cordic_y_;
  reg [23 : 0] coarseFreq_cordic_y_$D_IN;
  wire coarseFreq_cordic_y_$EN;

  // register coarseFreq_cordic_z_
  reg [23 : 0] coarseFreq_cordic_z_;
  reg [23 : 0] coarseFreq_cordic_z_$D_IN;
  wire coarseFreq_cordic_z_$EN;

  // register coarseFreq_currSample
  reg [35 : 0] coarseFreq_currSample;
  wire [35 : 0] coarseFreq_currSample$D_IN;
  wire coarseFreq_currSample$EN;

  // register coarseFreq_fsError
  reg [23 : 0] coarseFreq_fsError;
  wire [23 : 0] coarseFreq_fsError$D_IN;
  wire coarseFreq_fsError$EN;

  // register coarseFreq_lastSample
  reg [35 : 0] coarseFreq_lastSample;
  reg [35 : 0] coarseFreq_lastSample$D_IN;
  wire coarseFreq_lastSample$EN;

  // register coarseFreq_n
  reg [9 : 0] coarseFreq_n;
  wire [9 : 0] coarseFreq_n$D_IN;
  wire coarseFreq_n$EN;

  // register coarseFreq_samples_0
  reg [35 : 0] coarseFreq_samples_0;
  reg [35 : 0] coarseFreq_samples_0$D_IN;
  wire coarseFreq_samples_0$EN;

  // register coarseFreq_samples_1
  reg [35 : 0] coarseFreq_samples_1;
  reg [35 : 0] coarseFreq_samples_1$D_IN;
  wire coarseFreq_samples_1$EN;

  // register coarseFreq_samples_2
  reg [35 : 0] coarseFreq_samples_2;
  reg [35 : 0] coarseFreq_samples_2$D_IN;
  wire coarseFreq_samples_2$EN;

  // register coarseFreq_samples_3
  reg [35 : 0] coarseFreq_samples_3;
  reg [35 : 0] coarseFreq_samples_3$D_IN;
  wire coarseFreq_samples_3$EN;

  // register coarseFreq_samples_4
  reg [35 : 0] coarseFreq_samples_4;
  reg [35 : 0] coarseFreq_samples_4$D_IN;
  wire coarseFreq_samples_4$EN;

  // register coarseFreq_samples_5
  reg [35 : 0] coarseFreq_samples_5;
  reg [35 : 0] coarseFreq_samples_5$D_IN;
  wire coarseFreq_samples_5$EN;

  // register coarseFreq_samples_6
  reg [35 : 0] coarseFreq_samples_6;
  reg [35 : 0] coarseFreq_samples_6$D_IN;
  wire coarseFreq_samples_6$EN;

  // register coarseFreq_samples_7
  reg [35 : 0] coarseFreq_samples_7;
  reg [35 : 0] coarseFreq_samples_7$D_IN;
  wire coarseFreq_samples_7$EN;

  // register coarseFreq_samples_8
  reg [35 : 0] coarseFreq_samples_8;
  reg [35 : 0] coarseFreq_samples_8$D_IN;
  wire coarseFreq_samples_8$EN;

  // register coarseFreq_samples_9
  reg [35 : 0] coarseFreq_samples_9;
  reg [35 : 0] coarseFreq_samples_9$D_IN;
  wire coarseFreq_samples_9$EN;

  // register coarseFreq_xFix
  reg [20 : 0] coarseFreq_xFix;
  wire [20 : 0] coarseFreq_xFix$D_IN;
  wire coarseFreq_xFix$EN;

  // register coarseFreq_yFix
  reg [20 : 0] coarseFreq_yFix;
  wire [20 : 0] coarseFreq_yFix$D_IN;
  wire coarseFreq_yFix$EN;

  // register fV
  reg [17 : 0] fV;
  wire [17 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule coarseFreq_cordic_ix
  wire [23 : 0] coarseFreq_cordic_ix$D_IN, coarseFreq_cordic_ix$D_OUT;
  wire coarseFreq_cordic_ix$CLR,
       coarseFreq_cordic_ix$DEQ,
       coarseFreq_cordic_ix$EMPTY_N,
       coarseFreq_cordic_ix$ENQ,
       coarseFreq_cordic_ix$FULL_N;

  // ports of submodule coarseFreq_cordic_iy
  wire [23 : 0] coarseFreq_cordic_iy$D_IN, coarseFreq_cordic_iy$D_OUT;
  wire coarseFreq_cordic_iy$CLR,
       coarseFreq_cordic_iy$DEQ,
       coarseFreq_cordic_iy$EMPTY_N,
       coarseFreq_cordic_iy$ENQ,
       coarseFreq_cordic_iy$FULL_N;

  // ports of submodule coarseFreq_cordic_iz
  wire [23 : 0] coarseFreq_cordic_iz$D_IN, coarseFreq_cordic_iz$D_OUT;
  wire coarseFreq_cordic_iz$CLR,
       coarseFreq_cordic_iz$DEQ,
       coarseFreq_cordic_iz$EMPTY_N,
       coarseFreq_cordic_iz$ENQ,
       coarseFreq_cordic_iz$FULL_N;

  // ports of submodule coarseFreq_newSample
  wire [35 : 0] coarseFreq_newSample$D_IN, coarseFreq_newSample$D_OUT;
  wire coarseFreq_newSample$CLR,
       coarseFreq_newSample$DEQ,
       coarseFreq_newSample$EMPTY_N,
       coarseFreq_newSample$ENQ,
       coarseFreq_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l40c23,
       WILL_FIRE_RL_action_l41c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1;

  // inputs to muxes for submodule ports
  wire [41 : 0] MUX_coarseFreq_accumError$write_1__VAL_1;
  wire [35 : 0] MUX_coarseFreq_currSample$write_1__VAL_1,
		MUX_coarseFreq_lastSample$write_1__VAL_2,
		MUX_coarseFreq_lastSample$write_1__VAL_3,
		MUX_coarseFreq_samples_0$write_1__VAL_3;
  wire [23 : 0] MUX_coarseFreq_cordic_x_$write_1__VAL_2,
		MUX_coarseFreq_cordic_x_$write_1__VAL_3,
		MUX_coarseFreq_cordic_x_$write_1__VAL_4,
		MUX_coarseFreq_cordic_y_$write_1__VAL_2,
		MUX_coarseFreq_cordic_y_$write_1__VAL_3,
		MUX_coarseFreq_cordic_y_$write_1__VAL_4,
		MUX_coarseFreq_cordic_z_$write_1__VAL_1,
		MUX_coarseFreq_cordic_z_$write_1__VAL_2,
		MUX_coarseFreq_cordic_z_$write_1__VAL_4,
		MUX_coarseFreq_fsError$write_1__VAL_1;
  wire [9 : 0] MUX_coarseFreq_n$write_1__VAL_1, MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_coarseFreq_cordic_n$write_1__VAL_1;
  wire MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_n$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_2,
       MUX_coarseFreq_samples_0$write_1__SEL_3,
       MUX_coarseFreq_samples_1$write_1__SEL_1,
       MUX_coarseFreq_samples_1$write_1__SEL_2,
       MUX_coarseFreq_samples_1$write_1__SEL_3,
       MUX_coarseFreq_samples_2$write_1__SEL_1,
       MUX_coarseFreq_samples_2$write_1__SEL_2,
       MUX_coarseFreq_samples_2$write_1__SEL_3,
       MUX_coarseFreq_samples_3$write_1__SEL_1,
       MUX_coarseFreq_samples_3$write_1__SEL_2,
       MUX_coarseFreq_samples_3$write_1__SEL_3,
       MUX_coarseFreq_samples_4$write_1__SEL_1,
       MUX_coarseFreq_samples_4$write_1__SEL_2,
       MUX_coarseFreq_samples_4$write_1__SEL_3,
       MUX_coarseFreq_samples_5$write_1__SEL_1,
       MUX_coarseFreq_samples_5$write_1__SEL_2,
       MUX_coarseFreq_samples_5$write_1__SEL_3,
       MUX_coarseFreq_samples_6$write_1__SEL_1,
       MUX_coarseFreq_samples_6$write_1__SEL_2,
       MUX_coarseFreq_samples_6$write_1__SEL_3,
       MUX_coarseFreq_samples_7$write_1__SEL_1,
       MUX_coarseFreq_samples_7$write_1__SEL_2,
       MUX_coarseFreq_samples_7$write_1__SEL_3,
       MUX_coarseFreq_samples_8$write_1__SEL_1,
       MUX_coarseFreq_samples_8$write_1__SEL_2,
       MUX_coarseFreq_samples_8$write_1__SEL_3,
       MUX_coarseFreq_samples_9$write_1__SEL_1,
       MUX_coarseFreq_samples_9$write_1__SEL_2,
       MUX_coarseFreq_samples_9$write_1__SEL_3,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1,
	       SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418,
	       SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393;
  reg [5 : 0] fpart__h299542, fpart__h300318;
  wire [77 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1434,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1437,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1445,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1454,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1463,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1472,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1498,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1501,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1509,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1518,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1527,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1536,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1440,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1504,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1449,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1513,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1458,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1522,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1467,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1531,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1476,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1540;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d863,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d957,
		IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d755,
		IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1332,
		IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172,
		IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1375,
		IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124,
		IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293,
		_25734_MUL_IF_coarseFreq_fsError_287_BIT_23_288_ETC___d1291,
		_651_MUL_IF_IF_coarseFreq_accumError_52_BIT_20__ETC___d1059,
		x__h117711,
		x__h118643,
		x__h121503,
		x__h125435,
		x__h128162,
		x__h130874,
		x__h131540,
		x__h144534,
		x__h39000,
		x__h42178,
		x__h44923;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1000,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d915,
		digit__h299758,
		digit__h299825,
		digit__h299914,
		digit__h300003,
		digit__h300092,
		digit__h300181,
		digit__h300528,
		digit__h300595,
		digit__h300684,
		digit__h300773,
		digit__h300862,
		digit__h300951,
		tx00001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4,
		tx00090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5,
		tx00179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6,
		tx00593_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7,
		tx00682_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8,
		tx00771_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9,
		tx00860_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10,
		tx00949_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11,
		tx99823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2,
		tx99912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3,
		tx__h299823,
		tx__h299912,
		tx__h300001,
		tx__h300090,
		tx__h300179,
		tx__h300593,
		tx__h300682,
		tx__h300771,
		tx__h300860,
		tx__h300949,
		x__h124755,
		x__h135712,
		x__h138415,
		y__h299971,
		y__h300060,
		y__h300149,
		y__h300238,
		y__h300741,
		y__h300830,
		y__h300919,
		y__h301008;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1012,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d927,
		x__h124416,
		x__h138076;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d877,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d971,
		IF_IF_coarseFreq_accumError_52_BIT_20_67_AND_N_ETC___d1073,
		IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349,
		IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102,
		IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392,
		IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1160,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1237,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1112,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1199,
		IF_coarseFreq_accumError_52_BIT_20_67_THEN_0_C_ETC___d685,
		IF_coarseFreq_accumError_52_BIT_20_67_THEN_NEG_ETC___d804,
		IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d769,
		IF_coarseFreq_accumError_52_BIT_41_07_THEN_0_C_ETC___d725,
		IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d837,
		IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1346,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186,
		IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1389,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138,
		IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d536,
		IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d613,
		IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d492,
		IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d575,
		IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1305,
		x__h103432,
		x__h106196,
		x__h108500,
		x__h110808,
		x__h113100,
		x__h117382,
		x__h118314,
		x__h121174,
		x__h125106,
		x__h127833,
		x__h130545,
		x__h131211,
		x__h144205,
		x__h205022,
		x__h207345,
		x__h209657,
		x__h211951,
		x__h38671,
		x__h41849,
		x__h44594;
  wire [29 : 0] IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1174,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1251,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1126,
		IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1213,
		IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d550,
		IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d627,
		IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d506,
		IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d589,
		IF_coarseFreq_lastSample_35_BIT_17_37_THEN_0_C_ETC___d455,
		x__h103145,
		x__h105909,
		x__h108213,
		x__h110521,
		x__h112813,
		x__h204735,
		x__h207058,
		x__h209370,
		x__h211664;
  wire [25 : 0] ax2_f__h124778;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1032,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d947,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992,
		IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1040,
		IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1042,
		IF_coarseFreq_accumError_52_BIT_20_67_THEN_IF__ETC___d706,
		IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1041,
		IF_coarseFreq_accumError_52_BIT_41_07_THEN_IF__ETC___d746,
		_0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d948,
		ax1_f__h124783,
		coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81,
		coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168,
		coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207,
		coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120,
		x__h123794,
		x__h123826,
		x__h123959,
		x__h125480,
		x__h125499,
		x__h133683,
		x__h135731,
		x__h147333,
		x__h149381,
		x__h192114,
		x__h290848,
		x__h294151,
		x__h296946,
		x__h36307,
		x__h39055,
		x__h42233,
		x__h44978,
		x__h48036,
		x__h48136,
		x__h48207,
		x__h49098,
		x__h49113,
		x__h49169,
		x__h49184,
		x__h49240;
  wire [20 : 0] x__h115237, x__h115274;
  wire [17 : 0] x__h105621,
		x__h106272,
		x__h108551,
		x__h108570,
		x__h110233,
		x__h110853,
		x__h200458,
		x__h202752,
		x__h204447,
		x__h209082,
		x__h279234,
		x__h281520,
		x__h283824;
  wire [12 : 0] SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481,
		SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417,
		ax2_i__h124777;
  wire [11 : 0] IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1053,
		IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1055,
		IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1054,
		res_f__h127480,
		res_i__h137607,
		res_i__h298974,
		res_i__h299002,
		x__h124785,
		x__h298987,
		x__h299015,
		y_f__h119592,
		y_f__h122452,
		y_f__h126328,
		y_f__h129055,
		y_f__h132433,
		y_f__h134525,
		y_f__h136435,
		y_f__h148175,
		y_f__h150085,
		y_f__h192944,
		y_f__h291678,
		y_f__h294993,
		y_f__h297788,
		y_f__h37152,
		y_f__h39897,
		y_f__h43075,
		y_f__h45820;
  wire [5 : 0] x__h299788,
	       x__h300558,
	       y_avValue_snd__h299722,
	       y_avValue_snd__h300492,
	       y_f__h104219,
	       y_f__h106933,
	       y_f__h109231,
	       y_f__h111533,
	       y_f__h113825,
	       y_f__h205778,
	       y_f__h208080,
	       y_f__h210384,
	       y_f__h212678;
  wire NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748,
       NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950,
       abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637,
       coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1556,
       coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283,
       coarseFreq_cordic_n_8_ULT_14___d39,
       coarseFreq_cordic_z__1_SLE_0___d256,
       coarseFreq_cordic_z__1_SLE_3216___d72,
       coarseFreq_cordic_z__1_SLT_3216___d160,
       coarseFreq_n_21_ULT_5___d322,
       n_596_ULT_20___d1597;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule coarseFreq_cordic_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_ix(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_ix$D_IN),
							       .ENQ(coarseFreq_cordic_ix$ENQ),
							       .DEQ(coarseFreq_cordic_ix$DEQ),
							       .CLR(coarseFreq_cordic_ix$CLR),
							       .D_OUT(coarseFreq_cordic_ix$D_OUT),
							       .FULL_N(coarseFreq_cordic_ix$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_ix$EMPTY_N));

  // submodule coarseFreq_cordic_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iy(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iy$D_IN),
							       .ENQ(coarseFreq_cordic_iy$ENQ),
							       .DEQ(coarseFreq_cordic_iy$DEQ),
							       .CLR(coarseFreq_cordic_iy$CLR),
							       .D_OUT(coarseFreq_cordic_iy$D_OUT),
							       .FULL_N(coarseFreq_cordic_iy$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iy$EMPTY_N));

  // submodule coarseFreq_cordic_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iz(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iz$D_IN),
							       .ENQ(coarseFreq_cordic_iz$ENQ),
							       .DEQ(coarseFreq_cordic_iz$DEQ),
							       .CLR(coarseFreq_cordic_iz$CLR),
							       .D_OUT(coarseFreq_cordic_iz$D_OUT),
							       .FULL_N(coarseFreq_cordic_iz$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iz$EMPTY_N));

  // submodule coarseFreq_newSample
  FIFO2 #(.width(32'd36), .guarded(1'd1)) coarseFreq_newSample(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_newSample$D_IN),
							       .ENQ(coarseFreq_newSample$ENQ),
							       .DEQ(coarseFreq_newSample$DEQ),
							       .CLR(coarseFreq_newSample$CLR),
							       .D_OUT(coarseFreq_newSample$D_OUT),
							       .FULL_N(coarseFreq_newSample$FULL_N),
							       .EMPTY_N(coarseFreq_newSample$EMPTY_N));

  // rule RL_action_l40c23
  assign WILL_FIRE_RL_action_l40c23 =
	     coarseFreq_newSample$FULL_N && n_596_ULT_20___d1597 &&
	     (state_mkFSMstate == 3'd2 || state_mkFSMstate == 3'd5) ;

  // rule RL_action_l41c13
  assign WILL_FIRE_RL_action_l41c13 =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1556 &&
	     !coarseFreq_coarseErrorCalc_start_reg &&
	     state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 3'd0 ||
	     !n_596_ULT_20___d1597 && start_wire$whas &&
	     state_mkFSMstate == 3'd2 ||
	     !n_596_ULT_20___d1597 && start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_596_ULT_20___d1597 && !start_wire$whas &&
	     state_mkFSMstate == 3'd2 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_596_ULT_20___d1597 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l47c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd1 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l48c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd2 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l49c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd3 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l50c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd4 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l51c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l53c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 =
	     !coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l66c13
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 =
	     coarseFreq_cordic_n_8_ULT_14___d39 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_cordic_atanCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     coarseFreq_cordic_atanCalc_start_reg ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l59c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22_1
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l87c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 =
	     coarseFreq_newSample$EMPTY_N && coarseFreq_n_21_ULT_5___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l88c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 =
	     coarseFreq_newSample$EMPTY_N &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd6 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 =
	     !coarseFreq_n_21_ULT_5___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l91c24
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 =
	     coarseFreq_n_21_ULT_5___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l99c17
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 =
	     !coarseFreq_n_21_ULT_5___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l102c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 =
	     coarseFreq_n_21_ULT_5___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l103c19
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 =
	     coarseFreq_cordic_ix$FULL_N && coarseFreq_cordic_iy$FULL_N &&
	     coarseFreq_cordic_iz$FULL_N &&
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd19 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l104c13
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l46c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     (coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1556 &&
	     coarseFreq_coarseErrorCalc_start_reg ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l82c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 =
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	     !coarseFreq_n_21_ULT_5___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	     !coarseFreq_n_21_ULT_5___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 =
	     !coarseFreq_n_21_ULT_5___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22_1
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 =
	     !coarseFreq_n_21_ULT_5___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ;
  assign MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ;
  assign MUX_coarseFreq_n$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_coarseFreq_accumError$write_1__VAL_1 =
	     { x__h115237, x__h115274 } ;
  assign MUX_coarseFreq_cordic_n$write_1__VAL_1 = coarseFreq_cordic_n + 4'd1 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_3 =
	     (!x__h41849[35] &&
	      (x__h41849[23] || x__h41849[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h41849[35] &&
		 (!x__h41849[23] || ~x__h41849[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h41849[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49098 : x__h48036 ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_2 =
	     (!x__h38671[35] &&
	      (x__h38671[23] || x__h38671[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h38671[35] &&
		 (!x__h38671[23] || ~x__h38671[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h38671[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_3 =
	     (!x__h44594[35] &&
	      (x__h44594[23] || x__h44594[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h44594[35] &&
		 (!x__h44594[23] || ~x__h44594[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h44594[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49169 : x__h48136 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_1 =
	     coarseFreq_cordic_z_ + 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_2 =
	     coarseFreq_cordic_z_ - 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49240 : x__h48207 ;
  assign MUX_coarseFreq_currSample$write_1__VAL_1 =
	     { x__h279234,
	       SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418,
	       fpart__h300318 } ;
  assign MUX_coarseFreq_fsError$write_1__VAL_1 =
	     (!x__h117382[35] &&
	      (x__h117382[23] || x__h117382[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h117382[35] &&
		 (!x__h117382[23] || ~x__h117382[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h117382[23:0]) ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_2 =
	     { coarseFreq_lastSample[35:18],
	       (!x__h103145[29] &&
		(x__h103145[17] || x__h103145[29:18] != 12'd0)) ?
		 18'd131071 :
		 ((x__h103145[29] &&
		   (!x__h103145[17] || ~x__h103145[29:18] != 12'd0)) ?
		    18'd131072 :
		    x__h103145[17:0]) } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_3 =
	     { x__h105621, x__h110233 } ;
  assign MUX_coarseFreq_n$write_1__VAL_1 = coarseFreq_n + 10'd1 ;
  assign MUX_coarseFreq_samples_0$write_1__VAL_3 =
	     { x__h204447, x__h209082 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign coarseFreq_cordic_atanCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     coarseFreq_cordic_atanCalc_start_reg_1 &&
	     !coarseFreq_cordic_atanCalc_state_fired ;
  assign coarseFreq_coarseErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_start_reg_1 &&
	     !coarseFreq_coarseErrorCalc_state_fired ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign coarseFreq_cordic_atanCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ;
  assign coarseFreq_coarseErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 3'd4 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register coarseFreq_accumError
  assign coarseFreq_accumError$D_IN =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12) ?
	       MUX_coarseFreq_accumError$write_1__VAL_1 :
	       42'd0 ;
  assign coarseFreq_accumError$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ;

  // register coarseFreq_coarseErrorCalc_start_reg
  assign coarseFreq_coarseErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ;
  assign coarseFreq_coarseErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1556 &&
	     !coarseFreq_coarseErrorCalc_start_reg ;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  assign coarseFreq_coarseErrorCalc_start_reg_1$D_IN =
	     coarseFreq_coarseErrorCalc_start_wire$whas ;
  assign coarseFreq_coarseErrorCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  assign coarseFreq_coarseErrorCalc_state_can_overlap$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ||
	     coarseFreq_coarseErrorCalc_state_can_overlap ;
  assign coarseFreq_coarseErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_fired
  assign coarseFreq_coarseErrorCalc_state_fired$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ;
  assign coarseFreq_coarseErrorCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  always@(MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 or
	  coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd21;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd22;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd23;
      default: coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_coarseErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ;

  // register coarseFreq_cordic_atanCalc_start_reg
  assign coarseFreq_cordic_atanCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ;
  assign coarseFreq_cordic_atanCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  assign coarseFreq_cordic_atanCalc_start_reg_1$D_IN =
	     coarseFreq_cordic_atanCalc_start_wire$whas ;
  assign coarseFreq_cordic_atanCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  assign coarseFreq_cordic_atanCalc_state_can_overlap$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ||
	     coarseFreq_cordic_atanCalc_state_can_overlap ;
  assign coarseFreq_cordic_atanCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_fired
  assign coarseFreq_cordic_atanCalc_state_fired$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ;
  assign coarseFreq_cordic_atanCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  always@(MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  coarseFreq_cordic_atanCalc_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd10;
      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd11;
      default: coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_atanCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ;

  // register coarseFreq_cordic_n
  assign coarseFreq_cordic_n$D_IN =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10) ?
	       MUX_coarseFreq_cordic_n$write_1__VAL_1 :
	       4'd0 ;
  assign coarseFreq_cordic_n$EN =
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ;

  // register coarseFreq_cordic_x_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  coarseFreq_cordic_ix$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_x_$D_IN = coarseFreq_cordic_ix$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_4;
      default: coarseFreq_cordic_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_x_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_y_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  coarseFreq_cordic_iy$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_y_$D_IN = coarseFreq_cordic_iy$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_4;
      default: coarseFreq_cordic_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_y_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_z_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  coarseFreq_cordic_iz$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_z_$D_IN = coarseFreq_cordic_iz$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_4;
      default: coarseFreq_cordic_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_z_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_currSample
  assign coarseFreq_currSample$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ?
	       MUX_coarseFreq_currSample$write_1__VAL_1 :
	       36'd0 ;
  assign coarseFreq_currSample$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ;

  // register coarseFreq_fsError
  assign coarseFreq_fsError$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ?
	       MUX_coarseFreq_fsError$write_1__VAL_1 :
	       24'd0 ;
  assign coarseFreq_fsError$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ;

  // register coarseFreq_lastSample
  always@(coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  coarseFreq_currSample or
	  MUX_coarseFreq_lastSample$write_1__VAL_2 or
	  MUX_coarseFreq_lastSample$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseFreq_lastSample$D_IN = coarseFreq_currSample;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_lastSample$D_IN = 36'd0;
      default: coarseFreq_lastSample$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_lastSample$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;

  // register coarseFreq_n
  assign coarseFreq_n$D_IN =
	     MUX_coarseFreq_n$write_1__SEL_1 ?
	       MUX_coarseFreq_n$write_1__VAL_1 :
	       10'd0 ;
  assign coarseFreq_n$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ;

  // register coarseFreq_samples_0
  always@(MUX_coarseFreq_samples_0$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_0$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_0$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_0$write_1__SEL_1:
	  coarseFreq_samples_0$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_0$write_1__SEL_2:
	  coarseFreq_samples_0$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_0$write_1__SEL_3:
	  coarseFreq_samples_0$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_0$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_0$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd0 ;

  // register coarseFreq_samples_1
  always@(MUX_coarseFreq_samples_1$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_1$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_1$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_1$write_1__SEL_1:
	  coarseFreq_samples_1$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_1$write_1__SEL_2:
	  coarseFreq_samples_1$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_1$write_1__SEL_3:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_1$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_1$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd1 ;

  // register coarseFreq_samples_2
  always@(MUX_coarseFreq_samples_2$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_2$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_2$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_2$write_1__SEL_1:
	  coarseFreq_samples_2$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_2$write_1__SEL_2:
	  coarseFreq_samples_2$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_2$write_1__SEL_3:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_2$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_2$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd2 ;

  // register coarseFreq_samples_3
  always@(MUX_coarseFreq_samples_3$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_3$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_3$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_3$write_1__SEL_1:
	  coarseFreq_samples_3$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_3$write_1__SEL_2:
	  coarseFreq_samples_3$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_3$write_1__SEL_3:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_3$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_3$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd3 ;

  // register coarseFreq_samples_4
  always@(MUX_coarseFreq_samples_4$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_4$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_4$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_4$write_1__SEL_1:
	  coarseFreq_samples_4$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_4$write_1__SEL_2:
	  coarseFreq_samples_4$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_4$write_1__SEL_3:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_4$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_4$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd4 ;

  // register coarseFreq_samples_5
  always@(MUX_coarseFreq_samples_5$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_5$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_5$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_5$write_1__SEL_1:
	  coarseFreq_samples_5$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_5$write_1__SEL_2:
	  coarseFreq_samples_5$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_5$write_1__SEL_3:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_5$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_5$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd5 ;

  // register coarseFreq_samples_6
  always@(MUX_coarseFreq_samples_6$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_6$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_6$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_6$write_1__SEL_1:
	  coarseFreq_samples_6$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_6$write_1__SEL_2:
	  coarseFreq_samples_6$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_6$write_1__SEL_3:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_6$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_6$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd6 ;

  // register coarseFreq_samples_7
  always@(MUX_coarseFreq_samples_7$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_7$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_7$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_7$write_1__SEL_1:
	  coarseFreq_samples_7$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_7$write_1__SEL_2:
	  coarseFreq_samples_7$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_7$write_1__SEL_3:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_7$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_7$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd7 ;

  // register coarseFreq_samples_8
  always@(MUX_coarseFreq_samples_8$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_8$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_8$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_8$write_1__SEL_1:
	  coarseFreq_samples_8$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_8$write_1__SEL_2:
	  coarseFreq_samples_8$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_8$write_1__SEL_3:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_8$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_8$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd8 ;

  // register coarseFreq_samples_9
  always@(MUX_coarseFreq_samples_9$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_9$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_9$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_9$write_1__SEL_1:
	  coarseFreq_samples_9$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_9$write_1__SEL_2:
	  coarseFreq_samples_9$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_9$write_1__SEL_3:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_9$D_IN =
		   36'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_9$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	     coarseFreq_n == 10'd9 ;

  // register coarseFreq_xFix
  assign coarseFreq_xFix$D_IN = { res_i__h298974, x__h298987[11:3] } ;
  assign coarseFreq_xFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ;

  // register coarseFreq_yFix
  assign coarseFreq_yFix$D_IN = { res_i__h299002, x__h299015[11:3] } ;
  assign coarseFreq_yFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ;

  // register fV
  assign fV$D_IN = { fV[17:6], inV[11:6] } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 3'd4) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd1 ;

  // register outV
  assign outV$D_IN = coarseFreq_fsError ;
  assign outV$EN = WILL_FIRE_RL_action_l41c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l40c23 or WILL_FIRE_RL_action_l41c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 3'd1;
      state_mkFSMstate == 3'd1: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l40c23: state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l41c13: state_mkFSMstate$D_IN = 3'd4;
      state_mkFSMstate == 3'd4: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     state_mkFSMstate == 3'd4 ;

  // submodule coarseFreq_cordic_ix
  assign coarseFreq_cordic_ix$D_IN = { coarseFreq_xFix, 3'd0 } ;
  assign coarseFreq_cordic_ix$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_ix$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ;
  assign coarseFreq_cordic_ix$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iy
  assign coarseFreq_cordic_iy$D_IN = { coarseFreq_yFix, 3'd0 } ;
  assign coarseFreq_cordic_iy$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_iy$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ;
  assign coarseFreq_cordic_iy$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iz
  assign coarseFreq_cordic_iz$D_IN =
	     (!IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[35] &&
	      (IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[23] ||
	       IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[35] &&
		 (!IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[23] ||
		  ~IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308[23:0]) ;
  assign coarseFreq_cordic_iz$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ;
  assign coarseFreq_cordic_iz$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ;
  assign coarseFreq_cordic_iz$CLR = 1'b0 ;

  // submodule coarseFreq_newSample
  assign coarseFreq_newSample$D_IN = {2{fV}} ;
  assign coarseFreq_newSample$ENQ = WILL_FIRE_RL_action_l40c23 ;
  assign coarseFreq_newSample$DEQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ;
  assign coarseFreq_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d863 =
	     x__h147333 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d877 =
	     x__h144534[47:12] + { 24'd0, y_f__h148175 } ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d957 =
	     x__h133683 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d971 =
	     x__h130874[47:12] + { 24'd0, y_f__h134525 } ;
  assign IF_IF_coarseFreq_accumError_52_BIT_20_67_AND_N_ETC___d1073 =
	     x__h117711[47:12] + { 24'd0, y_f__h192944 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1032 =
	     (!x__h124416[36] &&
	      (x__h124416[23] || x__h124416[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h124416[36] &&
		 (!x__h124416[23] || ~x__h124416[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h124416[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d947 =
	     (!x__h138076[36] &&
	      (x__h138076[23] || x__h138076[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h138076[36] &&
		 (!x__h138076[23] || ~x__h138076[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h138076[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824 =
	     (!x__h131211[35] &&
	      (x__h131211[23] || x__h131211[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h131211[35] &&
		 (!x__h131211[23] || ~x__h131211[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h131211[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857 =
	     (!x__h127833[35] &&
	      (x__h127833[23] || x__h127833[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h127833[35] &&
		 (!x__h127833[23] || ~x__h127833[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h127833[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824 +
	     ((!x__h144205[35] &&
	       (x__h144205[23] || x__h144205[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h144205[35] &&
		  (!x__h144205[23] || ~x__h144205[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h144205[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857 +
	     ((!x__h130545[35] &&
	       (x__h130545[23] || x__h130545[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h130545[35] &&
		  (!x__h130545[23] || ~x__h130545[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h130545[23:0])) ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349 =
	     (!IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334[47] &&
	      IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1346[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1346 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102 =
	     (!IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] &&
	      IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 ;
  assign IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392 =
	     (!IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377[47] &&
	      IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1389[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1389 ;
  assign IF_NOT_IF_coarseFreq_fsError_287_BIT_23_288_TH_ETC___d1308 =
	     (!IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293[47] &&
	      IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1305[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1305 ;
  assign IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1040 =
	     (!coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748) ?
	       x__h123959 :
	       ((!coarseFreq_accumError[41] &&
		 NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1032 :
		  24'd0) ;
  assign IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1053 =
	     (!coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748) ?
	       x__h123959[23:12] :
	       ((!coarseFreq_accumError[41] &&
		 NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950) ?
		  res_i__h137607 :
		  12'd0) ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1160 =
	     x__h281520 * x__h200458 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1174 =
	     x__h207345[35:6] + { 24'd0, y_f__h208080 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1237 =
	     x__h281520 * x__h202752 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1251 =
	     x__h211951[35:6] + { 24'd0, y_f__h212678 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1112 =
	     x__h283824 * x__h202752 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1126 =
	     x__h205022[35:6] + { 24'd0, y_f__h205778 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1199 =
	     x__h283824 * x__h200458 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1213 =
	     x__h209657[35:6] + { 24'd0, y_f__h210384 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1000 =
	     x__h135712 / x__h135731 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1012 =
	     x__h124755[38:2] + { 25'd0, y_f__h136435 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d915 =
	     x__h135712 / x__h149381 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d927 =
	     x__h138415[38:2] + { 25'd0, y_f__h150085 } ;
  assign IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1042 =
	     (coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d948 :
	       IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1041 ;
  assign IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1055 =
	     (coarseFreq_accumError[20] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d948[23:12] :
	       IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1054 ;
  assign IF_coarseFreq_accumError_52_BIT_20_67_THEN_0_C_ETC___d685 =
	     x__h118643[47:12] + { 24'd0, y_f__h119592 } ;
  assign IF_coarseFreq_accumError_52_BIT_20_67_THEN_IF__ETC___d706 =
	     coarseFreq_accumError[20] ?
	       ((!x__h118314[35] &&
		 (x__h118314[23] || x__h118314[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h118314[35] &&
		    (!x__h118314[23] || ~x__h118314[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h118314[23:0])) :
	       { coarseFreq_accumError[20:0], 3'd0 } ;
  assign IF_coarseFreq_accumError_52_BIT_20_67_THEN_NEG_ETC___d804 =
	     x__h131540[47:12] + { 24'd0, y_f__h132433 } ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1041 =
	     (coarseFreq_accumError[41] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950) ?
	       (coarseFreq_accumError[20] ? x__h123826 : x__h123794) :
	       IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1040 ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d1054 =
	     (coarseFreq_accumError[41] &&
	      NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950) ?
	       (coarseFreq_accumError[20] ?
		  x__h123826[23:12] :
		  x__h123794[23:12]) :
	       IF_NOT_coarseFreq_accumError_52_BIT_20_67_50_A_ETC___d1053 ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d769 =
	     x__h125435[47:12] + { 24'd0, y_f__h126328 } ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_THEN_0_C_ETC___d725 =
	     x__h121503[47:12] + { 24'd0, y_f__h122452 } ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_THEN_IF__ETC___d746 =
	     coarseFreq_accumError[41] ?
	       ((!x__h121174[35] &&
		 (x__h121174[23] || x__h121174[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h121174[35] &&
		    (!x__h121174[23] || ~x__h121174[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h121174[23:0])) :
	       { coarseFreq_accumError[41:21], 3'd0 } ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d755 =
	     x__h125480 * x__h125499 ;
  assign IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d837 =
	     x__h128162[47:12] + { 24'd0, y_f__h129055 } ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1332 =
	     x__h294151 * 24'd2487 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334 =
	     coarseFreq_cordic_x_[23] ?
	       -IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1332 :
	       IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1332 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1346 =
	     IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334[47:12] +
	     { 24'd0, y_f__h294993 } ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 =
	     x__h36307 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 =
	     IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47:12] +
	     { 24'd0, y_f__h37152 } ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 =
	     x__h42233 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 =
	     x__h42178[47:12] + { 24'd0, y_f__h43075 } ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1375 =
	     x__h296946 * 24'd2487 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377 =
	     coarseFreq_cordic_y_[23] ?
	       -IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1375 :
	       IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1375 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1389 =
	     IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377[47:12] +
	     { 24'd0, y_f__h297788 } ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 =
	     x__h44978 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 =
	     x__h44923[47:12] + { 24'd0, y_f__h45820 } ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 =
	     x__h39055 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 =
	     x__h39000[47:12] + { 24'd0, y_f__h39897 } ;
  assign IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d550 =
	     x__h108500[35:6] + { 24'd0, y_f__h109231 } ;
  assign IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d627 =
	     x__h113100[35:6] + { 24'd0, y_f__h113825 } ;
  assign IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d536 =
	     x__h108551 * x__h108570 ;
  assign IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d613 =
	     x__h108551 * x__h106272 ;
  assign IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d506 =
	     x__h106196[35:6] + { 24'd0, y_f__h106933 } ;
  assign IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d589 =
	     x__h110808[35:6] + { 24'd0, y_f__h111533 } ;
  assign IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d492 =
	     x__h110853 * x__h106272 ;
  assign IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d575 =
	     x__h110853 * x__h108570 ;
  assign IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293 =
	     coarseFreq_fsError[23] ?
	       _25734_MUL_IF_coarseFreq_fsError_287_BIT_23_288_ETC___d1291 :
	       -_25734_MUL_IF_coarseFreq_fsError_287_BIT_23_288_ETC___d1291 ;
  assign IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1305 =
	     IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293[47:12] +
	     { 24'd0, y_f__h291678 } ;
  assign IF_coarseFreq_lastSample_35_BIT_17_37_THEN_0_C_ETC___d455 =
	     x__h103432[35:6] + { 24'd0, y_f__h104219 } ;
  assign NOT_IF_coarseFreq_accumError_52_BIT_20_67_THEN_ETC___d748 =
	     (IF_coarseFreq_accumError_52_BIT_20_67_THEN_IF__ETC___d706 ^
	      24'h800000) >=
	     (IF_coarseFreq_accumError_52_BIT_41_07_THEN_IF__ETC___d746 ^
	      24'h800000) ;
  assign NOT_IF_coarseFreq_accumError_52_BIT_41_07_THEN_ETC___d950 =
	     (IF_coarseFreq_accumError_52_BIT_41_07_THEN_IF__ETC___d746 ^
	      24'h800000) >
	     (IF_coarseFreq_accumError_52_BIT_20_67_THEN_IF__ETC___d706 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481 =
	     { SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11],
	       SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 } ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417 =
	     { SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11],
	       SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1434 =
	     { 33'd0, x__h299788 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1437 =
	     { 33'd0, x__h299788 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1445 =
	     { 33'd0, x__h299788 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1454 =
	     { 33'd0, x__h299788 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1463 =
	     { 33'd0, x__h299788 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1472 =
	     { 33'd0, x__h299788 } * 39'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1498 =
	     { 33'd0, x__h300558 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1501 =
	     { 33'd0, x__h300558 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1509 =
	     { 33'd0, x__h300558 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1518 =
	     { 33'd0, x__h300558 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1527 =
	     { 33'd0, x__h300558 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1536 =
	     { 33'd0, x__h300558 } * 39'd1000000 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 } ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1440 =
	     39'd10 * digit__h299758 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1504 =
	     39'd10 * digit__h300528 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1449 =
	     39'd10 * y__h299971 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1513 =
	     39'd10 * y__h300741 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1458 =
	     39'd10 * y__h300060 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1522 =
	     39'd10 * y__h300830 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1467 =
	     39'd10 * y__h300149 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1531 =
	     39'd10 * y__h300919 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1476 =
	     39'd10 * y__h300238 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1540 =
	     39'd10 * y__h301008 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d948 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d947 ;
  assign _25734_MUL_IF_coarseFreq_fsError_287_BIT_23_288_ETC___d1291 =
	     24'd25734 * x__h290848 ;
  assign _651_MUL_IF_IF_coarseFreq_accumError_52_BIT_20__ETC___d1059 =
	     24'd651 * x__h192114 ;
  assign abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637 =
	     (state_mkFSMstate == 3'd0 ||
	      !n_596_ULT_20___d1597 && state_mkFSMstate == 3'd2 ||
	      !n_596_ULT_20___d1597 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign ax1_f__h124783 = { res_f__h127480, 12'd0 } ;
  assign ax2_f__h124778 = { ax1_f__h124783, 2'd0 } ;
  assign ax2_i__h124777 = { x__h124785[11], x__h124785 } ;
  assign coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1556 =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	      !coarseFreq_n_21_ULT_5___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      !coarseFreq_n_21_ULT_5___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd23) &&
	     (!coarseFreq_coarseErrorCalc_start_reg_1 ||
	      coarseFreq_coarseErrorCalc_state_fired) ;
  assign coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) &&
	     (!coarseFreq_cordic_atanCalc_start_reg_1 ||
	      coarseFreq_cordic_atanCalc_state_fired) ;
  assign coarseFreq_cordic_n_8_ULT_14___d39 = coarseFreq_cordic_n < 4'd14 ;
  assign coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 =
	     coarseFreq_cordic_x_ - coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 =
	     coarseFreq_cordic_x_ + coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 =
	     coarseFreq_cordic_y_ - coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 =
	     coarseFreq_cordic_y_ + coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_z__1_SLE_0___d256 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign coarseFreq_cordic_z__1_SLE_3216___d72 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign coarseFreq_cordic_z__1_SLT_3216___d160 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) < 24'd8391824 ;
  assign coarseFreq_n_21_ULT_5___d322 = coarseFreq_n < 10'd5 ;
  assign digit__h299758 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1434[9:6] } ;
  assign digit__h299825 =
	     { 35'd0,
	       tx99823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2[3:0] } ;
  assign digit__h299914 =
	     { 35'd0,
	       tx99912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3[3:0] } ;
  assign digit__h300003 =
	     { 35'd0,
	       tx00001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4[3:0] } ;
  assign digit__h300092 =
	     { 35'd0,
	       tx00090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5[3:0] } ;
  assign digit__h300181 =
	     { 35'd0,
	       tx00179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6[3:0] } ;
  assign digit__h300528 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1498[9:6] } ;
  assign digit__h300595 =
	     { 35'd0,
	       tx00593_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7[3:0] } ;
  assign digit__h300684 =
	     { 35'd0,
	       tx00682_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8[3:0] } ;
  assign digit__h300773 =
	     { 35'd0,
	       tx00771_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9[3:0] } ;
  assign digit__h300862 =
	     { 35'd0,
	       tx00860_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10[3:0] } ;
  assign digit__h300951 =
	     { 35'd0,
	       tx00949_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11[3:0] } ;
  assign n_596_ULT_20___d1597 = n < 10'd20 ;
  assign res_f__h127480 =
	     (!x__h125106[35] &&
	      (x__h125106[23] || x__h125106[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h125106[35] &&
		 (!x__h125106[23] || ~x__h125106[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h125106[11:0]) ;
  assign res_i__h137607 =
	     (!x__h124416[36] &&
	      (x__h124416[23] || x__h124416[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h124416[36] &&
		 (!x__h124416[23] || ~x__h124416[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h124416[23:12]) ;
  assign res_i__h298974 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35:24] !=
	       12'd0)) ?
	       12'd2047 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35:24] !=
		  12'd0)) ?
		  12'd2048 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[23:12]) ;
  assign res_i__h299002 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35:24] !=
	       12'd0)) ?
	       12'd2047 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35:24] !=
		  12'd0)) ?
		  12'd2048 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[23:12]) ;
  assign tx00001_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4 =
	     tx__h300001 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1458[38:0] ;
  assign tx00090_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5 =
	     tx__h300090 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1467[38:0] ;
  assign tx00179_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6 =
	     tx__h300179 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1476[38:0] ;
  assign tx00593_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7 =
	     tx__h300593 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1504[38:0] ;
  assign tx00682_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8 =
	     tx__h300682 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1513[38:0] ;
  assign tx00771_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9 =
	     tx__h300771 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1522[38:0] ;
  assign tx00860_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10 =
	     tx__h300860 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1531[38:0] ;
  assign tx00949_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11 =
	     tx__h300949 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1540[38:0] ;
  assign tx99823_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2 =
	     tx__h299823 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1440[38:0] ;
  assign tx99912_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3 =
	     tx__h299912 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1449[38:0] ;
  assign tx__h299823 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1437[38:6] } ;
  assign tx__h299912 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1445[38:6] } ;
  assign tx__h300001 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1454[38:6] } ;
  assign tx__h300090 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1463[38:6] } ;
  assign tx__h300179 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1472[38:6] } ;
  assign tx__h300593 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1501[38:6] } ;
  assign tx__h300682 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1509[38:6] } ;
  assign tx__h300771 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1518[38:6] } ;
  assign tx__h300860 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1527[38:6] } ;
  assign tx__h300949 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1536[38:6] } ;
  assign x__h103145 =
	     (!x__h103432[35] &&
	      IF_coarseFreq_lastSample_35_BIT_17_37_THEN_0_C_ETC___d455[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_lastSample_35_BIT_17_37_THEN_0_C_ETC___d455 ;
  assign x__h103432 =
	     coarseFreq_lastSample[17] ?
	       { 12'd0, x__h108570, 6'd0 } :
	       -{ 12'd0, x__h108570, 6'd0 } ;
  assign x__h105621 =
	     ((!x__h105909[29] &&
	       (x__h105909[17] || x__h105909[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h105909[29] &&
		  (!x__h105909[17] || ~x__h105909[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h105909[17:0])) -
	     ((!x__h108213[29] &&
	       (x__h108213[17] || x__h108213[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h108213[29] &&
		  (!x__h108213[17] || ~x__h108213[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h108213[17:0])) ;
  assign x__h105909 =
	     (!x__h106196[35] &&
	      IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d506[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d506 ;
  assign x__h106196 =
	     (coarseFreq_currSample[35] && !coarseFreq_lastSample[35] ||
	      coarseFreq_lastSample[35] && !coarseFreq_currSample[35]) ?
	       -IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d492 :
	       IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d492 ;
  assign x__h106272 =
	     coarseFreq_lastSample[35] ?
	       -coarseFreq_lastSample[35:18] :
	       coarseFreq_lastSample[35:18] ;
  assign x__h108213 =
	     (!x__h108500[35] &&
	      IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d550[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d550 ;
  assign x__h108500 =
	     (coarseFreq_currSample[17] && !coarseFreq_lastSample[17] ||
	      coarseFreq_lastSample[17] && !coarseFreq_currSample[17]) ?
	       -IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d536 :
	       IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d536 ;
  assign x__h108551 =
	     coarseFreq_currSample[17] ?
	       -coarseFreq_currSample[17:0] :
	       coarseFreq_currSample[17:0] ;
  assign x__h108570 =
	     coarseFreq_lastSample[17] ?
	       -coarseFreq_lastSample[17:0] :
	       coarseFreq_lastSample[17:0] ;
  assign x__h110233 =
	     ((!x__h110521[29] &&
	       (x__h110521[17] || x__h110521[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h110521[29] &&
		  (!x__h110521[17] || ~x__h110521[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h110521[17:0])) +
	     ((!x__h112813[29] &&
	       (x__h112813[17] || x__h112813[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h112813[29] &&
		  (!x__h112813[17] || ~x__h112813[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h112813[17:0])) ;
  assign x__h110521 =
	     (!x__h110808[35] &&
	      IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d589[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_79_BIT_35_80_AND_NOT__ETC___d589 ;
  assign x__h110808 =
	     (coarseFreq_currSample[35] && !coarseFreq_lastSample[17] ||
	      coarseFreq_lastSample[17] && !coarseFreq_currSample[35]) ?
	       -IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d575 :
	       IF_coarseFreq_currSample_79_BIT_35_80_THEN_NEG_ETC___d575 ;
  assign x__h110853 =
	     coarseFreq_currSample[35] ?
	       -coarseFreq_currSample[35:18] :
	       coarseFreq_currSample[35:18] ;
  assign x__h112813 =
	     (!x__h113100[35] &&
	      IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d627[29]) ?
	       30'd536870911 :
	       IF_coarseFreq_currSample_79_BIT_17_27_AND_NOT__ETC___d627 ;
  assign x__h113100 =
	     (coarseFreq_currSample[17] && !coarseFreq_lastSample[35] ||
	      coarseFreq_lastSample[35] && !coarseFreq_currSample[17]) ?
	       -IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d613 :
	       IF_coarseFreq_currSample_79_BIT_17_27_THEN_NEG_ETC___d613 ;
  assign x__h115237 =
	     coarseFreq_accumError[41:21] +
	     { coarseFreq_lastSample[35:18], 3'd0 } ;
  assign x__h115274 =
	     coarseFreq_accumError[20:0] +
	     { coarseFreq_lastSample[17:0], 3'd0 } ;
  assign x__h117382 =
	     (!x__h117711[47] &&
	      IF_IF_coarseFreq_accumError_52_BIT_20_67_AND_N_ETC___d1073[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_coarseFreq_accumError_52_BIT_20_67_AND_N_ETC___d1073 ;
  assign x__h117711 =
	     IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1042[23] ?
	       -_651_MUL_IF_IF_coarseFreq_accumError_52_BIT_20__ETC___d1059 :
	       _651_MUL_IF_IF_coarseFreq_accumError_52_BIT_20__ETC___d1059 ;
  assign x__h118314 =
	     (!x__h118643[47] &&
	      IF_coarseFreq_accumError_52_BIT_20_67_THEN_0_C_ETC___d685[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_52_BIT_20_67_THEN_0_C_ETC___d685 ;
  assign x__h118643 =
	     coarseFreq_accumError[20] ?
	       { 12'd0, x__h125499, 12'd0 } :
	       -{ 12'd0, x__h125499, 12'd0 } ;
  assign x__h121174 =
	     (!x__h121503[47] &&
	      IF_coarseFreq_accumError_52_BIT_41_07_THEN_0_C_ETC___d725[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_52_BIT_41_07_THEN_0_C_ETC___d725 ;
  assign x__h121503 =
	     coarseFreq_accumError[41] ?
	       { 12'd0, x__h125480, 12'd0 } :
	       -{ 12'd0, x__h125480, 12'd0 } ;
  assign x__h123794 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1032 ;
  assign x__h123826 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1032 ;
  assign x__h123959 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d947 ;
  assign x__h124416 =
	     (!x__h124755[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1012[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1012 ;
  assign x__h124755 =
	     (ax2_i__h124777[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992[23] ||
	      !ax2_i__h124777[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1000 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1000 ;
  assign x__h124785 =
	     (!x__h125106[35] &&
	      (x__h125106[23] || x__h125106[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h125106[35] &&
		 (!x__h125106[23] || ~x__h125106[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h125106[23:12]) ;
  assign x__h125106 =
	     (!x__h125435[47] &&
	      IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d769[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_52_BIT_41_07_AND_NOT__ETC___d769 ;
  assign x__h125435 =
	     (coarseFreq_accumError[41] && !coarseFreq_accumError[20] ||
	      coarseFreq_accumError[20] && !coarseFreq_accumError[41]) ?
	       -IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d755 :
	       IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d755 ;
  assign x__h125480 =
	     coarseFreq_accumError[41] ?
	       -{ coarseFreq_accumError[41:21], 3'd0 } :
	       { coarseFreq_accumError[41:21], 3'd0 } ;
  assign x__h125499 =
	     coarseFreq_accumError[20] ?
	       -{ coarseFreq_accumError[20:0], 3'd0 } :
	       { coarseFreq_accumError[20:0], 3'd0 } ;
  assign x__h127833 =
	     (!x__h128162[47] &&
	      IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d837[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_52_BIT_41_07_THEN_NEG_ETC___d837 ;
  assign x__h128162 = x__h125480 * x__h125480 ;
  assign x__h130545 =
	     (!x__h130874[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d971[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d971 ;
  assign x__h130874 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d957 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d957 ;
  assign x__h131211 =
	     (!x__h131540[47] &&
	      IF_coarseFreq_accumError_52_BIT_20_67_THEN_NEG_ETC___d804[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_52_BIT_20_67_THEN_NEG_ETC___d804 ;
  assign x__h131540 = x__h125499 * x__h125499 ;
  assign x__h133683 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824[23] ?
	       ((!x__h131211[35] &&
		 (x__h131211[23] || x__h131211[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h131211[35] &&
		    (!x__h131211[23] || ~x__h131211[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h131211[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d824 ;
  assign x__h135712 =
	     ax2_i__h124777[12] ?
	       -{ ax2_i__h124777, ax2_f__h124778 } :
	       { ax2_i__h124777, ax2_f__h124778 } ;
  assign x__h135731 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d992 ;
  assign x__h138076 =
	     (!x__h138415[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d927[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d927 ;
  assign x__h138415 =
	     (ax2_i__h124777[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898[23] ||
	      !ax2_i__h124777[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d915 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d915 ;
  assign x__h144205 =
	     (!x__h144534[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d877[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d877 ;
  assign x__h144534 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d863 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_B_ETC___d863 ;
  assign x__h147333 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857[23] ?
	       ((!x__h127833[35] &&
		 (x__h127833[23] || x__h127833[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h127833[35] &&
		    (!x__h127833[23] || ~x__h127833[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h127833[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d857 ;
  assign x__h149381 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_52_BIT__ETC___d898 ;
  assign x__h192114 =
	     IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1055[11] ?
	       -IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1042 :
	       IF_coarseFreq_accumError_52_BIT_20_67_AND_NOT__ETC___d1042 ;
  assign x__h200458 =
	     coarseFreq_yFix[20] ?
	       -coarseFreq_yFix[20:3] :
	       coarseFreq_yFix[20:3] ;
  assign x__h202752 =
	     coarseFreq_xFix[20] ?
	       -coarseFreq_xFix[20:3] :
	       coarseFreq_xFix[20:3] ;
  assign x__h204447 =
	     ((!x__h204735[29] &&
	       (x__h204735[17] || x__h204735[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h204735[29] &&
		  (!x__h204735[17] || ~x__h204735[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h204735[17:0])) -
	     ((!x__h207058[29] &&
	       (x__h207058[17] || x__h207058[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h207058[29] &&
		  (!x__h207058[17] || ~x__h207058[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h207058[17:0])) ;
  assign x__h204735 =
	     (!x__h205022[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1126[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1126 ;
  assign x__h205022 =
	     (SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11] &&
	      !coarseFreq_xFix[20] ||
	      coarseFreq_xFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1112 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1112 ;
  assign x__h207058 =
	     (!x__h207345[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1174[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1174 ;
  assign x__h207345 =
	     (SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11] &&
	      !coarseFreq_yFix[20] ||
	      coarseFreq_yFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1160 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1160 ;
  assign x__h209082 =
	     ((!x__h209370[29] &&
	       (x__h209370[17] || x__h209370[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h209370[29] &&
		  (!x__h209370[17] || ~x__h209370[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h209370[17:0])) +
	     ((!x__h211664[29] &&
	       (x__h211664[17] || x__h211664[29:18] != 12'd0)) ?
		18'd131071 :
		((x__h211664[29] &&
		  (!x__h211664[17] || ~x__h211664[29:18] != 12'd0)) ?
		   18'd131072 :
		   x__h211664[17:0])) ;
  assign x__h209370 =
	     (!x__h209657[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1213[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1213 ;
  assign x__h209657 =
	     (SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11] &&
	      !coarseFreq_yFix[20] ||
	      coarseFreq_yFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1199 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO__ETC___d1199 ;
  assign x__h211664 =
	     (!x__h211951[35] &&
	      IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1251[29]) ?
	       30'd536870911 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1251 ;
  assign x__h211951 =
	     (SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11] &&
	      !coarseFreq_xFix[20] ||
	      coarseFreq_xFix[20] &&
	      !SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1237 :
	       IF_SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO__ETC___d1237 ;
  assign x__h279234 =
	     { SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393,
	       fpart__h299542 } ;
  assign x__h281520 =
	     SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418[11] ?
	       -{ SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418,
		  fpart__h300318 } :
	       { SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418,
		 fpart__h300318 } ;
  assign x__h283824 =
	     SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393[11] ?
	       -x__h279234 :
	       x__h279234 ;
  assign x__h290848 =
	     coarseFreq_fsError[23] ?
	       -coarseFreq_fsError :
	       coarseFreq_fsError ;
  assign x__h294151 =
	     coarseFreq_cordic_x_[23] ?
	       -coarseFreq_cordic_x_ :
	       coarseFreq_cordic_x_ ;
  assign x__h296946 =
	     coarseFreq_cordic_y_[23] ?
	       -coarseFreq_cordic_y_ :
	       coarseFreq_cordic_y_ ;
  assign x__h298987 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35:24] !=
	       12'd0)) ?
	       12'd4095 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[35:24] !=
		  12'd0)) ?
		  12'd0 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_329_TH_ETC___d1349[11:0]) ;
  assign x__h299015 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35:24] !=
	       12'd0)) ?
	       12'd4095 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[35:24] !=
		  12'd0)) ?
		  12'd0 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_372_TH_ETC___d1392[11:0]) ;
  assign x__h299788 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417[12] &&
	      fpart__h299542 != 6'd0) ?
	       y_avValue_snd__h299722 :
	       fpart__h299542 ;
  assign x__h300558 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481[12] &&
	      fpart__h300318 != 6'd0) ?
	       y_avValue_snd__h300492 :
	       fpart__h300318 ;
  assign x__h36307 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 :
	       coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 ;
  assign x__h38671 =
	     (!x__h39000[47] &&
	      IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 ;
  assign x__h39000 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 ;
  assign x__h39055 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 :
	       coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 ;
  assign x__h41849 =
	     (!x__h42178[47] &&
	      IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 ;
  assign x__h42178 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 ;
  assign x__h42233 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 :
	       coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 ;
  assign x__h44594 =
	     (!x__h44923[47] &&
	      IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 ;
  assign x__h44923 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 ;
  assign x__h44978 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 :
	       coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 ;
  assign x__h48036 = coarseFreq_cordic_x_ - x__h49113 ;
  assign x__h48136 = coarseFreq_cordic_y_ + x__h49184 ;
  assign x__h48207 =
	     coarseFreq_cordic_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h49098 = coarseFreq_cordic_x_ + x__h49113 ;
  assign x__h49113 =
	     coarseFreq_cordic_y_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_y_[23]}} ;
  assign x__h49169 = coarseFreq_cordic_y_ - x__h49184 ;
  assign x__h49184 =
	     coarseFreq_cordic_x_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_x_[23]}} ;
  assign x__h49240 =
	     coarseFreq_cordic_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign y__h299971 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1440[38:0] +
	     digit__h299825 ;
  assign y__h300060 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1449[38:0] +
	     digit__h299914 ;
  assign y__h300149 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1458[38:0] +
	     digit__h300003 ;
  assign y__h300238 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1467[38:0] +
	     digit__h300092 ;
  assign y__h300741 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1504[38:0] +
	     digit__h300595 ;
  assign y__h300830 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1513[38:0] +
	     digit__h300684 ;
  assign y__h300919 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1522[38:0] +
	     digit__h300773 ;
  assign y__h301008 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1531[38:0] +
	     digit__h300862 ;
  assign y_avValue_snd__h299722 = 6'd0 - fpart__h299542 ;
  assign y_avValue_snd__h300492 = 6'd0 - fpart__h300318 ;
  assign y_f__h104219 =
	     (x__h103432[5] && (x__h103432[35] || x__h103432[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h106933 =
	     (x__h106196[5] && (x__h106196[35] || x__h106196[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h109231 =
	     (x__h108500[5] && (x__h108500[35] || x__h108500[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h111533 =
	     (x__h110808[5] && (x__h110808[35] || x__h110808[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h113825 =
	     (x__h113100[5] && (x__h113100[35] || x__h113100[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h119592 =
	     (x__h118643[11] &&
	      (x__h118643[47] || x__h118643[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h122452 =
	     (x__h121503[11] &&
	      (x__h121503[47] || x__h121503[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h126328 =
	     (x__h125435[11] &&
	      (x__h125435[47] || x__h125435[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h129055 =
	     (x__h128162[11] &&
	      (x__h128162[47] || x__h128162[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h132433 =
	     (x__h131540[11] &&
	      (x__h131540[47] || x__h131540[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h134525 =
	     (x__h130874[11] &&
	      (x__h130874[47] || x__h130874[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h136435 =
	     (x__h124755[1] && (x__h124755[38] || x__h124755[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h148175 =
	     (x__h144534[11] &&
	      (x__h144534[47] || x__h144534[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h150085 =
	     (x__h138415[1] && (x__h138415[38] || x__h138415[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h192944 =
	     (x__h117711[11] &&
	      (x__h117711[47] || x__h117711[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h205778 =
	     (x__h205022[5] && (x__h205022[35] || x__h205022[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h208080 =
	     (x__h207345[5] && (x__h207345[35] || x__h207345[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h210384 =
	     (x__h209657[5] && (x__h209657[35] || x__h209657[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h212678 =
	     (x__h211951[5] && (x__h211951[35] || x__h211951[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h291678 =
	     (IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293[11] &&
	      (IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293[47] ||
	       IF_coarseFreq_fsError_287_BIT_23_288_THEN_2573_ETC___d1293[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h294993 =
	     (IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334[11] &&
	      (IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334[47] ||
	       IF_coarseFreq_cordic_x__9_BIT_23_329_THEN_NEG__ETC___d1334[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h297788 =
	     (IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377[11] &&
	      (IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377[47] ||
	       IF_coarseFreq_cordic_y__0_BIT_23_372_THEN_NEG__ETC___d1377[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h37152 =
	     (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[11] &&
	      (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] ||
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h39897 =
	     (x__h39000[11] && (x__h39000[47] || x__h39000[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h43075 =
	     (x__h42178[11] && (x__h42178[47] || x__h42178[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h45820 =
	     (x__h44923[11] && (x__h44923[47] || x__h44923[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h299542 = coarseFreq_samples_0[23:18];
      10'd1: fpart__h299542 = coarseFreq_samples_1[23:18];
      10'd2: fpart__h299542 = coarseFreq_samples_2[23:18];
      10'd3: fpart__h299542 = coarseFreq_samples_3[23:18];
      10'd4: fpart__h299542 = coarseFreq_samples_4[23:18];
      10'd5: fpart__h299542 = coarseFreq_samples_5[23:18];
      10'd6: fpart__h299542 = coarseFreq_samples_6[23:18];
      10'd7: fpart__h299542 = coarseFreq_samples_7[23:18];
      10'd8: fpart__h299542 = coarseFreq_samples_8[23:18];
      10'd9: fpart__h299542 = coarseFreq_samples_9[23:18];
      default: fpart__h299542 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h300318 = coarseFreq_samples_0[5:0];
      10'd1: fpart__h300318 = coarseFreq_samples_1[5:0];
      10'd2: fpart__h300318 = coarseFreq_samples_2[5:0];
      10'd3: fpart__h300318 = coarseFreq_samples_3[5:0];
      10'd4: fpart__h300318 = coarseFreq_samples_4[5:0];
      10'd5: fpart__h300318 = coarseFreq_samples_5[5:0];
      10'd6: fpart__h300318 = coarseFreq_samples_6[5:0];
      10'd7: fpart__h300318 = coarseFreq_samples_7[5:0];
      10'd8: fpart__h300318 = coarseFreq_samples_8[5:0];
      10'd9: fpart__h300318 = coarseFreq_samples_9[5:0];
      default: fpart__h300318 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_cordic_n)
  begin
    case (coarseFreq_cordic_n)
      4'd0: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3216;
      4'd1: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1899;
      4'd2: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1003;
      4'd3: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd509;
      4'd4: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd255;
      4'd5: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd127;
      4'd6: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd63;
      4'd7: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd31;
      4'd8: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd15;
      4'd9: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd7;
      4'd10: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3;
      4'd11: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd0;
      default: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_0[17:6];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_1[17:6];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_2[17:6];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_3[17:6];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_4[17:6];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_5[17:6];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_6[17:6];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_7[17:6];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_8[17:6];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
	      coarseFreq_samples_9[17:6];
      default: SEL_ARR_coarseFreq_samples_0_72_BITS_17_TO_6_0_ETC___d418 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_0[35:24];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_1[35:24];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_2[35:24];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_3[35:24];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_4[35:24];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_5[35:24];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_6[35:24];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_7[35:24];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_8[35:24];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
	      coarseFreq_samples_9[35:24];
      default: SEL_ARR_coarseFreq_samples_0_72_BITS_35_TO_24__ETC___d393 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY 42'd0;
	coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    4'd0;
	coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY 36'd0;
	coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY 21'd512;
	coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY 21'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 18'd64;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (coarseFreq_accumError$EN)
	  coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_accumError$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg$EN)
	  coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg_1$EN)
	  coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg_1$D_IN;
	if (coarseFreq_coarseErrorCalc_state_can_overlap$EN)
	  coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_can_overlap$D_IN;
	if (coarseFreq_coarseErrorCalc_state_fired$EN)
	  coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_fired$D_IN;
	if (coarseFreq_coarseErrorCalc_state_mkFSMstate$EN)
	  coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg$EN)
	  coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg_1$EN)
	  coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg_1$D_IN;
	if (coarseFreq_cordic_atanCalc_state_can_overlap$EN)
	  coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_can_overlap$D_IN;
	if (coarseFreq_cordic_atanCalc_state_fired$EN)
	  coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_fired$D_IN;
	if (coarseFreq_cordic_atanCalc_state_mkFSMstate$EN)
	  coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_n$EN)
	  coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_n$D_IN;
	if (coarseFreq_cordic_x_$EN)
	  coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_x_$D_IN;
	if (coarseFreq_cordic_y_$EN)
	  coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_y_$D_IN;
	if (coarseFreq_cordic_z_$EN)
	  coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_z_$D_IN;
	if (coarseFreq_currSample$EN)
	  coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_currSample$D_IN;
	if (coarseFreq_fsError$EN)
	  coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY coarseFreq_fsError$D_IN;
	if (coarseFreq_lastSample$EN)
	  coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_lastSample$D_IN;
	if (coarseFreq_n$EN)
	  coarseFreq_n <= `BSV_ASSIGNMENT_DELAY coarseFreq_n$D_IN;
	if (coarseFreq_samples_0$EN)
	  coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_0$D_IN;
	if (coarseFreq_samples_1$EN)
	  coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_1$D_IN;
	if (coarseFreq_samples_2$EN)
	  coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_2$D_IN;
	if (coarseFreq_samples_3$EN)
	  coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_3$D_IN;
	if (coarseFreq_samples_4$EN)
	  coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_4$D_IN;
	if (coarseFreq_samples_5$EN)
	  coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_5$D_IN;
	if (coarseFreq_samples_6$EN)
	  coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_6$D_IN;
	if (coarseFreq_samples_7$EN)
	  coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_7$D_IN;
	if (coarseFreq_samples_8$EN)
	  coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_8$D_IN;
	if (coarseFreq_samples_9$EN)
	  coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_9$D_IN;
	if (coarseFreq_xFix$EN)
	  coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_xFix$D_IN;
	if (coarseFreq_yFix$EN)
	  coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_yFix$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coarseFreq_accumError = 42'h2AAAAAAAAAA;
    coarseFreq_coarseErrorCalc_start_reg = 1'h0;
    coarseFreq_coarseErrorCalc_start_reg_1 = 1'h0;
    coarseFreq_coarseErrorCalc_state_can_overlap = 1'h0;
    coarseFreq_coarseErrorCalc_state_fired = 1'h0;
    coarseFreq_coarseErrorCalc_state_mkFSMstate = 5'h0A;
    coarseFreq_cordic_atanCalc_start_reg = 1'h0;
    coarseFreq_cordic_atanCalc_start_reg_1 = 1'h0;
    coarseFreq_cordic_atanCalc_state_can_overlap = 1'h0;
    coarseFreq_cordic_atanCalc_state_fired = 1'h0;
    coarseFreq_cordic_atanCalc_state_mkFSMstate = 4'hA;
    coarseFreq_cordic_n = 4'hA;
    coarseFreq_cordic_x_ = 24'hAAAAAA;
    coarseFreq_cordic_y_ = 24'hAAAAAA;
    coarseFreq_cordic_z_ = 24'hAAAAAA;
    coarseFreq_currSample = 36'hAAAAAAAAA;
    coarseFreq_fsError = 24'hAAAAAA;
    coarseFreq_lastSample = 36'hAAAAAAAAA;
    coarseFreq_n = 10'h2AA;
    coarseFreq_samples_0 = 36'hAAAAAAAAA;
    coarseFreq_samples_1 = 36'hAAAAAAAAA;
    coarseFreq_samples_2 = 36'hAAAAAAAAA;
    coarseFreq_samples_3 = 36'hAAAAAAAAA;
    coarseFreq_samples_4 = 36'hAAAAAAAAA;
    coarseFreq_samples_5 = 36'hAAAAAAAAA;
    coarseFreq_samples_6 = 36'hAAAAAAAAA;
    coarseFreq_samples_7 = 36'hAAAAAAAAA;
    coarseFreq_samples_8 = 36'hAAAAAAAAA;
    coarseFreq_samples_9 = 36'hAAAAAAAAA;
    coarseFreq_xFix = 21'h0AAAAA;
    coarseFreq_yFix = 21'h0AAAAA;
    fV = 18'h2AAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_action_l40c23 || WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 38, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l38c9] and\n  [RL_action_l40c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l40c23 &&
	  (WILL_FIRE_RL_action_l41c13 || state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 40, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l40c23] and\n  [RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c13 && state_mkFSMstate == 3'd4)
	$display("Error: \"Tb_tang.bsv\", line 41, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l41c13] and\n  [RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 3'd1 || WILL_FIRE_RL_action_l40c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_f_init_l38c9, RL_action_l40c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__564_AND_abort_wget__565_566_OR_sta_ETC___d1637 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 &&
	  coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10)
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 66, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 47, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 48, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 49, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 50, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 51, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 53, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 59, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 65, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9] and\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 46, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l46c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11,\n  RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417[12] &&
	  fpart__h299542 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417[12] &&
	  fpart__h299542 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417[12] ||
	   fpart__h299542 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_35_T_ETC___d1417));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h299758);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h299825);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h299914);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300003);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300092);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300181);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481[12] &&
	  fpart__h300318 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481[12] &&
	  fpart__h300318 != 6'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481[12] ||
	   fpart__h300318 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_72_BITS_17_T_ETC___d1481));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300528);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300595);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300684);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300773);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300862);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h300951);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 83, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 84, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 85, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 88, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 87, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 91, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 92, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 93, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 94, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 95, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l95c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 96, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 99, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l99c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 101, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 102, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l102c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 103, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l103c19] and\n  [RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 104, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l104c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22)
	$display("Error: \"CoarseFreq_optimal.bsv\", line 110, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l110c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l99c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 82, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l82c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20,\n  RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c24,\n  RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l99c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseFreq_coarseErrorCalc_action_l102c20,\n  RL_coarseFreq_coarseErrorCalc_action_l103c19,\n  RL_coarseFreq_coarseErrorCalc_action_l104c13,\n  RL_coarseFreq_coarseErrorCalc_action_l110c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l101c9] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

