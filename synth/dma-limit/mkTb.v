//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 23:00:57 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// value                          I    12 reg
// EN_inM                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    value,
	    EN_inM,

	    OUT);
  input  CLK;
  input  RST_N;

  // action method inM
  input  [11 : 0] value;
  input  EN_inM;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] OUT;

  // inlined wires
  wire coarseFreq_coarseErrorCalc_1$whas,
       coarseFreq_coarseErrorCalc_3$whas,
       coarseFreq_cordic_atanCalc_1$whas,
       coarseFreq_cordic_atanCalc_3$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register coarseFreq_accumError
  reg [47 : 0] coarseFreq_accumError;
  reg [47 : 0] coarseFreq_accumError$D_IN;
  wire coarseFreq_accumError$EN;

  // register coarseFreq_coarseErrorCalc
  reg coarseFreq_coarseErrorCalc;
  wire coarseFreq_coarseErrorCalc$D_IN, coarseFreq_coarseErrorCalc$EN;

  // register coarseFreq_coarseErrorCalc_1_1
  reg coarseFreq_coarseErrorCalc_1_1;
  wire coarseFreq_coarseErrorCalc_1_1$D_IN, coarseFreq_coarseErrorCalc_1_1$EN;

  // register coarseFreq_coarseErrorCalc_2_1
  reg [5 : 0] coarseFreq_coarseErrorCalc_2_1;
  reg [5 : 0] coarseFreq_coarseErrorCalc_2_1$D_IN;
  wire coarseFreq_coarseErrorCalc_2_1$EN;

  // register coarseFreq_coarseErrorCalc_3_1
  reg coarseFreq_coarseErrorCalc_3_1;
  wire coarseFreq_coarseErrorCalc_3_1$D_IN, coarseFreq_coarseErrorCalc_3_1$EN;

  // register coarseFreq_coarseErrorCalc_4
  reg coarseFreq_coarseErrorCalc_4;
  wire coarseFreq_coarseErrorCalc_4$D_IN, coarseFreq_coarseErrorCalc_4$EN;

  // register coarseFreq_cordic_atanCalc
  reg coarseFreq_cordic_atanCalc;
  wire coarseFreq_cordic_atanCalc$D_IN, coarseFreq_cordic_atanCalc$EN;

  // register coarseFreq_cordic_atanCalc_1_1
  reg coarseFreq_cordic_atanCalc_1_1;
  wire coarseFreq_cordic_atanCalc_1_1$D_IN, coarseFreq_cordic_atanCalc_1_1$EN;

  // register coarseFreq_cordic_atanCalc_2_1
  reg [3 : 0] coarseFreq_cordic_atanCalc_2_1;
  reg [3 : 0] coarseFreq_cordic_atanCalc_2_1$D_IN;
  wire coarseFreq_cordic_atanCalc_2_1$EN;

  // register coarseFreq_cordic_atanCalc_3_1
  reg coarseFreq_cordic_atanCalc_3_1;
  wire coarseFreq_cordic_atanCalc_3_1$D_IN, coarseFreq_cordic_atanCalc_3_1$EN;

  // register coarseFreq_cordic_atanCalc_4
  reg coarseFreq_cordic_atanCalc_4;
  wire coarseFreq_cordic_atanCalc_4$D_IN, coarseFreq_cordic_atanCalc_4$EN;

  // register coarseFreq_cordic_limitX_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitX_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitX_inner_reg$D_IN;
  wire coarseFreq_cordic_limitX_inner_reg$EN;

  // register coarseFreq_cordic_limitY_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitY_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitY_inner_reg$D_IN;
  wire coarseFreq_cordic_limitY_inner_reg$EN;

  // register coarseFreq_cordic_limitZ_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitZ_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitZ_inner_reg$D_IN;
  wire coarseFreq_cordic_limitZ_inner_reg$EN;

  // register coarseFreq_cordic_n
  reg [3 : 0] coarseFreq_cordic_n;
  wire [3 : 0] coarseFreq_cordic_n$D_IN;
  wire coarseFreq_cordic_n$EN;

  // register coarseFreq_cordic_x_
  reg [23 : 0] coarseFreq_cordic_x_;
  reg [23 : 0] coarseFreq_cordic_x_$D_IN;
  wire coarseFreq_cordic_x_$EN;

  // register coarseFreq_cordic_y_
  reg [23 : 0] coarseFreq_cordic_y_;
  reg [23 : 0] coarseFreq_cordic_y_$D_IN;
  wire coarseFreq_cordic_y_$EN;

  // register coarseFreq_cordic_z_
  reg [23 : 0] coarseFreq_cordic_z_;
  reg [23 : 0] coarseFreq_cordic_z_$D_IN;
  wire coarseFreq_cordic_z_$EN;

  // register coarseFreq_currSample
  reg [47 : 0] coarseFreq_currSample;
  reg [47 : 0] coarseFreq_currSample$D_IN;
  wire coarseFreq_currSample$EN;

  // register coarseFreq_dummy
  reg coarseFreq_dummy;
  wire coarseFreq_dummy$D_IN, coarseFreq_dummy$EN;

  // register coarseFreq_fsError
  reg [23 : 0] coarseFreq_fsError;
  reg [23 : 0] coarseFreq_fsError$D_IN;
  wire coarseFreq_fsError$EN;

  // register coarseFreq_lastSample
  reg [47 : 0] coarseFreq_lastSample;
  reg [47 : 0] coarseFreq_lastSample$D_IN;
  wire coarseFreq_lastSample$EN;

  // register coarseFreq_limitAccumE_inner_reg
  reg [11 : 0] coarseFreq_limitAccumE_inner_reg;
  wire [11 : 0] coarseFreq_limitAccumE_inner_reg$D_IN;
  wire coarseFreq_limitAccumE_inner_reg$EN;

  // register coarseFreq_limitCpxFix_inner_reg
  reg [11 : 0] coarseFreq_limitCpxFix_inner_reg;
  wire [11 : 0] coarseFreq_limitCpxFix_inner_reg$D_IN;
  wire coarseFreq_limitCpxFix_inner_reg$EN;

  // register coarseFreq_limitCurrS_inner_reg
  reg [11 : 0] coarseFreq_limitCurrS_inner_reg;
  wire [11 : 0] coarseFreq_limitCurrS_inner_reg$D_IN;
  wire coarseFreq_limitCurrS_inner_reg$EN;

  // register coarseFreq_limitError_inner_reg
  reg [11 : 0] coarseFreq_limitError_inner_reg;
  wire [11 : 0] coarseFreq_limitError_inner_reg$D_IN;
  wire coarseFreq_limitError_inner_reg$EN;

  // register coarseFreq_limitLastS_inner_reg
  reg [11 : 0] coarseFreq_limitLastS_inner_reg;
  wire [11 : 0] coarseFreq_limitLastS_inner_reg$D_IN;
  wire coarseFreq_limitLastS_inner_reg$EN;

  // register coarseFreq_limitXFix_inner_reg
  reg [11 : 0] coarseFreq_limitXFix_inner_reg;
  wire [11 : 0] coarseFreq_limitXFix_inner_reg$D_IN;
  wire coarseFreq_limitXFix_inner_reg$EN;

  // register coarseFreq_limitYFix_inner_reg
  reg [11 : 0] coarseFreq_limitYFix_inner_reg;
  wire [11 : 0] coarseFreq_limitYFix_inner_reg$D_IN;
  wire coarseFreq_limitYFix_inner_reg$EN;

  // register coarseFreq_n
  reg [9 : 0] coarseFreq_n;
  wire [9 : 0] coarseFreq_n$D_IN;
  wire coarseFreq_n$EN;

  // register coarseFreq_samples
  reg [47 : 0] coarseFreq_samples;
  reg [47 : 0] coarseFreq_samples$D_IN;
  wire coarseFreq_samples$EN;

  // register coarseFreq_samples_1
  reg [47 : 0] coarseFreq_samples_1;
  reg [47 : 0] coarseFreq_samples_1$D_IN;
  wire coarseFreq_samples_1$EN;

  // register coarseFreq_samples_2
  reg [47 : 0] coarseFreq_samples_2;
  reg [47 : 0] coarseFreq_samples_2$D_IN;
  wire coarseFreq_samples_2$EN;

  // register coarseFreq_samples_3
  reg [47 : 0] coarseFreq_samples_3;
  reg [47 : 0] coarseFreq_samples_3$D_IN;
  wire coarseFreq_samples_3$EN;

  // register coarseFreq_samples_4
  reg [47 : 0] coarseFreq_samples_4;
  reg [47 : 0] coarseFreq_samples_4$D_IN;
  wire coarseFreq_samples_4$EN;

  // register coarseFreq_samples_5
  reg [47 : 0] coarseFreq_samples_5;
  reg [47 : 0] coarseFreq_samples_5$D_IN;
  wire coarseFreq_samples_5$EN;

  // register coarseFreq_samples_6
  reg [47 : 0] coarseFreq_samples_6;
  reg [47 : 0] coarseFreq_samples_6$D_IN;
  wire coarseFreq_samples_6$EN;

  // register coarseFreq_samples_7
  reg [47 : 0] coarseFreq_samples_7;
  reg [47 : 0] coarseFreq_samples_7$D_IN;
  wire coarseFreq_samples_7$EN;

  // register coarseFreq_samples_8
  reg [47 : 0] coarseFreq_samples_8;
  reg [47 : 0] coarseFreq_samples_8$D_IN;
  wire coarseFreq_samples_8$EN;

  // register coarseFreq_samples_9
  reg [47 : 0] coarseFreq_samples_9;
  reg [47 : 0] coarseFreq_samples_9$D_IN;
  wire coarseFreq_samples_9$EN;

  // register coarseFreq_xFix
  reg [23 : 0] coarseFreq_xFix;
  wire [23 : 0] coarseFreq_xFix$D_IN;
  wire coarseFreq_xFix$EN;

  // register coarseFreq_yFix
  reg [23 : 0] coarseFreq_yFix;
  wire [23 : 0] coarseFreq_yFix$D_IN;
  wire coarseFreq_yFix$EN;

  // register fV
  reg [23 : 0] fV;
  wire [23 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule coarseFreq_cordic_ix
  wire [23 : 0] coarseFreq_cordic_ix$D_IN, coarseFreq_cordic_ix$D_OUT;
  wire coarseFreq_cordic_ix$CLR,
       coarseFreq_cordic_ix$DEQ,
       coarseFreq_cordic_ix$EMPTY_N,
       coarseFreq_cordic_ix$ENQ,
       coarseFreq_cordic_ix$FULL_N;

  // ports of submodule coarseFreq_cordic_iy
  wire [23 : 0] coarseFreq_cordic_iy$D_IN, coarseFreq_cordic_iy$D_OUT;
  wire coarseFreq_cordic_iy$CLR,
       coarseFreq_cordic_iy$DEQ,
       coarseFreq_cordic_iy$EMPTY_N,
       coarseFreq_cordic_iy$ENQ,
       coarseFreq_cordic_iy$FULL_N;

  // ports of submodule coarseFreq_cordic_iz
  wire [23 : 0] coarseFreq_cordic_iz$D_IN, coarseFreq_cordic_iz$D_OUT;
  wire coarseFreq_cordic_iz$CLR,
       coarseFreq_cordic_iz$DEQ,
       coarseFreq_cordic_iz$EMPTY_N,
       coarseFreq_cordic_iz$ENQ,
       coarseFreq_cordic_iz$FULL_N;

  // ports of submodule coarseFreq_newSample
  wire [47 : 0] coarseFreq_newSample$D_IN, coarseFreq_newSample$D_OUT;
  wire coarseFreq_newSample$CLR,
       coarseFreq_newSample$DEQ,
       coarseFreq_newSample$EMPTY_N,
       coarseFreq_newSample$ENQ,
       coarseFreq_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l39c23,
       WILL_FIRE_RL_action_l41c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_coarseFreq_accumError$write_1__VAL_1,
		MUX_coarseFreq_accumError$write_1__VAL_2,
		MUX_coarseFreq_accumError$write_1__VAL_3,
		MUX_coarseFreq_currSample$write_1__VAL_1,
		MUX_coarseFreq_currSample$write_1__VAL_2,
		MUX_coarseFreq_currSample$write_1__VAL_3,
		MUX_coarseFreq_lastSample$write_1__VAL_2,
		MUX_coarseFreq_lastSample$write_1__VAL_3,
		MUX_coarseFreq_lastSample$write_1__VAL_4,
		MUX_coarseFreq_samples$write_1__VAL_3,
		MUX_coarseFreq_samples$write_1__VAL_4,
		MUX_coarseFreq_samples$write_1__VAL_5;
  wire [23 : 0] MUX_coarseFreq_cordic_x_$write_1__VAL_2,
		MUX_coarseFreq_cordic_x_$write_1__VAL_3,
		MUX_coarseFreq_cordic_x_$write_1__VAL_4,
		MUX_coarseFreq_cordic_x_$write_1__VAL_5,
		MUX_coarseFreq_cordic_y_$write_1__VAL_2,
		MUX_coarseFreq_cordic_y_$write_1__VAL_3,
		MUX_coarseFreq_cordic_y_$write_1__VAL_4,
		MUX_coarseFreq_cordic_y_$write_1__VAL_5,
		MUX_coarseFreq_cordic_z_$write_1__VAL_1,
		MUX_coarseFreq_cordic_z_$write_1__VAL_2,
		MUX_coarseFreq_cordic_z_$write_1__VAL_4,
		MUX_coarseFreq_cordic_z_$write_1__VAL_5,
		MUX_coarseFreq_fsError$write_1__VAL_1,
		MUX_coarseFreq_fsError$write_1__VAL_2,
		MUX_coarseFreq_xFix$write_1__VAL_1,
		MUX_coarseFreq_xFix$write_1__VAL_2,
		MUX_coarseFreq_yFix$write_1__VAL_1,
		MUX_coarseFreq_yFix$write_1__VAL_2;
  wire [9 : 0] MUX_coarseFreq_n$write_1__VAL_1, MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_coarseFreq_cordic_n$write_1__VAL_1;
  wire MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1,
       MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1,
       MUX_coarseFreq_n$write_1__SEL_1,
       MUX_coarseFreq_samples$write_1__SEL_1,
       MUX_coarseFreq_samples$write_1__SEL_2,
       MUX_coarseFreq_samples$write_1__SEL_3,
       MUX_coarseFreq_samples$write_1__SEL_4,
       MUX_coarseFreq_samples$write_1__SEL_5,
       MUX_coarseFreq_samples_1$write_1__SEL_1,
       MUX_coarseFreq_samples_1$write_1__SEL_2,
       MUX_coarseFreq_samples_1$write_1__SEL_3,
       MUX_coarseFreq_samples_1$write_1__SEL_4,
       MUX_coarseFreq_samples_1$write_1__SEL_5,
       MUX_coarseFreq_samples_2$write_1__SEL_1,
       MUX_coarseFreq_samples_2$write_1__SEL_2,
       MUX_coarseFreq_samples_2$write_1__SEL_3,
       MUX_coarseFreq_samples_2$write_1__SEL_4,
       MUX_coarseFreq_samples_2$write_1__SEL_5,
       MUX_coarseFreq_samples_3$write_1__SEL_1,
       MUX_coarseFreq_samples_3$write_1__SEL_2,
       MUX_coarseFreq_samples_3$write_1__SEL_3,
       MUX_coarseFreq_samples_3$write_1__SEL_4,
       MUX_coarseFreq_samples_3$write_1__SEL_5,
       MUX_coarseFreq_samples_4$write_1__SEL_1,
       MUX_coarseFreq_samples_4$write_1__SEL_2,
       MUX_coarseFreq_samples_4$write_1__SEL_3,
       MUX_coarseFreq_samples_4$write_1__SEL_4,
       MUX_coarseFreq_samples_4$write_1__SEL_5,
       MUX_coarseFreq_samples_5$write_1__SEL_1,
       MUX_coarseFreq_samples_5$write_1__SEL_2,
       MUX_coarseFreq_samples_5$write_1__SEL_3,
       MUX_coarseFreq_samples_5$write_1__SEL_4,
       MUX_coarseFreq_samples_5$write_1__SEL_5,
       MUX_coarseFreq_samples_6$write_1__SEL_1,
       MUX_coarseFreq_samples_6$write_1__SEL_2,
       MUX_coarseFreq_samples_6$write_1__SEL_3,
       MUX_coarseFreq_samples_6$write_1__SEL_4,
       MUX_coarseFreq_samples_6$write_1__SEL_5,
       MUX_coarseFreq_samples_7$write_1__SEL_1,
       MUX_coarseFreq_samples_7$write_1__SEL_2,
       MUX_coarseFreq_samples_7$write_1__SEL_3,
       MUX_coarseFreq_samples_7$write_1__SEL_4,
       MUX_coarseFreq_samples_7$write_1__SEL_5,
       MUX_coarseFreq_samples_8$write_1__SEL_1,
       MUX_coarseFreq_samples_8$write_1__SEL_2,
       MUX_coarseFreq_samples_8$write_1__SEL_3,
       MUX_coarseFreq_samples_8$write_1__SEL_4,
       MUX_coarseFreq_samples_8$write_1__SEL_5,
       MUX_coarseFreq_samples_9$write_1__SEL_1,
       MUX_coarseFreq_samples_9$write_1__SEL_2,
       MUX_coarseFreq_samples_9$write_1__SEL_3,
       MUX_coarseFreq_samples_9$write_1__SEL_4,
       MUX_coarseFreq_samples_9$write_1__SEL_5,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1,
	       SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
	       SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
	       fpart__h390158,
	       fpart__h390934;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1501,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1504,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1512,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1521,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1530,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1539,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1565,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1568,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1576,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1585,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1594,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1603,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1507,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1571,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1516,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1580,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1525,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1589,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1534,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1598,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1543,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1607;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1008,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d914,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1217,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1294,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1170,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1256,
		IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d806,
		IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1395,
		IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172,
		IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1433,
		IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124,
		IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d582,
		IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d661,
		IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d539,
		IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d623,
		IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356,
		_25734_MUL_IF_coarseFreq_fsError_147_BIT_23_351_ETC___d1354,
		_651_MUL_IF_IF_coarseFreq_accumError_25_BIT_23__ETC___d1110,
		x__h168985,
		x__h173064,
		x__h175776,
		x__h178520,
		x__h181232,
		x__h186746,
		x__h187673,
		x__h190528,
		x__h194460,
		x__h197187,
		x__h199899,
		x__h200565,
		x__h213559,
		x__h366592,
		x__h369317,
		x__h372032,
		x__h58975,
		x__h62159,
		x__h64904;
  wire [44 : 0] digit__h390374,
		digit__h390441,
		digit__h390530,
		digit__h390619,
		digit__h390708,
		digit__h390797,
		digit__h391144,
		digit__h391211,
		digit__h391300,
		digit__h391389,
		digit__h391478,
		digit__h391567,
		tx90439_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2,
		tx90528_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3,
		tx90617_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4,
		tx90706_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5,
		tx90795_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6,
		tx91209_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7,
		tx91298_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8,
		tx91387_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9,
		tx91476_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10,
		tx91565_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11,
		tx__h390439,
		tx__h390528,
		tx__h390617,
		tx__h390706,
		tx__h390795,
		tx__h391209,
		tx__h391298,
		tx__h391387,
		tx__h391476,
		tx__h391565,
		y__h390587,
		y__h390676,
		y__h390765,
		y__h390854,
		y__h391357,
		y__h391446,
		y__h391535,
		y__h391624;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1051,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d966,
		x__h193780,
		x__h204737,
		x__h207440;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1063,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d978,
		x__h193441,
		x__h207101;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1022,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d928,
		IF_IF_coarseFreq_accumError_25_BIT_23_20_AND_N_ETC___d1124,
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187,
		IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412,
		IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102,
		IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450,
		IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1231,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1308,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1184,
		IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1270,
		IF_coarseFreq_accumError_25_BIT_23_20_THEN_0_C_ETC___d737,
		IF_coarseFreq_accumError_25_BIT_23_20_THEN_NEG_ETC___d855,
		IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d820,
		IF_coarseFreq_accumError_25_BIT_47_59_THEN_0_C_ETC___d776,
		IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d888,
		IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1409,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186,
		IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1447,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138,
		IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d596,
		IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d675,
		IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d553,
		IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d637,
		IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1368,
		IF_coarseFreq_lastSample_68_BIT_23_70_THEN_0_C_ETC___d488,
		x__h168656,
		x__h172735,
		x__h175447,
		x__h178191,
		x__h180903,
		x__h186417,
		x__h187344,
		x__h190199,
		x__h194131,
		x__h196858,
		x__h199570,
		x__h200236,
		x__h213230,
		x__h366263,
		x__h368988,
		x__h371703,
		x__h58646,
		x__h61830,
		x__h64575;
  wire [25 : 0] ax2_f__h193803;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1083,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d998,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949,
		IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1091,
		IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1093,
		IF_coarseFreq_accumError_25_BIT_23_20_THEN_IF__ETC___d758,
		IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1092,
		IF_coarseFreq_accumError_25_BIT_47_59_THEN_IF__ETC___d797,
		_0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d999,
		ax1_f__h193808,
		coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81,
		coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168,
		coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207,
		coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120,
		x__h172372,
		x__h172405,
		x__h173109,
		x__h173128,
		x__h175821,
		x__h175840,
		x__h177842,
		x__h177861,
		x__h192819,
		x__h192851,
		x__h192984,
		x__h194505,
		x__h194524,
		x__h202708,
		x__h204756,
		x__h216358,
		x__h218406,
		x__h261139,
		x__h363197,
		x__h366639,
		x__h368658,
		x__h369364,
		x__h369383,
		x__h372098,
		x__h380150,
		x__h383523,
		x__h386318,
		x__h56282,
		x__h59030,
		x__h62214,
		x__h64959,
		x__h68029,
		x__h68129,
		x__h68200,
		x__h69091,
		x__h69106,
		x__h69162,
		x__h69177,
		x__h69233;
  wire [12 : 0] SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548,
		SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484,
		ax2_i__h193802;
  wire [11 : 0] IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1104,
		IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1106,
		IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1105,
		res_f__h196505,
		res_i__h206632,
		x__h193810,
		x__h390404,
		x__h391174,
		x_f__h263612,
		x_f__h388955,
		x_f__h389546,
		x_f__h69739,
		x_f__h69777,
		x_f__h69791,
		x_img_f__h167924,
		x_img_f__h171915,
		x_img_f__h184150,
		x_img_f__h376213,
		x_rel_f__h167517,
		x_rel_f__h171502,
		x_rel_f__h183713,
		x_rel_f__h374798,
		y_avValue_snd__h390338,
		y_avValue_snd__h391108,
		y_f__h169940,
		y_f__h173957,
		y_f__h176669,
		y_f__h179413,
		y_f__h182125,
		y_f__h188622,
		y_f__h191477,
		y_f__h195353,
		y_f__h198080,
		y_f__h201458,
		y_f__h203550,
		y_f__h205460,
		y_f__h217200,
		y_f__h219110,
		y_f__h261969,
		y_f__h364773,
		y_f__h367488,
		y_f__h370213,
		y_f__h372928,
		y_f__h380980,
		y_f__h384365,
		y_f__h387160,
		y_f__h57127,
		y_f__h59872,
		y_f__h63056,
		y_f__h65801;
  wire NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799,
       NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001,
       abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718,
       coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1623,
       coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300,
       coarseFreq_cordic_n_8_ULT_14___d39,
       coarseFreq_cordic_z__1_SLE_0___d256,
       coarseFreq_cordic_z__1_SLE_3216___d72,
       coarseFreq_cordic_z__1_SLT_3216___d160,
       coarseFreq_n_38_ULT_20___d384,
       coarseFreq_n_38_ULT_5___d339,
       n_663_ULT_10___d1664;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule coarseFreq_cordic_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_ix(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_ix$D_IN),
							       .ENQ(coarseFreq_cordic_ix$ENQ),
							       .DEQ(coarseFreq_cordic_ix$DEQ),
							       .CLR(coarseFreq_cordic_ix$CLR),
							       .D_OUT(coarseFreq_cordic_ix$D_OUT),
							       .FULL_N(coarseFreq_cordic_ix$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_ix$EMPTY_N));

  // submodule coarseFreq_cordic_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iy(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iy$D_IN),
							       .ENQ(coarseFreq_cordic_iy$ENQ),
							       .DEQ(coarseFreq_cordic_iy$DEQ),
							       .CLR(coarseFreq_cordic_iy$CLR),
							       .D_OUT(coarseFreq_cordic_iy$D_OUT),
							       .FULL_N(coarseFreq_cordic_iy$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iy$EMPTY_N));

  // submodule coarseFreq_cordic_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iz(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iz$D_IN),
							       .ENQ(coarseFreq_cordic_iz$ENQ),
							       .DEQ(coarseFreq_cordic_iz$DEQ),
							       .CLR(coarseFreq_cordic_iz$CLR),
							       .D_OUT(coarseFreq_cordic_iz$D_OUT),
							       .FULL_N(coarseFreq_cordic_iz$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iz$EMPTY_N));

  // submodule coarseFreq_newSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) coarseFreq_newSample(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_newSample$D_IN),
							       .ENQ(coarseFreq_newSample$ENQ),
							       .DEQ(coarseFreq_newSample$DEQ),
							       .CLR(coarseFreq_newSample$CLR),
							       .D_OUT(coarseFreq_newSample$D_OUT),
							       .FULL_N(coarseFreq_newSample$FULL_N),
							       .EMPTY_N(coarseFreq_newSample$EMPTY_N));

  // rule RL_action_l39c23
  assign WILL_FIRE_RL_action_l39c23 =
	     coarseFreq_newSample$FULL_N && n_663_ULT_10___d1664 &&
	     (state_mkFSMstate == 4'd9 || state_mkFSMstate == 4'd12) ;

  // rule RL_action_l41c13
  assign WILL_FIRE_RL_action_l41c13 =
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1623 &&
	     !coarseFreq_coarseErrorCalc &&
	     state_mkFSMstate == 4'd10 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !n_663_ULT_10___d1664 && start_wire$whas &&
	     state_mkFSMstate == 4'd9 ||
	     !n_663_ULT_10___d1664 && start_wire$whas &&
	     state_mkFSMstate == 4'd12 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_663_ULT_10___d1664 && !start_wire$whas &&
	     state_mkFSMstate == 4'd9 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_663_ULT_10___d1664 && !start_wire$whas &&
	     state_mkFSMstate == 4'd12 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l55c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd1 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l56c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd2 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l57c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd3 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l58c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd4 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l59c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l61c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 =
	     !coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l74c13
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 =
	     coarseFreq_cordic_n_8_ULT_14___d39 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) ;

  // rule RL_coarseFreq_cordic_atanCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start =
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     coarseFreq_cordic_atanCalc ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l67c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ||
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ||
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l53c22
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_1$whas &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd9 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l53c22_1
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_1$whas &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd12 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l100c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 =
	     coarseFreq_newSample$EMPTY_N && coarseFreq_n_38_ULT_5___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd5 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l101c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 =
	     coarseFreq_newSample$EMPTY_N &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd6 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 =
	     !coarseFreq_n_38_ULT_5___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd5 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l104c24
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 =
	     coarseFreq_n_38_ULT_20___d384 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd9 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd21) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l137c17
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 =
	     !coarseFreq_n_38_ULT_20___d384 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd9 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd21) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l147c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 =
	     coarseFreq_n_38_ULT_5___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd33) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l150c19
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 =
	     coarseFreq_cordic_ix$FULL_N && coarseFreq_cordic_iy$FULL_N &&
	     coarseFreq_cordic_iz$FULL_N &&
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     !coarseFreq_cordic_atanCalc &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd27 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l151c13
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 =
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     !coarseFreq_cordic_atanCalc &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd28 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l54c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     (coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) ;

  // rule RL_coarseFreq_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start =
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1623 &&
	     coarseFreq_coarseErrorCalc ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l95c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 =
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd0 ||
	     !coarseFreq_n_38_ULT_5___d339 &&
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	     !coarseFreq_n_38_ULT_5___d339 &&
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd33 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l94c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 =
	     !coarseFreq_n_38_ULT_5___d339 &&
	     !coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd24 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l94c22_1
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 =
	     !coarseFreq_n_38_ULT_5___d339 &&
	     !coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd33 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ;
  assign MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ;
  assign MUX_coarseFreq_n$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ;
  assign MUX_coarseFreq_samples$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_coarseFreq_accumError$write_1__VAL_1 =
	     { x__h172372, x__h177842 } ;
  assign MUX_coarseFreq_accumError$write_1__VAL_2 =
	     { coarseFreq_accumError[47:36],
	       x_rel_f__h183713,
	       coarseFreq_accumError[23:0] } ;
  assign MUX_coarseFreq_accumError$write_1__VAL_3 =
	     { coarseFreq_accumError[47:12], x_img_f__h184150 } ;
  assign MUX_coarseFreq_cordic_n$write_1__VAL_1 = coarseFreq_cordic_n + 4'd1 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_3 =
	     (!x__h61830[35] &&
	      (x__h61830[23] || x__h61830[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h61830[35] &&
		 (!x__h61830[23] || ~x__h61830[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h61830[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69091 : x__h68029 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_5 =
	     { coarseFreq_cordic_x_[23:12], x_f__h69739 } ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_2 =
	     (!x__h58646[35] &&
	      (x__h58646[23] || x__h58646[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h58646[35] &&
		 (!x__h58646[23] || ~x__h58646[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h58646[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_3 =
	     (!x__h64575[35] &&
	      (x__h64575[23] || x__h64575[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h64575[35] &&
		 (!x__h64575[23] || ~x__h64575[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h64575[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69162 : x__h68129 ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_5 =
	     { coarseFreq_cordic_y_[23:12], x_f__h69777 } ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_1 =
	     coarseFreq_cordic_z_ + 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_2 =
	     coarseFreq_cordic_z_ - 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69233 : x__h68200 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_5 =
	     { coarseFreq_cordic_z_[23:12], x_f__h69791 } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_1 =
	     { SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
	       fpart__h390158,
	       SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
	       fpart__h390934 } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_2 =
	     { coarseFreq_currSample[47:36],
	       x_rel_f__h167517,
	       coarseFreq_currSample[23:0] } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_3 =
	     { coarseFreq_currSample[47:12], x_img_f__h167924 } ;
  assign MUX_coarseFreq_fsError$write_1__VAL_1 =
	     (!x__h186417[35] &&
	      (x__h186417[23] || x__h186417[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h186417[35] &&
		 (!x__h186417[23] || ~x__h186417[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h186417[23:0]) ;
  assign MUX_coarseFreq_fsError$write_1__VAL_2 =
	     { coarseFreq_fsError[23:12], x_f__h263612 } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_2 =
	     { coarseFreq_lastSample[47:24],
	       (!x__h168656[35] &&
		(x__h168656[23] || x__h168656[35:24] != 12'd0)) ?
		 24'd8388607 :
		 ((x__h168656[35] &&
		   (!x__h168656[23] || ~x__h168656[35:24] != 12'd0)) ?
		    24'd8388608 :
		    x__h168656[23:0]) } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_3 =
	     { coarseFreq_lastSample[47:36],
	       x_rel_f__h171502,
	       coarseFreq_lastSample[23:0] } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_4 =
	     { coarseFreq_lastSample[47:12], x_img_f__h171915 } ;
  assign MUX_coarseFreq_n$write_1__VAL_1 = coarseFreq_n + 10'd1 ;
  assign MUX_coarseFreq_samples$write_1__VAL_3 = { x__h363197, x__h368658 } ;
  assign MUX_coarseFreq_samples$write_1__VAL_4 =
	     { SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
	       x_rel_f__h374798,
	       SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
	       fpart__h390934 } ;
  assign MUX_coarseFreq_samples$write_1__VAL_5 =
	     { SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
	       fpart__h390158,
	       SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
	       x_img_f__h376213 } ;
  assign MUX_coarseFreq_xFix$write_1__VAL_1 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412[23:0]) ;
  assign MUX_coarseFreq_xFix$write_1__VAL_2 =
	     { coarseFreq_xFix[23:12], x_f__h388955 } ;
  assign MUX_coarseFreq_yFix$write_1__VAL_1 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450[23:0]) ;
  assign MUX_coarseFreq_yFix$write_1__VAL_2 =
	     { coarseFreq_yFix[23:12], x_f__h389546 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign coarseFreq_cordic_atanCalc_1$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     coarseFreq_cordic_atanCalc_1_1 &&
	     !coarseFreq_cordic_atanCalc_3_1 ;
  assign coarseFreq_coarseErrorCalc_1$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_1_1 &&
	     !coarseFreq_coarseErrorCalc_3_1 ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign coarseFreq_cordic_atanCalc_3$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ;
  assign coarseFreq_coarseErrorCalc_3$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 4'd11 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     WILL_FIRE_RL_action_l39c23 ||
	     state_mkFSMstate == 4'd8 ||
	     state_mkFSMstate == 4'd7 ||
	     state_mkFSMstate == 4'd6 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register coarseFreq_accumError
  always@(coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_accumError$write_1__VAL_1 or
	  MUX_coarseFreq_accumError$write_1__VAL_2 or
	  MUX_coarseFreq_accumError$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_2_1 == 6'd15:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd16:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd17:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd2:
	  coarseFreq_accumError$D_IN = 48'd0;
      default: coarseFreq_accumError$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_accumError$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ;

  // register coarseFreq_coarseErrorCalc
  assign coarseFreq_coarseErrorCalc$D_IN =
	     !WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ;
  assign coarseFreq_coarseErrorCalc$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1623 &&
	     !coarseFreq_coarseErrorCalc ;

  // register coarseFreq_coarseErrorCalc_1_1
  assign coarseFreq_coarseErrorCalc_1_1$D_IN =
	     coarseFreq_coarseErrorCalc_1$whas ;
  assign coarseFreq_coarseErrorCalc_1_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_2_1
  always@(MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd0;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd1:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd2:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd3:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd4;
      coarseFreq_coarseErrorCalc_2_1 == 6'd4:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd5;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd6;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd7;
      coarseFreq_coarseErrorCalc_2_1 == 6'd7:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd8;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd9;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd10;
      coarseFreq_coarseErrorCalc_2_1 == 6'd10:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd11;
      coarseFreq_coarseErrorCalc_2_1 == 6'd11:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd12;
      coarseFreq_coarseErrorCalc_2_1 == 6'd12:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd13;
      coarseFreq_coarseErrorCalc_2_1 == 6'd13:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd14;
      coarseFreq_coarseErrorCalc_2_1 == 6'd14:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd15;
      coarseFreq_coarseErrorCalc_2_1 == 6'd15:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd16;
      coarseFreq_coarseErrorCalc_2_1 == 6'd16:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd17;
      coarseFreq_coarseErrorCalc_2_1 == 6'd17:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd18;
      coarseFreq_coarseErrorCalc_2_1 == 6'd18:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd19;
      coarseFreq_coarseErrorCalc_2_1 == 6'd19:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd20;
      coarseFreq_coarseErrorCalc_2_1 == 6'd20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd21;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd22;
      coarseFreq_coarseErrorCalc_2_1 == 6'd22:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd23;
      coarseFreq_coarseErrorCalc_2_1 == 6'd23:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd24;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd25;
      coarseFreq_coarseErrorCalc_2_1 == 6'd25:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd26;
      coarseFreq_coarseErrorCalc_2_1 == 6'd26:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd27;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd28;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd29;
      coarseFreq_coarseErrorCalc_2_1 == 6'd29:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd30;
      coarseFreq_coarseErrorCalc_2_1 == 6'd30:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd31;
      coarseFreq_coarseErrorCalc_2_1 == 6'd31:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd32;
      coarseFreq_coarseErrorCalc_2_1 == 6'd32:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd33;
      default: coarseFreq_coarseErrorCalc_2_1$D_IN =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_coarseErrorCalc_2_1$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ;

  // register coarseFreq_coarseErrorCalc_3_1
  assign coarseFreq_coarseErrorCalc_3_1$D_IN =
	     coarseFreq_coarseErrorCalc_3$whas ;
  assign coarseFreq_coarseErrorCalc_3_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_4
  assign coarseFreq_coarseErrorCalc_4$D_IN =
	     coarseFreq_coarseErrorCalc_3$whas ||
	     coarseFreq_coarseErrorCalc_4 ;
  assign coarseFreq_coarseErrorCalc_4$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc
  assign coarseFreq_cordic_atanCalc$D_IN =
	     !WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ;
  assign coarseFreq_cordic_atanCalc$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;

  // register coarseFreq_cordic_atanCalc_1_1
  assign coarseFreq_cordic_atanCalc_1_1$D_IN =
	     coarseFreq_cordic_atanCalc_1$whas ;
  assign coarseFreq_cordic_atanCalc_1_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_2_1
  always@(MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  coarseFreq_cordic_atanCalc_2_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd0;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd4;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd5;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd6;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd7;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd8;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd9;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd10;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd11;
      coarseFreq_cordic_atanCalc_2_1 == 4'd11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd12;
      default: coarseFreq_cordic_atanCalc_2_1$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_atanCalc_2_1$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ;

  // register coarseFreq_cordic_atanCalc_3_1
  assign coarseFreq_cordic_atanCalc_3_1$D_IN =
	     coarseFreq_cordic_atanCalc_3$whas ;
  assign coarseFreq_cordic_atanCalc_3_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_4
  assign coarseFreq_cordic_atanCalc_4$D_IN =
	     coarseFreq_cordic_atanCalc_3$whas ||
	     coarseFreq_cordic_atanCalc_4 ;
  assign coarseFreq_cordic_atanCalc_4$EN = 1'd1 ;

  // register coarseFreq_cordic_limitX_inner_reg
  assign coarseFreq_cordic_limitX_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitX_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_limitY_inner_reg
  assign coarseFreq_cordic_limitY_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitY_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_limitZ_inner_reg
  assign coarseFreq_cordic_limitZ_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitZ_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_n
  assign coarseFreq_cordic_n$D_IN =
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd11) ?
	       MUX_coarseFreq_cordic_n$write_1__VAL_1 :
	       4'd0 ;
  assign coarseFreq_cordic_n$EN =
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ;

  // register coarseFreq_cordic_x_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 or
	  coarseFreq_cordic_ix$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12:
	  coarseFreq_cordic_x_$D_IN = coarseFreq_cordic_ix$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_5;
      default: coarseFreq_cordic_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_x_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_cordic_y_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 or
	  coarseFreq_cordic_iy$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12:
	  coarseFreq_cordic_y_$D_IN = coarseFreq_cordic_iy$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_5;
      default: coarseFreq_cordic_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_y_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_cordic_z_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 or
	  coarseFreq_cordic_iz$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12:
	  coarseFreq_cordic_z_$D_IN = coarseFreq_cordic_iz$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_5;
      default: coarseFreq_cordic_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_z_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_currSample
  always@(WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 or
	  MUX_coarseFreq_currSample$write_1__VAL_1 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_currSample$write_1__VAL_2 or
	  MUX_coarseFreq_currSample$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd10:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd11:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd1:
	  coarseFreq_currSample$D_IN = 48'd0;
      default: coarseFreq_currSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_currSample$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ;

  // register coarseFreq_dummy
  assign coarseFreq_dummy$D_IN = 1'b0 ;
  assign coarseFreq_dummy$EN = 1'b0 ;

  // register coarseFreq_fsError
  always@(WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 or
	  MUX_coarseFreq_fsError$write_1__VAL_1 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_fsError$write_1__VAL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17:
	  coarseFreq_fsError$D_IN = MUX_coarseFreq_fsError$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd22:
	  coarseFreq_fsError$D_IN = MUX_coarseFreq_fsError$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd3: coarseFreq_fsError$D_IN = 24'd0;
      default: coarseFreq_fsError$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_fsError$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ;

  // register coarseFreq_lastSample
  always@(coarseFreq_coarseErrorCalc_2_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_lastSample$write_1__VAL_2 or
	  MUX_coarseFreq_lastSample$write_1__VAL_3 or
	  MUX_coarseFreq_lastSample$write_1__VAL_4 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_2_1 == 6'd18:
	  coarseFreq_lastSample$D_IN = coarseFreq_currSample;
      coarseFreq_coarseErrorCalc_2_1 == 6'd12:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd13:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd14:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_4;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20:
	  coarseFreq_lastSample$D_IN = 48'd0;
      default: coarseFreq_lastSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_lastSample$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ;

  // register coarseFreq_limitAccumE_inner_reg
  assign coarseFreq_limitAccumE_inner_reg$D_IN = 12'hFFF << inV ;
  assign coarseFreq_limitAccumE_inner_reg$EN = state_mkFSMstate == 4'd3 ;

  // register coarseFreq_limitCpxFix_inner_reg
  assign coarseFreq_limitCpxFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitCpxFix_inner_reg$EN = state_mkFSMstate == 4'd5 ;

  // register coarseFreq_limitCurrS_inner_reg
  assign coarseFreq_limitCurrS_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitCurrS_inner_reg$EN = state_mkFSMstate == 4'd1 ;

  // register coarseFreq_limitError_inner_reg
  assign coarseFreq_limitError_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitError_inner_reg$EN = state_mkFSMstate == 4'd4 ;

  // register coarseFreq_limitLastS_inner_reg
  assign coarseFreq_limitLastS_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitLastS_inner_reg$EN = state_mkFSMstate == 4'd2 ;

  // register coarseFreq_limitXFix_inner_reg
  assign coarseFreq_limitXFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitXFix_inner_reg$EN = state_mkFSMstate == 4'd6 ;

  // register coarseFreq_limitYFix_inner_reg
  assign coarseFreq_limitYFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitYFix_inner_reg$EN = state_mkFSMstate == 4'd7 ;

  // register coarseFreq_n
  assign coarseFreq_n$D_IN =
	     MUX_coarseFreq_n$write_1__SEL_1 ?
	       MUX_coarseFreq_n$write_1__VAL_1 :
	       10'd0 ;
  assign coarseFreq_n$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ;

  // register coarseFreq_samples
  always@(MUX_coarseFreq_samples$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples$write_1__SEL_1:
	  coarseFreq_samples$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples$write_1__SEL_2:
	  coarseFreq_samples$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples$write_1__SEL_3:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples$write_1__SEL_4:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples$write_1__SEL_5:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd0 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd0 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd0 ;

  // register coarseFreq_samples_1
  always@(MUX_coarseFreq_samples_1$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_1$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_1$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_1$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_1$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_1$write_1__SEL_1:
	  coarseFreq_samples_1$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_1$write_1__SEL_2:
	  coarseFreq_samples_1$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_1$write_1__SEL_3:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_1$write_1__SEL_4:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_1$write_1__SEL_5:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_1$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_1$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd1 ;

  // register coarseFreq_samples_2
  always@(MUX_coarseFreq_samples_2$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_2$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_2$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_2$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_2$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_2$write_1__SEL_1:
	  coarseFreq_samples_2$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_2$write_1__SEL_2:
	  coarseFreq_samples_2$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_2$write_1__SEL_3:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_2$write_1__SEL_4:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_2$write_1__SEL_5:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_2$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_2$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd2 ;

  // register coarseFreq_samples_3
  always@(MUX_coarseFreq_samples_3$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_3$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_3$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_3$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_3$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_3$write_1__SEL_1:
	  coarseFreq_samples_3$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_3$write_1__SEL_2:
	  coarseFreq_samples_3$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_3$write_1__SEL_3:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_3$write_1__SEL_4:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_3$write_1__SEL_5:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_3$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_3$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd3 ;

  // register coarseFreq_samples_4
  always@(MUX_coarseFreq_samples_4$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_4$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_4$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_4$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_4$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_4$write_1__SEL_1:
	  coarseFreq_samples_4$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_4$write_1__SEL_2:
	  coarseFreq_samples_4$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_4$write_1__SEL_3:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_4$write_1__SEL_4:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_4$write_1__SEL_5:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_4$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_4$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd4 ;

  // register coarseFreq_samples_5
  always@(MUX_coarseFreq_samples_5$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_5$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_5$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_5$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_5$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_5$write_1__SEL_1:
	  coarseFreq_samples_5$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_5$write_1__SEL_2:
	  coarseFreq_samples_5$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_5$write_1__SEL_3:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_5$write_1__SEL_4:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_5$write_1__SEL_5:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_5$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_5$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd5 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd5 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd5 ;

  // register coarseFreq_samples_6
  always@(MUX_coarseFreq_samples_6$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_6$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_6$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_6$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_6$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_6$write_1__SEL_1:
	  coarseFreq_samples_6$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_6$write_1__SEL_2:
	  coarseFreq_samples_6$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_6$write_1__SEL_3:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_6$write_1__SEL_4:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_6$write_1__SEL_5:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_6$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_6$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd6 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd6 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd6 ;

  // register coarseFreq_samples_7
  always@(MUX_coarseFreq_samples_7$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_7$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_7$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_7$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_7$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_7$write_1__SEL_1:
	  coarseFreq_samples_7$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_7$write_1__SEL_2:
	  coarseFreq_samples_7$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_7$write_1__SEL_3:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_7$write_1__SEL_4:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_7$write_1__SEL_5:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_7$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_7$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd7 ;

  // register coarseFreq_samples_8
  always@(MUX_coarseFreq_samples_8$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_8$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_8$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_8$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_8$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_8$write_1__SEL_1:
	  coarseFreq_samples_8$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_8$write_1__SEL_2:
	  coarseFreq_samples_8$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_8$write_1__SEL_3:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_8$write_1__SEL_4:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_8$write_1__SEL_5:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_8$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_8$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd8 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd8 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd8 ;

  // register coarseFreq_samples_9
  always@(MUX_coarseFreq_samples_9$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_9$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_9$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_9$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_9$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_9$write_1__SEL_1:
	  coarseFreq_samples_9$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_9$write_1__SEL_2:
	  coarseFreq_samples_9$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_9$write_1__SEL_3:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_9$write_1__SEL_4:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_9$write_1__SEL_5:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_9$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_9$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd9 ;

  // register coarseFreq_xFix
  assign coarseFreq_xFix$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ?
	       MUX_coarseFreq_xFix$write_1__VAL_1 :
	       MUX_coarseFreq_xFix$write_1__VAL_2 ;
  assign coarseFreq_xFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ;

  // register coarseFreq_yFix
  assign coarseFreq_yFix$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ?
	       MUX_coarseFreq_yFix$write_1__VAL_1 :
	       MUX_coarseFreq_yFix$write_1__VAL_2 ;
  assign coarseFreq_yFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ;

  // register fV
  assign fV$D_IN = { fV[23:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = value ;
  assign inV$EN = EN_inM ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 4'd11) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 4'd11 || state_mkFSMstate == 4'd8 ;

  // register outV
  assign outV$D_IN = coarseFreq_fsError ;
  assign outV$EN = WILL_FIRE_RL_action_l41c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l39c23 or WILL_FIRE_RL_action_l41c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 4'd1;
      state_mkFSMstate == 4'd1: state_mkFSMstate$D_IN = 4'd2;
      state_mkFSMstate == 4'd2: state_mkFSMstate$D_IN = 4'd3;
      state_mkFSMstate == 4'd3: state_mkFSMstate$D_IN = 4'd4;
      state_mkFSMstate == 4'd4: state_mkFSMstate$D_IN = 4'd5;
      state_mkFSMstate == 4'd5: state_mkFSMstate$D_IN = 4'd6;
      state_mkFSMstate == 4'd6: state_mkFSMstate$D_IN = 4'd7;
      state_mkFSMstate == 4'd7: state_mkFSMstate$D_IN = 4'd8;
      state_mkFSMstate == 4'd8: state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_action_l39c23: state_mkFSMstate$D_IN = 4'd10;
      WILL_FIRE_RL_action_l41c13: state_mkFSMstate$D_IN = 4'd11;
      state_mkFSMstate == 4'd11: state_mkFSMstate$D_IN = 4'd12;
      default: state_mkFSMstate$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 4'd1 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd6 ||
	     state_mkFSMstate == 4'd7 ||
	     state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_action_l39c23 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     state_mkFSMstate == 4'd11 ;

  // submodule coarseFreq_cordic_ix
  assign coarseFreq_cordic_ix$D_IN = coarseFreq_xFix ;
  assign coarseFreq_cordic_ix$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_ix$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ;
  assign coarseFreq_cordic_ix$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iy
  assign coarseFreq_cordic_iy$D_IN = coarseFreq_yFix ;
  assign coarseFreq_cordic_iy$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_iy$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ;
  assign coarseFreq_cordic_iy$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iz
  assign coarseFreq_cordic_iz$D_IN =
	     (!IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[35] &&
	      (IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[23] ||
	       IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[35] &&
		 (!IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[23] ||
		  ~IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371[23:0]) ;
  assign coarseFreq_cordic_iz$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_iz$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ;
  assign coarseFreq_cordic_iz$CLR = 1'b0 ;

  // submodule coarseFreq_newSample
  assign coarseFreq_newSample$D_IN = {2{fV}} ;
  assign coarseFreq_newSample$ENQ = WILL_FIRE_RL_action_l39c23 ;
  assign coarseFreq_newSample$DEQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ;
  assign coarseFreq_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1008 =
	     x__h202708 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1022 =
	     x__h199899[47:12] + { 24'd0, y_f__h203550 } ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d914 =
	     x__h216358 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d928 =
	     x__h213559[47:12] + { 24'd0, y_f__h217200 } ;
  assign IF_IF_coarseFreq_accumError_25_BIT_23_20_AND_N_ETC___d1124 =
	     x__h186746[47:12] + { 24'd0, y_f__h261969 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1083 =
	     (!x__h193441[36] &&
	      (x__h193441[23] || x__h193441[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h193441[36] &&
		 (!x__h193441[23] || ~x__h193441[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h193441[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d998 =
	     (!x__h207101[36] &&
	      (x__h207101[23] || x__h207101[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h207101[36] &&
		 (!x__h207101[23] || ~x__h207101[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h207101[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908 +
	     ((!x__h199570[35] &&
	       (x__h199570[23] || x__h199570[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h199570[35] &&
		  (!x__h199570[23] || ~x__h199570[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h199570[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875 =
	     (!x__h200236[35] &&
	      (x__h200236[23] || x__h200236[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h200236[35] &&
		 (!x__h200236[23] || ~x__h200236[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h200236[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908 =
	     (!x__h196858[35] &&
	      (x__h196858[23] || x__h196858[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h196858[35] &&
		 (!x__h196858[23] || ~x__h196858[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h196858[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875 +
	     ((!x__h213230[35] &&
	       (x__h213230[23] || x__h213230[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h213230[35] &&
		  (!x__h213230[23] || ~x__h213230[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h213230[23:0])) ;
  assign IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187 =
	     (!IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172[47] &&
	      IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1184[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1184 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_392_TH_ETC___d1412 =
	     (!IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397[47] &&
	      IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1409[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1409 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102 =
	     (!IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] &&
	      IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 ;
  assign IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_430_TH_ETC___d1450 =
	     (!IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435[47] &&
	      IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1447[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1447 ;
  assign IF_NOT_IF_coarseFreq_fsError_147_BIT_23_351_TH_ETC___d1371 =
	     (!IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356[47] &&
	      IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1368[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1368 ;
  assign IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1091 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799) ?
	       x__h192984 :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1083 :
		  24'd0) ;
  assign IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1104 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799) ?
	       x__h192984[23:12] :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001) ?
		  res_i__h206632 :
		  12'd0) ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1217 =
	     x__h366639 * x__h369383 ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1231 =
	     x__h366592[47:12] + { 24'd0, y_f__h367488 } ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1294 =
	     x__h366639 * x__h372098 ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1308 =
	     x__h372032[47:12] + { 24'd0, y_f__h372928 } ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1170 =
	     x__h369364 * x__h372098 ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172 =
	     (SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1170 :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1170 ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1184 =
	     IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172[47:12] +
	     { 24'd0, y_f__h364773 } ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1256 =
	     x__h369364 * x__h369383 ;
  assign IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1270 =
	     x__h369317[47:12] + { 24'd0, y_f__h370213 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1051 =
	     x__h204737 / x__h204756 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1063 =
	     x__h193780[38:2] + { 25'd0, y_f__h205460 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d966 =
	     x__h204737 / x__h218406 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d978 =
	     x__h207440[38:2] + { 25'd0, y_f__h219110 } ;
  assign IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1093 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d999 :
	       IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1092 ;
  assign IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1106 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d999[23:12] :
	       IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1105 ;
  assign IF_coarseFreq_accumError_25_BIT_23_20_THEN_0_C_ETC___d737 =
	     x__h187673[47:12] + { 24'd0, y_f__h188622 } ;
  assign IF_coarseFreq_accumError_25_BIT_23_20_THEN_IF__ETC___d758 =
	     coarseFreq_accumError[23] ?
	       ((!x__h187344[35] &&
		 (x__h187344[23] || x__h187344[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h187344[35] &&
		    (!x__h187344[23] || ~x__h187344[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h187344[23:0])) :
	       coarseFreq_accumError[23:0] ;
  assign IF_coarseFreq_accumError_25_BIT_23_20_THEN_NEG_ETC___d855 =
	     x__h200565[47:12] + { 24'd0, y_f__h201458 } ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1092 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001) ?
	       (coarseFreq_accumError[23] ? x__h192851 : x__h192819) :
	       IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1091 ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d1105 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001) ?
	       (coarseFreq_accumError[23] ?
		  x__h192851[23:12] :
		  x__h192819[23:12]) :
	       IF_NOT_coarseFreq_accumError_25_BIT_23_20_01_A_ETC___d1104 ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d820 =
	     x__h194460[47:12] + { 24'd0, y_f__h195353 } ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_THEN_0_C_ETC___d776 =
	     x__h190528[47:12] + { 24'd0, y_f__h191477 } ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_THEN_IF__ETC___d797 =
	     coarseFreq_accumError[47] ?
	       ((!x__h190199[35] &&
		 (x__h190199[23] || x__h190199[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h190199[35] &&
		    (!x__h190199[23] || ~x__h190199[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h190199[23:0])) :
	       coarseFreq_accumError[47:24] ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d806 =
	     x__h194505 * x__h194524 ;
  assign IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d888 =
	     x__h197187[47:12] + { 24'd0, y_f__h198080 } ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1395 =
	     x__h383523 * 24'd2487 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397 =
	     coarseFreq_cordic_x_[23] ?
	       -IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1395 :
	       IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1395 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1409 =
	     IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397[47:12] +
	     { 24'd0, y_f__h384365 } ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 =
	     x__h56282 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 =
	     IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47:12] +
	     { 24'd0, y_f__h57127 } ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 =
	     x__h62214 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 =
	     x__h62159[47:12] + { 24'd0, y_f__h63056 } ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1433 =
	     x__h386318 * 24'd2487 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435 =
	     coarseFreq_cordic_y_[23] ?
	       -IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1433 :
	       IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1433 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1447 =
	     IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435[47:12] +
	     { 24'd0, y_f__h387160 } ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 =
	     x__h64959 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 =
	     x__h64904[47:12] + { 24'd0, y_f__h65801 } ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 =
	     x__h59030 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 =
	     x__h58975[47:12] + { 24'd0, y_f__h59872 } ;
  assign IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d596 =
	     x__h175776[47:12] + { 24'd0, y_f__h176669 } ;
  assign IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d675 =
	     x__h181232[47:12] + { 24'd0, y_f__h182125 } ;
  assign IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d582 =
	     x__h175821 * x__h175840 ;
  assign IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d661 =
	     x__h175821 * x__h173128 ;
  assign IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d553 =
	     x__h173064[47:12] + { 24'd0, y_f__h173957 } ;
  assign IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d637 =
	     x__h178520[47:12] + { 24'd0, y_f__h179413 } ;
  assign IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d539 =
	     x__h173109 * x__h173128 ;
  assign IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d623 =
	     x__h173109 * x__h175840 ;
  assign IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356 =
	     coarseFreq_fsError[23] ?
	       _25734_MUL_IF_coarseFreq_fsError_147_BIT_23_351_ETC___d1354 :
	       -_25734_MUL_IF_coarseFreq_fsError_147_BIT_23_351_ETC___d1354 ;
  assign IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1368 =
	     IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356[47:12] +
	     { 24'd0, y_f__h380980 } ;
  assign IF_coarseFreq_lastSample_68_BIT_23_70_THEN_0_C_ETC___d488 =
	     x__h168985[47:12] + { 24'd0, y_f__h169940 } ;
  assign NOT_IF_coarseFreq_accumError_25_BIT_23_20_THEN_ETC___d799 =
	     (IF_coarseFreq_accumError_25_BIT_23_20_THEN_IF__ETC___d758 ^
	      24'h800000) >=
	     (IF_coarseFreq_accumError_25_BIT_47_59_THEN_IF__ETC___d797 ^
	      24'h800000) ;
  assign NOT_IF_coarseFreq_accumError_25_BIT_47_59_THEN_ETC___d1001 =
	     (IF_coarseFreq_accumError_25_BIT_47_59_THEN_IF__ETC___d797 ^
	      24'h800000) >
	     (IF_coarseFreq_accumError_25_BIT_23_20_THEN_IF__ETC___d758 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548 =
	     { SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11],
	       SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 } ;
  assign SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484 =
	     { SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11],
	       SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1501 =
	     { 33'd0, x__h390404 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1504 =
	     { 33'd0, x__h390404 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1512 =
	     { 33'd0, x__h390404 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1521 =
	     { 33'd0, x__h390404 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1530 =
	     { 33'd0, x__h390404 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1539 =
	     { 33'd0, x__h390404 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1565 =
	     { 33'd0, x__h391174 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1568 =
	     { 33'd0, x__h391174 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1576 =
	     { 33'd0, x__h391174 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1585 =
	     { 33'd0, x__h391174 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1594 =
	     { 33'd0, x__h391174 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1603 =
	     { 33'd0, x__h391174 } * 45'd1000000 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 } ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1507 =
	     45'd10 * digit__h390374 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1571 =
	     45'd10 * digit__h391144 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1516 =
	     45'd10 * y__h390587 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1580 =
	     45'd10 * y__h391357 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1525 =
	     45'd10 * y__h390676 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1589 =
	     45'd10 * y__h391446 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1534 =
	     45'd10 * y__h390765 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1598 =
	     45'd10 * y__h391535 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1543 =
	     45'd10 * y__h390854 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1607 =
	     45'd10 * y__h391624 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d999 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d998 ;
  assign _25734_MUL_IF_coarseFreq_fsError_147_BIT_23_351_ETC___d1354 =
	     24'd25734 * x__h380150 ;
  assign _651_MUL_IF_IF_coarseFreq_accumError_25_BIT_23__ETC___d1110 =
	     24'd651 * x__h261139 ;
  assign abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718 =
	     (state_mkFSMstate == 4'd0 ||
	      !n_663_ULT_10___d1664 && state_mkFSMstate == 4'd9 ||
	      !n_663_ULT_10___d1664 && state_mkFSMstate == 4'd12) &&
	     (!start_reg_1 || state_fired) ;
  assign ax1_f__h193808 = { res_f__h196505, 12'd0 } ;
  assign ax2_f__h193803 = { ax1_f__h193808, 2'd0 } ;
  assign ax2_i__h193802 = { x__h193810[11], x__h193810 } ;
  assign coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1623 =
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd0 ||
	      !coarseFreq_n_38_ULT_5___d339 &&
	      coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	      !coarseFreq_n_38_ULT_5___d339 &&
	      coarseFreq_coarseErrorCalc_2_1 == 6'd33) &&
	     (!coarseFreq_coarseErrorCalc_1_1 ||
	      coarseFreq_coarseErrorCalc_3_1) ;
  assign coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 =
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) &&
	     (!coarseFreq_cordic_atanCalc_1_1 ||
	      coarseFreq_cordic_atanCalc_3_1) ;
  assign coarseFreq_cordic_n_8_ULT_14___d39 = coarseFreq_cordic_n < 4'd14 ;
  assign coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 =
	     coarseFreq_cordic_x_ - coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 =
	     coarseFreq_cordic_x_ + coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 =
	     coarseFreq_cordic_y_ - coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 =
	     coarseFreq_cordic_y_ + coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_z__1_SLE_0___d256 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign coarseFreq_cordic_z__1_SLE_3216___d72 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign coarseFreq_cordic_z__1_SLT_3216___d160 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) < 24'd8391824 ;
  assign coarseFreq_n_38_ULT_20___d384 = coarseFreq_n < 10'd20 ;
  assign coarseFreq_n_38_ULT_5___d339 = coarseFreq_n < 10'd5 ;
  assign digit__h390374 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1501[15:12] } ;
  assign digit__h390441 =
	     { 41'd0,
	       tx90439_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2[3:0] } ;
  assign digit__h390530 =
	     { 41'd0,
	       tx90528_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3[3:0] } ;
  assign digit__h390619 =
	     { 41'd0,
	       tx90617_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4[3:0] } ;
  assign digit__h390708 =
	     { 41'd0,
	       tx90706_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5[3:0] } ;
  assign digit__h390797 =
	     { 41'd0,
	       tx90795_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6[3:0] } ;
  assign digit__h391144 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1565[15:12] } ;
  assign digit__h391211 =
	     { 41'd0,
	       tx91209_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7[3:0] } ;
  assign digit__h391300 =
	     { 41'd0,
	       tx91298_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8[3:0] } ;
  assign digit__h391389 =
	     { 41'd0,
	       tx91387_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9[3:0] } ;
  assign digit__h391478 =
	     { 41'd0,
	       tx91476_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10[3:0] } ;
  assign digit__h391567 =
	     { 41'd0,
	       tx91565_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11[3:0] } ;
  assign n_663_ULT_10___d1664 = n < 10'd10 ;
  assign res_f__h196505 =
	     (!x__h194131[35] &&
	      (x__h194131[23] || x__h194131[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h194131[35] &&
		 (!x__h194131[23] || ~x__h194131[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h194131[11:0]) ;
  assign res_i__h206632 =
	     (!x__h193441[36] &&
	      (x__h193441[23] || x__h193441[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h193441[36] &&
		 (!x__h193441[23] || ~x__h193441[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h193441[23:12]) ;
  assign tx90439_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2 =
	     tx__h390439 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1507[44:0] ;
  assign tx90528_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3 =
	     tx__h390528 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1516[44:0] ;
  assign tx90617_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4 =
	     tx__h390617 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1525[44:0] ;
  assign tx90706_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5 =
	     tx__h390706 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1534[44:0] ;
  assign tx90795_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6 =
	     tx__h390795 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1543[44:0] ;
  assign tx91209_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7 =
	     tx__h391209 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1571[44:0] ;
  assign tx91298_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8 =
	     tx__h391298 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1580[44:0] ;
  assign tx91387_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9 =
	     tx__h391387 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1589[44:0] ;
  assign tx91476_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10 =
	     tx__h391476 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1598[44:0] ;
  assign tx91565_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11 =
	     tx__h391565 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1607[44:0] ;
  assign tx__h390439 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1504[44:12] } ;
  assign tx__h390528 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1512[44:12] } ;
  assign tx__h390617 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1521[44:12] } ;
  assign tx__h390706 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1530[44:12] } ;
  assign tx__h390795 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1539[44:12] } ;
  assign tx__h391209 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1568[44:12] } ;
  assign tx__h391298 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1576[44:12] } ;
  assign tx__h391387 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1585[44:12] } ;
  assign tx__h391476 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1594[44:12] } ;
  assign tx__h391565 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_90_ETC___d1603[44:12] } ;
  assign x__h168656 =
	     (!x__h168985[47] &&
	      IF_coarseFreq_lastSample_68_BIT_23_70_THEN_0_C_ETC___d488[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_lastSample_68_BIT_23_70_THEN_0_C_ETC___d488 ;
  assign x__h168985 =
	     coarseFreq_lastSample[23] ?
	       { 12'd0, x__h175840, 12'd0 } :
	       -{ 12'd0, x__h175840, 12'd0 } ;
  assign x__h172372 = coarseFreq_accumError[47:24] + x__h172405 ;
  assign x__h172405 =
	     ((!x__h172735[35] &&
	       (x__h172735[23] || x__h172735[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h172735[35] &&
		  (!x__h172735[23] || ~x__h172735[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h172735[23:0])) -
	     ((!x__h175447[35] &&
	       (x__h175447[23] || x__h175447[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h175447[35] &&
		  (!x__h175447[23] || ~x__h175447[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h175447[23:0])) ;
  assign x__h172735 =
	     (!x__h173064[47] &&
	      IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d553[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d553 ;
  assign x__h173064 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d539 :
	       IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d539 ;
  assign x__h173109 =
	     coarseFreq_currSample[47] ?
	       -coarseFreq_currSample[47:24] :
	       coarseFreq_currSample[47:24] ;
  assign x__h173128 =
	     coarseFreq_lastSample[47] ?
	       -coarseFreq_lastSample[47:24] :
	       coarseFreq_lastSample[47:24] ;
  assign x__h175447 =
	     (!x__h175776[47] &&
	      IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d596[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d596 ;
  assign x__h175776 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d582 :
	       IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d582 ;
  assign x__h175821 =
	     coarseFreq_currSample[23] ?
	       -coarseFreq_currSample[23:0] :
	       coarseFreq_currSample[23:0] ;
  assign x__h175840 =
	     coarseFreq_lastSample[23] ?
	       -coarseFreq_lastSample[23:0] :
	       coarseFreq_lastSample[23:0] ;
  assign x__h177842 = coarseFreq_accumError[23:0] + x__h177861 ;
  assign x__h177861 =
	     ((!x__h178191[35] &&
	       (x__h178191[23] || x__h178191[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h178191[35] &&
		  (!x__h178191[23] || ~x__h178191[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h178191[23:0])) +
	     ((!x__h180903[35] &&
	       (x__h180903[23] || x__h180903[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h180903[35] &&
		  (!x__h180903[23] || ~x__h180903[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h180903[23:0])) ;
  assign x__h178191 =
	     (!x__h178520[47] &&
	      IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d637[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_53_BIT_47_27_AND_NOT__ETC___d637 ;
  assign x__h178520 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d623 :
	       IF_coarseFreq_currSample_53_BIT_47_27_THEN_NEG_ETC___d623 ;
  assign x__h180903 =
	     (!x__h181232[47] &&
	      IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d675[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_53_BIT_23_74_AND_NOT__ETC___d675 ;
  assign x__h181232 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d661 :
	       IF_coarseFreq_currSample_53_BIT_23_74_THEN_NEG_ETC___d661 ;
  assign x__h186417 =
	     (!x__h186746[47] &&
	      IF_IF_coarseFreq_accumError_25_BIT_23_20_AND_N_ETC___d1124[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_coarseFreq_accumError_25_BIT_23_20_AND_N_ETC___d1124 ;
  assign x__h186746 =
	     IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1093[23] ?
	       -_651_MUL_IF_IF_coarseFreq_accumError_25_BIT_23__ETC___d1110 :
	       _651_MUL_IF_IF_coarseFreq_accumError_25_BIT_23__ETC___d1110 ;
  assign x__h187344 =
	     (!x__h187673[47] &&
	      IF_coarseFreq_accumError_25_BIT_23_20_THEN_0_C_ETC___d737[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_25_BIT_23_20_THEN_0_C_ETC___d737 ;
  assign x__h187673 =
	     coarseFreq_accumError[23] ?
	       { 12'd0, x__h194524, 12'd0 } :
	       -{ 12'd0, x__h194524, 12'd0 } ;
  assign x__h190199 =
	     (!x__h190528[47] &&
	      IF_coarseFreq_accumError_25_BIT_47_59_THEN_0_C_ETC___d776[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_25_BIT_47_59_THEN_0_C_ETC___d776 ;
  assign x__h190528 =
	     coarseFreq_accumError[47] ?
	       { 12'd0, x__h194505, 12'd0 } :
	       -{ 12'd0, x__h194505, 12'd0 } ;
  assign x__h192819 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1083 ;
  assign x__h192851 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1083 ;
  assign x__h192984 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d998 ;
  assign x__h193441 =
	     (!x__h193780[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1063[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1063 ;
  assign x__h193780 =
	     (ax2_i__h193802[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043[23] ||
	      !ax2_i__h193802[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1051 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1051 ;
  assign x__h193810 =
	     (!x__h194131[35] &&
	      (x__h194131[23] || x__h194131[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h194131[35] &&
		 (!x__h194131[23] || ~x__h194131[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h194131[23:12]) ;
  assign x__h194131 =
	     (!x__h194460[47] &&
	      IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d820[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_25_BIT_47_59_AND_NOT__ETC___d820 ;
  assign x__h194460 =
	     (coarseFreq_accumError[47] && !coarseFreq_accumError[23] ||
	      coarseFreq_accumError[23] && !coarseFreq_accumError[47]) ?
	       -IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d806 :
	       IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d806 ;
  assign x__h194505 =
	     coarseFreq_accumError[47] ?
	       -coarseFreq_accumError[47:24] :
	       coarseFreq_accumError[47:24] ;
  assign x__h194524 =
	     coarseFreq_accumError[23] ?
	       -coarseFreq_accumError[23:0] :
	       coarseFreq_accumError[23:0] ;
  assign x__h196858 =
	     (!x__h197187[47] &&
	      IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d888[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_25_BIT_47_59_THEN_NEG_ETC___d888 ;
  assign x__h197187 = x__h194505 * x__h194505 ;
  assign x__h199570 =
	     (!x__h199899[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1022[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1022 ;
  assign x__h199899 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1008 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d1008 ;
  assign x__h200236 =
	     (!x__h200565[47] &&
	      IF_coarseFreq_accumError_25_BIT_23_20_THEN_NEG_ETC___d855[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_25_BIT_23_20_THEN_NEG_ETC___d855 ;
  assign x__h200565 = x__h194524 * x__h194524 ;
  assign x__h202708 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875[23] ?
	       ((!x__h200236[35] &&
		 (x__h200236[23] || x__h200236[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h200236[35] &&
		    (!x__h200236[23] || ~x__h200236[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h200236[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d875 ;
  assign x__h204737 =
	     ax2_i__h193802[12] ?
	       -{ ax2_i__h193802, ax2_f__h193803 } :
	       { ax2_i__h193802, ax2_f__h193803 } ;
  assign x__h204756 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d1043 ;
  assign x__h207101 =
	     (!x__h207440[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d978[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d978 ;
  assign x__h207440 =
	     (ax2_i__h193802[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949[23] ||
	      !ax2_i__h193802[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d966 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d966 ;
  assign x__h213230 =
	     (!x__h213559[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d928[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d928 ;
  assign x__h213559 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d914 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_B_ETC___d914 ;
  assign x__h216358 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908[23] ?
	       ((!x__h196858[35] &&
		 (x__h196858[23] || x__h196858[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h196858[35] &&
		    (!x__h196858[23] || ~x__h196858[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h196858[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d908 ;
  assign x__h218406 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_25_BIT__ETC___d949 ;
  assign x__h261139 =
	     IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1106[11] ?
	       -IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1093 :
	       IF_coarseFreq_accumError_25_BIT_23_20_AND_NOT__ETC___d1093 ;
  assign x__h363197 =
	     ((!IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[35] &&
	       (IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[23] ||
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[35] &&
		  (!IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[23] ||
		   ~IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_SEL_ARR_coarseFreq_samples_90_BITS_4_ETC___d1187[23:0])) -
	     ((!x__h366263[35] &&
	       (x__h366263[23] || x__h366263[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h366263[35] &&
		  (!x__h366263[23] || ~x__h366263[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h366263[23:0])) ;
  assign x__h366263 =
	     (!x__h366592[47] &&
	      IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1231[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1231 ;
  assign x__h366592 =
	     (SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1217 :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1217 ;
  assign x__h366639 =
	     SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11] ?
	       -{ SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
		  fpart__h390934 } :
	       { SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436,
		 fpart__h390934 } ;
  assign x__h368658 =
	     ((!x__h368988[35] &&
	       (x__h368988[23] || x__h368988[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h368988[35] &&
		  (!x__h368988[23] || ~x__h368988[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h368988[23:0])) +
	     ((!x__h371703[35] &&
	       (x__h371703[23] || x__h371703[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h371703[35] &&
		  (!x__h371703[23] || ~x__h371703[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h371703[23:0])) ;
  assign x__h368988 =
	     (!x__h369317[47] &&
	      IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1270[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1270 ;
  assign x__h369317 =
	     (SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1256 :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1256 ;
  assign x__h369364 =
	     SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411[11] ?
	       -{ SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
		  fpart__h390158 } :
	       { SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411,
		 fpart__h390158 } ;
  assign x__h369383 =
	     coarseFreq_yFix[23] ? -coarseFreq_yFix : coarseFreq_yFix ;
  assign x__h371703 =
	     (!x__h372032[47] &&
	      IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1308[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1308 ;
  assign x__h372032 =
	     (SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1294 :
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_ETC___d1294 ;
  assign x__h372098 =
	     coarseFreq_xFix[23] ? -coarseFreq_xFix : coarseFreq_xFix ;
  assign x__h380150 =
	     coarseFreq_fsError[23] ?
	       -coarseFreq_fsError :
	       coarseFreq_fsError ;
  assign x__h383523 =
	     coarseFreq_cordic_x_[23] ?
	       -coarseFreq_cordic_x_ :
	       coarseFreq_cordic_x_ ;
  assign x__h386318 =
	     coarseFreq_cordic_y_[23] ?
	       -coarseFreq_cordic_y_ :
	       coarseFreq_cordic_y_ ;
  assign x__h390404 =
	     (SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484[12] &&
	      fpart__h390158 != 12'd0) ?
	       y_avValue_snd__h390338 :
	       fpart__h390158 ;
  assign x__h391174 =
	     (SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548[12] &&
	      fpart__h390934 != 12'd0) ?
	       y_avValue_snd__h391108 :
	       fpart__h390934 ;
  assign x__h56282 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 :
	       coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 ;
  assign x__h58646 =
	     (!x__h58975[47] &&
	      IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 ;
  assign x__h58975 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 ;
  assign x__h59030 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 :
	       coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 ;
  assign x__h61830 =
	     (!x__h62159[47] &&
	      IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 ;
  assign x__h62159 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 ;
  assign x__h62214 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 :
	       coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 ;
  assign x__h64575 =
	     (!x__h64904[47] &&
	      IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 ;
  assign x__h64904 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 ;
  assign x__h64959 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 :
	       coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 ;
  assign x__h68029 = coarseFreq_cordic_x_ - x__h69106 ;
  assign x__h68129 = coarseFreq_cordic_y_ + x__h69177 ;
  assign x__h68200 =
	     coarseFreq_cordic_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h69091 = coarseFreq_cordic_x_ + x__h69106 ;
  assign x__h69106 =
	     coarseFreq_cordic_y_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_y_[23]}} ;
  assign x__h69162 = coarseFreq_cordic_y_ - x__h69177 ;
  assign x__h69177 =
	     coarseFreq_cordic_x_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_x_[23]}} ;
  assign x__h69233 =
	     coarseFreq_cordic_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x_f__h263612 =
	     coarseFreq_fsError[11:0] & coarseFreq_limitError_inner_reg ;
  assign x_f__h388955 =
	     coarseFreq_xFix[11:0] & coarseFreq_limitXFix_inner_reg ;
  assign x_f__h389546 =
	     coarseFreq_yFix[11:0] & coarseFreq_limitYFix_inner_reg ;
  assign x_f__h69739 =
	     coarseFreq_cordic_x_[11:0] & coarseFreq_cordic_limitX_inner_reg ;
  assign x_f__h69777 =
	     coarseFreq_cordic_y_[11:0] & coarseFreq_cordic_limitY_inner_reg ;
  assign x_f__h69791 =
	     coarseFreq_cordic_z_[11:0] & coarseFreq_cordic_limitZ_inner_reg ;
  assign x_img_f__h167924 =
	     coarseFreq_currSample[11:0] & coarseFreq_limitCurrS_inner_reg ;
  assign x_img_f__h171915 =
	     coarseFreq_lastSample[11:0] & coarseFreq_limitLastS_inner_reg ;
  assign x_img_f__h184150 =
	     coarseFreq_accumError[11:0] & coarseFreq_limitAccumE_inner_reg ;
  assign x_img_f__h376213 =
	     fpart__h390934 & coarseFreq_limitCpxFix_inner_reg ;
  assign x_rel_f__h167517 =
	     coarseFreq_currSample[35:24] & coarseFreq_limitCurrS_inner_reg ;
  assign x_rel_f__h171502 =
	     coarseFreq_lastSample[35:24] & coarseFreq_limitLastS_inner_reg ;
  assign x_rel_f__h183713 =
	     coarseFreq_accumError[35:24] & coarseFreq_limitAccumE_inner_reg ;
  assign x_rel_f__h374798 =
	     fpart__h390158 & coarseFreq_limitCpxFix_inner_reg ;
  assign y__h390587 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1507[44:0] +
	     digit__h390441 ;
  assign y__h390676 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1516[44:0] +
	     digit__h390530 ;
  assign y__h390765 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1525[44:0] +
	     digit__h390619 ;
  assign y__h390854 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1534[44:0] +
	     digit__h390708 ;
  assign y__h391357 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1571[44:0] +
	     digit__h391211 ;
  assign y__h391446 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1580[44:0] +
	     digit__h391300 ;
  assign y__h391535 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1589[44:0] +
	     digit__h391389 ;
  assign y__h391624 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1598[44:0] +
	     digit__h391478 ;
  assign y_avValue_snd__h390338 = 12'd0 - fpart__h390158 ;
  assign y_avValue_snd__h391108 = 12'd0 - fpart__h390934 ;
  assign y_f__h169940 =
	     (x__h168985[11] &&
	      (x__h168985[47] || x__h168985[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h173957 =
	     (x__h173064[11] &&
	      (x__h173064[47] || x__h173064[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h176669 =
	     (x__h175776[11] &&
	      (x__h175776[47] || x__h175776[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h179413 =
	     (x__h178520[11] &&
	      (x__h178520[47] || x__h178520[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h182125 =
	     (x__h181232[11] &&
	      (x__h181232[47] || x__h181232[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h188622 =
	     (x__h187673[11] &&
	      (x__h187673[47] || x__h187673[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h191477 =
	     (x__h190528[11] &&
	      (x__h190528[47] || x__h190528[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h195353 =
	     (x__h194460[11] &&
	      (x__h194460[47] || x__h194460[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h198080 =
	     (x__h197187[11] &&
	      (x__h197187[47] || x__h197187[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h201458 =
	     (x__h200565[11] &&
	      (x__h200565[47] || x__h200565[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h203550 =
	     (x__h199899[11] &&
	      (x__h199899[47] || x__h199899[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h205460 =
	     (x__h193780[1] && (x__h193780[38] || x__h193780[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h217200 =
	     (x__h213559[11] &&
	      (x__h213559[47] || x__h213559[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h219110 =
	     (x__h207440[1] && (x__h207440[38] || x__h207440[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h261969 =
	     (x__h186746[11] &&
	      (x__h186746[47] || x__h186746[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h364773 =
	     (IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172[11] &&
	      (IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172[47] ||
	       IF_SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_ETC___d1172[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h367488 =
	     (x__h366592[11] &&
	      (x__h366592[47] || x__h366592[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h370213 =
	     (x__h369317[11] &&
	      (x__h369317[47] || x__h369317[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h372928 =
	     (x__h372032[11] &&
	      (x__h372032[47] || x__h372032[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h380980 =
	     (IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356[11] &&
	      (IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356[47] ||
	       IF_coarseFreq_fsError_147_BIT_23_351_THEN_2573_ETC___d1356[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h384365 =
	     (IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397[11] &&
	      (IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397[47] ||
	       IF_coarseFreq_cordic_x__9_BIT_23_392_THEN_NEG__ETC___d1397[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h387160 =
	     (IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435[11] &&
	      (IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435[47] ||
	       IF_coarseFreq_cordic_y__0_BIT_23_430_THEN_NEG__ETC___d1435[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h57127 =
	     (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[11] &&
	      (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] ||
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h59872 =
	     (x__h58975[11] && (x__h58975[47] || x__h58975[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h63056 =
	     (x__h62159[11] && (x__h62159[47] || x__h62159[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h65801 =
	     (x__h64904[11] && (x__h64904[47] || x__h64904[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h390158 = coarseFreq_samples[35:24];
      10'd1: fpart__h390158 = coarseFreq_samples_1[35:24];
      10'd2: fpart__h390158 = coarseFreq_samples_2[35:24];
      10'd3: fpart__h390158 = coarseFreq_samples_3[35:24];
      10'd4: fpart__h390158 = coarseFreq_samples_4[35:24];
      10'd5: fpart__h390158 = coarseFreq_samples_5[35:24];
      10'd6: fpart__h390158 = coarseFreq_samples_6[35:24];
      10'd7: fpart__h390158 = coarseFreq_samples_7[35:24];
      10'd8: fpart__h390158 = coarseFreq_samples_8[35:24];
      10'd9: fpart__h390158 = coarseFreq_samples_9[35:24];
      default: fpart__h390158 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h390934 = coarseFreq_samples[11:0];
      10'd1: fpart__h390934 = coarseFreq_samples_1[11:0];
      10'd2: fpart__h390934 = coarseFreq_samples_2[11:0];
      10'd3: fpart__h390934 = coarseFreq_samples_3[11:0];
      10'd4: fpart__h390934 = coarseFreq_samples_4[11:0];
      10'd5: fpart__h390934 = coarseFreq_samples_5[11:0];
      10'd6: fpart__h390934 = coarseFreq_samples_6[11:0];
      10'd7: fpart__h390934 = coarseFreq_samples_7[11:0];
      10'd8: fpart__h390934 = coarseFreq_samples_8[11:0];
      10'd9: fpart__h390934 = coarseFreq_samples_9[11:0];
      default: fpart__h390934 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_cordic_n)
  begin
    case (coarseFreq_cordic_n)
      4'd0: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3216;
      4'd1: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1899;
      4'd2: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1003;
      4'd3: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd509;
      4'd4: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd255;
      4'd5: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd127;
      4'd6: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd63;
      4'd7: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd31;
      4'd8: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd15;
      4'd9: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd7;
      4'd10: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3;
      4'd11: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd0;
      default: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples[47:36];
      10'd1:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_1[47:36];
      10'd2:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_2[47:36];
      10'd3:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_3[47:36];
      10'd4:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_4[47:36];
      10'd5:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_5[47:36];
      10'd6:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_6[47:36];
      10'd7:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_7[47:36];
      10'd8:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_8[47:36];
      10'd9:
	  SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
	      coarseFreq_samples_9[47:36];
      default: SEL_ARR_coarseFreq_samples_90_BITS_47_TO_36_91_ETC___d411 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or coarseFreq_samples_9)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples[23:12];
      10'd1:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_1[23:12];
      10'd2:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_2[23:12];
      10'd3:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_3[23:12];
      10'd4:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_4[23:12];
      10'd5:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_5[23:12];
      10'd6:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_6[23:12];
      10'd7:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_7[23:12];
      10'd8:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_8[23:12];
      10'd9:
	  SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
	      coarseFreq_samples_9[23:12];
      default: SEL_ARR_coarseFreq_samples_90_BITS_23_TO_12_25_ETC___d436 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_coarseErrorCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	coarseFreq_coarseErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	coarseFreq_cordic_atanCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	coarseFreq_cordic_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_limitAccumE_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitCpxFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitCurrS_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitLastS_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitXFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitYFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	coarseFreq_samples <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY 24'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (coarseFreq_accumError$EN)
	  coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_accumError$D_IN;
	if (coarseFreq_coarseErrorCalc$EN)
	  coarseFreq_coarseErrorCalc <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc$D_IN;
	if (coarseFreq_coarseErrorCalc_1_1$EN)
	  coarseFreq_coarseErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_1_1$D_IN;
	if (coarseFreq_coarseErrorCalc_2_1$EN)
	  coarseFreq_coarseErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_2_1$D_IN;
	if (coarseFreq_coarseErrorCalc_3_1$EN)
	  coarseFreq_coarseErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_3_1$D_IN;
	if (coarseFreq_coarseErrorCalc_4$EN)
	  coarseFreq_coarseErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_4$D_IN;
	if (coarseFreq_cordic_atanCalc$EN)
	  coarseFreq_cordic_atanCalc <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc$D_IN;
	if (coarseFreq_cordic_atanCalc_1_1$EN)
	  coarseFreq_cordic_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_1_1$D_IN;
	if (coarseFreq_cordic_atanCalc_2_1$EN)
	  coarseFreq_cordic_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_2_1$D_IN;
	if (coarseFreq_cordic_atanCalc_3_1$EN)
	  coarseFreq_cordic_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_3_1$D_IN;
	if (coarseFreq_cordic_atanCalc_4$EN)
	  coarseFreq_cordic_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_4$D_IN;
	if (coarseFreq_cordic_limitX_inner_reg$EN)
	  coarseFreq_cordic_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitX_inner_reg$D_IN;
	if (coarseFreq_cordic_limitY_inner_reg$EN)
	  coarseFreq_cordic_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitY_inner_reg$D_IN;
	if (coarseFreq_cordic_limitZ_inner_reg$EN)
	  coarseFreq_cordic_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitZ_inner_reg$D_IN;
	if (coarseFreq_cordic_n$EN)
	  coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_n$D_IN;
	if (coarseFreq_cordic_x_$EN)
	  coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_x_$D_IN;
	if (coarseFreq_cordic_y_$EN)
	  coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_y_$D_IN;
	if (coarseFreq_cordic_z_$EN)
	  coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_z_$D_IN;
	if (coarseFreq_currSample$EN)
	  coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_currSample$D_IN;
	if (coarseFreq_dummy$EN)
	  coarseFreq_dummy <= `BSV_ASSIGNMENT_DELAY coarseFreq_dummy$D_IN;
	if (coarseFreq_fsError$EN)
	  coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY coarseFreq_fsError$D_IN;
	if (coarseFreq_lastSample$EN)
	  coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_lastSample$D_IN;
	if (coarseFreq_limitAccumE_inner_reg$EN)
	  coarseFreq_limitAccumE_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitAccumE_inner_reg$D_IN;
	if (coarseFreq_limitCpxFix_inner_reg$EN)
	  coarseFreq_limitCpxFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitCpxFix_inner_reg$D_IN;
	if (coarseFreq_limitCurrS_inner_reg$EN)
	  coarseFreq_limitCurrS_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitCurrS_inner_reg$D_IN;
	if (coarseFreq_limitError_inner_reg$EN)
	  coarseFreq_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitError_inner_reg$D_IN;
	if (coarseFreq_limitLastS_inner_reg$EN)
	  coarseFreq_limitLastS_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitLastS_inner_reg$D_IN;
	if (coarseFreq_limitXFix_inner_reg$EN)
	  coarseFreq_limitXFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitXFix_inner_reg$D_IN;
	if (coarseFreq_limitYFix_inner_reg$EN)
	  coarseFreq_limitYFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitYFix_inner_reg$D_IN;
	if (coarseFreq_n$EN)
	  coarseFreq_n <= `BSV_ASSIGNMENT_DELAY coarseFreq_n$D_IN;
	if (coarseFreq_samples$EN)
	  coarseFreq_samples <= `BSV_ASSIGNMENT_DELAY coarseFreq_samples$D_IN;
	if (coarseFreq_samples_1$EN)
	  coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_1$D_IN;
	if (coarseFreq_samples_2$EN)
	  coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_2$D_IN;
	if (coarseFreq_samples_3$EN)
	  coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_3$D_IN;
	if (coarseFreq_samples_4$EN)
	  coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_4$D_IN;
	if (coarseFreq_samples_5$EN)
	  coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_5$D_IN;
	if (coarseFreq_samples_6$EN)
	  coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_6$D_IN;
	if (coarseFreq_samples_7$EN)
	  coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_7$D_IN;
	if (coarseFreq_samples_8$EN)
	  coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_8$D_IN;
	if (coarseFreq_samples_9$EN)
	  coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_9$D_IN;
	if (coarseFreq_xFix$EN)
	  coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_xFix$D_IN;
	if (coarseFreq_yFix$EN)
	  coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_yFix$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coarseFreq_accumError = 48'hAAAAAAAAAAAA;
    coarseFreq_coarseErrorCalc = 1'h0;
    coarseFreq_coarseErrorCalc_1_1 = 1'h0;
    coarseFreq_coarseErrorCalc_2_1 = 6'h2A;
    coarseFreq_coarseErrorCalc_3_1 = 1'h0;
    coarseFreq_coarseErrorCalc_4 = 1'h0;
    coarseFreq_cordic_atanCalc = 1'h0;
    coarseFreq_cordic_atanCalc_1_1 = 1'h0;
    coarseFreq_cordic_atanCalc_2_1 = 4'hA;
    coarseFreq_cordic_atanCalc_3_1 = 1'h0;
    coarseFreq_cordic_atanCalc_4 = 1'h0;
    coarseFreq_cordic_limitX_inner_reg = 12'hAAA;
    coarseFreq_cordic_limitY_inner_reg = 12'hAAA;
    coarseFreq_cordic_limitZ_inner_reg = 12'hAAA;
    coarseFreq_cordic_n = 4'hA;
    coarseFreq_cordic_x_ = 24'hAAAAAA;
    coarseFreq_cordic_y_ = 24'hAAAAAA;
    coarseFreq_cordic_z_ = 24'hAAAAAA;
    coarseFreq_currSample = 48'hAAAAAAAAAAAA;
    coarseFreq_dummy = 1'h0;
    coarseFreq_fsError = 24'hAAAAAA;
    coarseFreq_lastSample = 48'hAAAAAAAAAAAA;
    coarseFreq_limitAccumE_inner_reg = 12'hAAA;
    coarseFreq_limitCpxFix_inner_reg = 12'hAAA;
    coarseFreq_limitCurrS_inner_reg = 12'hAAA;
    coarseFreq_limitError_inner_reg = 12'hAAA;
    coarseFreq_limitLastS_inner_reg = 12'hAAA;
    coarseFreq_limitXFix_inner_reg = 12'hAAA;
    coarseFreq_limitYFix_inner_reg = 12'hAAA;
    coarseFreq_n = 10'h2AA;
    coarseFreq_samples = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_1 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_2 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_3 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_4 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_5 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_6 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_7 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_8 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_9 = 48'hAAAAAAAAAAAA;
    coarseFreq_xFix = 24'hAAAAAA;
    coarseFreq_yFix = 24'hAAAAAA;
    fV = 24'hAAAAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd8 &&
	  (WILL_FIRE_RL_action_l39c23 || WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 38, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l38c9] and\n  [RL_action_l39c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l39c23 &&
	  (WILL_FIRE_RL_action_l41c13 || state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 39, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l39c23] and\n  [RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c13 && state_mkFSMstate == 4'd11)
	$display("Error: \"Tb_tang.bsv\", line 41, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l41c13] and\n  [RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__631_AND_abort_wget__632_633_OR_sta_ETC___d1718 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 &&
	  (coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 74, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l74c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_cordic_atanCalc_2_1 == 4'd10 &&
	  coarseFreq_cordic_atanCalc_2_1 == 4'd11)
	$display("Error: \"../Cordic/Cordic.bsv\", line 86, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l86c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 55, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l55c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l56c12,\n  RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 56, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l56c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 57, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l57c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 58, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l58c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 59, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l59c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 67, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l67c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 61, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l61c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 73, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9] and\n  [RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 54, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l54c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l55c11,\n  RL_coarseFreq_cordic_atanCalc_action_l56c12,\n  RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2 ||
	   state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_l30c27, RL_action_l31c27, RL_action_l32c27, RL_action_l33c27,\n  RL_action_l34c27, RL_action_l35c27, RL_action_l36c27,\n  RL_action_f_init_l38c9, RL_action_l39c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd1 &&
	  (state_mkFSMstate == 4'd2 || state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 30, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l30c27] and\n  [RL_action_l31c27, RL_action_l32c27, RL_action_l33c27, RL_action_l34c27,\n  RL_action_l35c27, RL_action_l36c27, RL_action_f_init_l38c9,\n  RL_action_l39c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd2 &&
	  (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 31, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l31c27] and\n  [RL_action_l32c27, RL_action_l33c27, RL_action_l34c27, RL_action_l35c27,\n  RL_action_l36c27, RL_action_f_init_l38c9, RL_action_l39c23,\n  RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd3 &&
	  (state_mkFSMstate == 4'd4 || state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 32, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l32c27] and\n  [RL_action_l33c27, RL_action_l34c27, RL_action_l35c27, RL_action_l36c27,\n  RL_action_f_init_l38c9, RL_action_l39c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd4 &&
	  (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 33, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c27] and\n  [RL_action_l34c27, RL_action_l35c27, RL_action_l36c27,\n  RL_action_f_init_l38c9, RL_action_l39c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd6 &&
	  (state_mkFSMstate == 4'd7 || state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 35, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l35c27] and\n  [RL_action_l36c27, RL_action_f_init_l38c9, RL_action_l39c23,\n  RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd5 &&
	  (state_mkFSMstate == 4'd6 || state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 34, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l34c27] and\n  [RL_action_l35c27, RL_action_l36c27, RL_action_f_init_l38c9,\n  RL_action_l39c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd7 &&
	  (state_mkFSMstate == 4'd8 || WILL_FIRE_RL_action_l39c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 36, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l36c27] and\n  [RL_action_f_init_l38c9, RL_action_l39c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484[12] &&
	  fpart__h390158 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484[12] &&
	  fpart__h390158 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484[12] ||
	   fpart__h390158 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_90_BITS_47_TO__ETC___d1484));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390374);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390441);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390530);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390619);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390708);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h390797);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548[12] &&
	  fpart__h390934 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548[12] &&
	  fpart__h390934 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548[12] ||
	   fpart__h390934 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_90_BITS_23_TO__ETC___d1548));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391144);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391211);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391300);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391389);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391478);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h391567);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd1 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 96, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l97c20,\n  RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd2 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 97, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l97c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd3 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 98, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l98c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd4 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 99, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 100, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l100c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd7 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 99, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 101, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l101c22] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 103, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 104, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l104c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd10 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 111, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l111c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd11 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 112, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l112c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd12 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 119, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l119c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd13 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 120, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l120c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd15 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 123, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l123c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd14 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 121, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l121c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd16 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 124, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l124c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd17 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 125, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l125c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd18 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 133, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l133c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 134, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l134c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 103, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 137, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l137c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd22 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 138, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l138c16] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 147, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l147c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd23 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 146, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 148, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l148c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 149, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l149c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 150, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l150c19] and\n  [RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 151, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l151c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd30 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 158, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l158c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd29 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 157, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l157c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  coarseFreq_coarseErrorCalc_2_1 == 6'd32)
	$display("Error: \"CoarseFreq.bsv\", line 159, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l159c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 95, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l95c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_l97c20,\n  RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

