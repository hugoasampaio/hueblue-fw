//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 14:07:01 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire coarseFreq_coarseErrorCalc_1$whas,
       coarseFreq_coarseErrorCalc_3$whas,
       coarseFreq_cordic_atanCalc_1$whas,
       coarseFreq_cordic_atanCalc_3$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register coarseFreq_accumError
  reg [47 : 0] coarseFreq_accumError;
  reg [47 : 0] coarseFreq_accumError$D_IN;
  wire coarseFreq_accumError$EN;

  // register coarseFreq_coarseErrorCalc
  reg coarseFreq_coarseErrorCalc;
  wire coarseFreq_coarseErrorCalc$D_IN, coarseFreq_coarseErrorCalc$EN;

  // register coarseFreq_coarseErrorCalc_1_1
  reg coarseFreq_coarseErrorCalc_1_1;
  wire coarseFreq_coarseErrorCalc_1_1$D_IN, coarseFreq_coarseErrorCalc_1_1$EN;

  // register coarseFreq_coarseErrorCalc_2_1
  reg [5 : 0] coarseFreq_coarseErrorCalc_2_1;
  reg [5 : 0] coarseFreq_coarseErrorCalc_2_1$D_IN;
  wire coarseFreq_coarseErrorCalc_2_1$EN;

  // register coarseFreq_coarseErrorCalc_3_1
  reg coarseFreq_coarseErrorCalc_3_1;
  wire coarseFreq_coarseErrorCalc_3_1$D_IN, coarseFreq_coarseErrorCalc_3_1$EN;

  // register coarseFreq_coarseErrorCalc_4
  reg coarseFreq_coarseErrorCalc_4;
  wire coarseFreq_coarseErrorCalc_4$D_IN, coarseFreq_coarseErrorCalc_4$EN;

  // register coarseFreq_cordic_atanCalc
  reg coarseFreq_cordic_atanCalc;
  wire coarseFreq_cordic_atanCalc$D_IN, coarseFreq_cordic_atanCalc$EN;

  // register coarseFreq_cordic_atanCalc_1_1
  reg coarseFreq_cordic_atanCalc_1_1;
  wire coarseFreq_cordic_atanCalc_1_1$D_IN, coarseFreq_cordic_atanCalc_1_1$EN;

  // register coarseFreq_cordic_atanCalc_2_1
  reg [3 : 0] coarseFreq_cordic_atanCalc_2_1;
  reg [3 : 0] coarseFreq_cordic_atanCalc_2_1$D_IN;
  wire coarseFreq_cordic_atanCalc_2_1$EN;

  // register coarseFreq_cordic_atanCalc_3_1
  reg coarseFreq_cordic_atanCalc_3_1;
  wire coarseFreq_cordic_atanCalc_3_1$D_IN, coarseFreq_cordic_atanCalc_3_1$EN;

  // register coarseFreq_cordic_atanCalc_4
  reg coarseFreq_cordic_atanCalc_4;
  wire coarseFreq_cordic_atanCalc_4$D_IN, coarseFreq_cordic_atanCalc_4$EN;

  // register coarseFreq_cordic_limitX_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitX_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitX_inner_reg$D_IN;
  wire coarseFreq_cordic_limitX_inner_reg$EN;

  // register coarseFreq_cordic_limitY_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitY_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitY_inner_reg$D_IN;
  wire coarseFreq_cordic_limitY_inner_reg$EN;

  // register coarseFreq_cordic_limitZ_inner_reg
  reg [11 : 0] coarseFreq_cordic_limitZ_inner_reg;
  wire [11 : 0] coarseFreq_cordic_limitZ_inner_reg$D_IN;
  wire coarseFreq_cordic_limitZ_inner_reg$EN;

  // register coarseFreq_cordic_n
  reg [3 : 0] coarseFreq_cordic_n;
  wire [3 : 0] coarseFreq_cordic_n$D_IN;
  wire coarseFreq_cordic_n$EN;

  // register coarseFreq_cordic_x_
  reg [23 : 0] coarseFreq_cordic_x_;
  reg [23 : 0] coarseFreq_cordic_x_$D_IN;
  wire coarseFreq_cordic_x_$EN;

  // register coarseFreq_cordic_y_
  reg [23 : 0] coarseFreq_cordic_y_;
  reg [23 : 0] coarseFreq_cordic_y_$D_IN;
  wire coarseFreq_cordic_y_$EN;

  // register coarseFreq_cordic_z_
  reg [23 : 0] coarseFreq_cordic_z_;
  reg [23 : 0] coarseFreq_cordic_z_$D_IN;
  wire coarseFreq_cordic_z_$EN;

  // register coarseFreq_currSample
  reg [47 : 0] coarseFreq_currSample;
  reg [47 : 0] coarseFreq_currSample$D_IN;
  wire coarseFreq_currSample$EN;

  // register coarseFreq_dummy
  reg coarseFreq_dummy;
  wire coarseFreq_dummy$D_IN, coarseFreq_dummy$EN;

  // register coarseFreq_fsError
  reg [23 : 0] coarseFreq_fsError;
  reg [23 : 0] coarseFreq_fsError$D_IN;
  wire coarseFreq_fsError$EN;

  // register coarseFreq_lastSample
  reg [47 : 0] coarseFreq_lastSample;
  reg [47 : 0] coarseFreq_lastSample$D_IN;
  wire coarseFreq_lastSample$EN;

  // register coarseFreq_limitAccumE_inner_reg
  reg [11 : 0] coarseFreq_limitAccumE_inner_reg;
  wire [11 : 0] coarseFreq_limitAccumE_inner_reg$D_IN;
  wire coarseFreq_limitAccumE_inner_reg$EN;

  // register coarseFreq_limitCpxFix_inner_reg
  reg [11 : 0] coarseFreq_limitCpxFix_inner_reg;
  wire [11 : 0] coarseFreq_limitCpxFix_inner_reg$D_IN;
  wire coarseFreq_limitCpxFix_inner_reg$EN;

  // register coarseFreq_limitCurrS_inner_reg
  reg [11 : 0] coarseFreq_limitCurrS_inner_reg;
  wire [11 : 0] coarseFreq_limitCurrS_inner_reg$D_IN;
  wire coarseFreq_limitCurrS_inner_reg$EN;

  // register coarseFreq_limitError_inner_reg
  reg [11 : 0] coarseFreq_limitError_inner_reg;
  wire [11 : 0] coarseFreq_limitError_inner_reg$D_IN;
  wire coarseFreq_limitError_inner_reg$EN;

  // register coarseFreq_limitLastS_inner_reg
  reg [11 : 0] coarseFreq_limitLastS_inner_reg;
  wire [11 : 0] coarseFreq_limitLastS_inner_reg$D_IN;
  wire coarseFreq_limitLastS_inner_reg$EN;

  // register coarseFreq_limitXFix_inner_reg
  reg [11 : 0] coarseFreq_limitXFix_inner_reg;
  wire [11 : 0] coarseFreq_limitXFix_inner_reg$D_IN;
  wire coarseFreq_limitXFix_inner_reg$EN;

  // register coarseFreq_limitYFix_inner_reg
  reg [11 : 0] coarseFreq_limitYFix_inner_reg;
  wire [11 : 0] coarseFreq_limitYFix_inner_reg$D_IN;
  wire coarseFreq_limitYFix_inner_reg$EN;

  // register coarseFreq_n
  reg [9 : 0] coarseFreq_n;
  wire [9 : 0] coarseFreq_n$D_IN;
  wire coarseFreq_n$EN;

  // register coarseFreq_samples
  reg [47 : 0] coarseFreq_samples;
  reg [47 : 0] coarseFreq_samples$D_IN;
  wire coarseFreq_samples$EN;

  // register coarseFreq_samples_1
  reg [47 : 0] coarseFreq_samples_1;
  reg [47 : 0] coarseFreq_samples_1$D_IN;
  wire coarseFreq_samples_1$EN;

  // register coarseFreq_samples_10
  reg [47 : 0] coarseFreq_samples_10;
  reg [47 : 0] coarseFreq_samples_10$D_IN;
  wire coarseFreq_samples_10$EN;

  // register coarseFreq_samples_11
  reg [47 : 0] coarseFreq_samples_11;
  reg [47 : 0] coarseFreq_samples_11$D_IN;
  wire coarseFreq_samples_11$EN;

  // register coarseFreq_samples_12
  reg [47 : 0] coarseFreq_samples_12;
  reg [47 : 0] coarseFreq_samples_12$D_IN;
  wire coarseFreq_samples_12$EN;

  // register coarseFreq_samples_13
  reg [47 : 0] coarseFreq_samples_13;
  reg [47 : 0] coarseFreq_samples_13$D_IN;
  wire coarseFreq_samples_13$EN;

  // register coarseFreq_samples_14
  reg [47 : 0] coarseFreq_samples_14;
  reg [47 : 0] coarseFreq_samples_14$D_IN;
  wire coarseFreq_samples_14$EN;

  // register coarseFreq_samples_15
  reg [47 : 0] coarseFreq_samples_15;
  reg [47 : 0] coarseFreq_samples_15$D_IN;
  wire coarseFreq_samples_15$EN;

  // register coarseFreq_samples_16
  reg [47 : 0] coarseFreq_samples_16;
  reg [47 : 0] coarseFreq_samples_16$D_IN;
  wire coarseFreq_samples_16$EN;

  // register coarseFreq_samples_17
  reg [47 : 0] coarseFreq_samples_17;
  reg [47 : 0] coarseFreq_samples_17$D_IN;
  wire coarseFreq_samples_17$EN;

  // register coarseFreq_samples_18
  reg [47 : 0] coarseFreq_samples_18;
  reg [47 : 0] coarseFreq_samples_18$D_IN;
  wire coarseFreq_samples_18$EN;

  // register coarseFreq_samples_19
  reg [47 : 0] coarseFreq_samples_19;
  reg [47 : 0] coarseFreq_samples_19$D_IN;
  wire coarseFreq_samples_19$EN;

  // register coarseFreq_samples_2
  reg [47 : 0] coarseFreq_samples_2;
  reg [47 : 0] coarseFreq_samples_2$D_IN;
  wire coarseFreq_samples_2$EN;

  // register coarseFreq_samples_3
  reg [47 : 0] coarseFreq_samples_3;
  reg [47 : 0] coarseFreq_samples_3$D_IN;
  wire coarseFreq_samples_3$EN;

  // register coarseFreq_samples_4
  reg [47 : 0] coarseFreq_samples_4;
  reg [47 : 0] coarseFreq_samples_4$D_IN;
  wire coarseFreq_samples_4$EN;

  // register coarseFreq_samples_5
  reg [47 : 0] coarseFreq_samples_5;
  reg [47 : 0] coarseFreq_samples_5$D_IN;
  wire coarseFreq_samples_5$EN;

  // register coarseFreq_samples_6
  reg [47 : 0] coarseFreq_samples_6;
  reg [47 : 0] coarseFreq_samples_6$D_IN;
  wire coarseFreq_samples_6$EN;

  // register coarseFreq_samples_7
  reg [47 : 0] coarseFreq_samples_7;
  reg [47 : 0] coarseFreq_samples_7$D_IN;
  wire coarseFreq_samples_7$EN;

  // register coarseFreq_samples_8
  reg [47 : 0] coarseFreq_samples_8;
  reg [47 : 0] coarseFreq_samples_8$D_IN;
  wire coarseFreq_samples_8$EN;

  // register coarseFreq_samples_9
  reg [47 : 0] coarseFreq_samples_9;
  reg [47 : 0] coarseFreq_samples_9$D_IN;
  wire coarseFreq_samples_9$EN;

  // register coarseFreq_xFix
  reg [23 : 0] coarseFreq_xFix;
  wire [23 : 0] coarseFreq_xFix$D_IN;
  wire coarseFreq_xFix$EN;

  // register coarseFreq_yFix
  reg [23 : 0] coarseFreq_yFix;
  wire [23 : 0] coarseFreq_yFix$D_IN;
  wire coarseFreq_yFix$EN;

  // register fV
  reg [23 : 0] fV;
  wire [23 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule coarseFreq_cordic_ix
  wire [23 : 0] coarseFreq_cordic_ix$D_IN, coarseFreq_cordic_ix$D_OUT;
  wire coarseFreq_cordic_ix$CLR,
       coarseFreq_cordic_ix$DEQ,
       coarseFreq_cordic_ix$EMPTY_N,
       coarseFreq_cordic_ix$ENQ,
       coarseFreq_cordic_ix$FULL_N;

  // ports of submodule coarseFreq_cordic_iy
  wire [23 : 0] coarseFreq_cordic_iy$D_IN, coarseFreq_cordic_iy$D_OUT;
  wire coarseFreq_cordic_iy$CLR,
       coarseFreq_cordic_iy$DEQ,
       coarseFreq_cordic_iy$EMPTY_N,
       coarseFreq_cordic_iy$ENQ,
       coarseFreq_cordic_iy$FULL_N;

  // ports of submodule coarseFreq_cordic_iz
  wire [23 : 0] coarseFreq_cordic_iz$D_IN, coarseFreq_cordic_iz$D_OUT;
  wire coarseFreq_cordic_iz$CLR,
       coarseFreq_cordic_iz$DEQ,
       coarseFreq_cordic_iz$EMPTY_N,
       coarseFreq_cordic_iz$ENQ,
       coarseFreq_cordic_iz$FULL_N;

  // ports of submodule coarseFreq_newSample
  wire [47 : 0] coarseFreq_newSample$D_IN, coarseFreq_newSample$D_OUT;
  wire coarseFreq_newSample$CLR,
       coarseFreq_newSample$DEQ,
       coarseFreq_newSample$EMPTY_N,
       coarseFreq_newSample$ENQ,
       coarseFreq_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l27c11,
       WILL_FIRE_RL_action_l36c23,
       WILL_FIRE_RL_action_l38c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l26c17,
       WILL_FIRE_RL_idle_l26c17_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_coarseFreq_accumError$write_1__VAL_1,
		MUX_coarseFreq_accumError$write_1__VAL_2,
		MUX_coarseFreq_accumError$write_1__VAL_3,
		MUX_coarseFreq_currSample$write_1__VAL_1,
		MUX_coarseFreq_currSample$write_1__VAL_2,
		MUX_coarseFreq_currSample$write_1__VAL_3,
		MUX_coarseFreq_lastSample$write_1__VAL_2,
		MUX_coarseFreq_lastSample$write_1__VAL_3,
		MUX_coarseFreq_lastSample$write_1__VAL_4,
		MUX_coarseFreq_samples$write_1__VAL_3,
		MUX_coarseFreq_samples$write_1__VAL_4,
		MUX_coarseFreq_samples$write_1__VAL_5;
  wire [23 : 0] MUX_coarseFreq_cordic_x_$write_1__VAL_2,
		MUX_coarseFreq_cordic_x_$write_1__VAL_3,
		MUX_coarseFreq_cordic_x_$write_1__VAL_4,
		MUX_coarseFreq_cordic_x_$write_1__VAL_5,
		MUX_coarseFreq_cordic_y_$write_1__VAL_2,
		MUX_coarseFreq_cordic_y_$write_1__VAL_3,
		MUX_coarseFreq_cordic_y_$write_1__VAL_4,
		MUX_coarseFreq_cordic_y_$write_1__VAL_5,
		MUX_coarseFreq_cordic_z_$write_1__VAL_1,
		MUX_coarseFreq_cordic_z_$write_1__VAL_2,
		MUX_coarseFreq_cordic_z_$write_1__VAL_4,
		MUX_coarseFreq_cordic_z_$write_1__VAL_5,
		MUX_coarseFreq_fsError$write_1__VAL_1,
		MUX_coarseFreq_fsError$write_1__VAL_2,
		MUX_coarseFreq_xFix$write_1__VAL_1,
		MUX_coarseFreq_xFix$write_1__VAL_2,
		MUX_coarseFreq_yFix$write_1__VAL_1,
		MUX_coarseFreq_yFix$write_1__VAL_2;
  wire [9 : 0] MUX_coarseFreq_n$write_1__VAL_1, MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_coarseFreq_cordic_n$write_1__VAL_1;
  wire MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1,
       MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1,
       MUX_coarseFreq_n$write_1__SEL_1,
       MUX_coarseFreq_samples$write_1__SEL_1,
       MUX_coarseFreq_samples$write_1__SEL_2,
       MUX_coarseFreq_samples$write_1__SEL_3,
       MUX_coarseFreq_samples$write_1__SEL_4,
       MUX_coarseFreq_samples$write_1__SEL_5,
       MUX_coarseFreq_samples_1$write_1__SEL_1,
       MUX_coarseFreq_samples_1$write_1__SEL_2,
       MUX_coarseFreq_samples_1$write_1__SEL_3,
       MUX_coarseFreq_samples_1$write_1__SEL_4,
       MUX_coarseFreq_samples_1$write_1__SEL_5,
       MUX_coarseFreq_samples_10$write_1__SEL_1,
       MUX_coarseFreq_samples_10$write_1__SEL_2,
       MUX_coarseFreq_samples_10$write_1__SEL_3,
       MUX_coarseFreq_samples_10$write_1__SEL_4,
       MUX_coarseFreq_samples_10$write_1__SEL_5,
       MUX_coarseFreq_samples_11$write_1__SEL_1,
       MUX_coarseFreq_samples_11$write_1__SEL_2,
       MUX_coarseFreq_samples_11$write_1__SEL_3,
       MUX_coarseFreq_samples_11$write_1__SEL_4,
       MUX_coarseFreq_samples_11$write_1__SEL_5,
       MUX_coarseFreq_samples_12$write_1__SEL_1,
       MUX_coarseFreq_samples_12$write_1__SEL_2,
       MUX_coarseFreq_samples_12$write_1__SEL_3,
       MUX_coarseFreq_samples_12$write_1__SEL_4,
       MUX_coarseFreq_samples_12$write_1__SEL_5,
       MUX_coarseFreq_samples_13$write_1__SEL_1,
       MUX_coarseFreq_samples_13$write_1__SEL_2,
       MUX_coarseFreq_samples_13$write_1__SEL_3,
       MUX_coarseFreq_samples_13$write_1__SEL_4,
       MUX_coarseFreq_samples_13$write_1__SEL_5,
       MUX_coarseFreq_samples_14$write_1__SEL_1,
       MUX_coarseFreq_samples_14$write_1__SEL_2,
       MUX_coarseFreq_samples_14$write_1__SEL_3,
       MUX_coarseFreq_samples_14$write_1__SEL_4,
       MUX_coarseFreq_samples_14$write_1__SEL_5,
       MUX_coarseFreq_samples_15$write_1__SEL_1,
       MUX_coarseFreq_samples_15$write_1__SEL_2,
       MUX_coarseFreq_samples_15$write_1__SEL_3,
       MUX_coarseFreq_samples_15$write_1__SEL_4,
       MUX_coarseFreq_samples_15$write_1__SEL_5,
       MUX_coarseFreq_samples_16$write_1__SEL_1,
       MUX_coarseFreq_samples_16$write_1__SEL_2,
       MUX_coarseFreq_samples_16$write_1__SEL_3,
       MUX_coarseFreq_samples_16$write_1__SEL_4,
       MUX_coarseFreq_samples_16$write_1__SEL_5,
       MUX_coarseFreq_samples_17$write_1__SEL_1,
       MUX_coarseFreq_samples_17$write_1__SEL_2,
       MUX_coarseFreq_samples_17$write_1__SEL_3,
       MUX_coarseFreq_samples_17$write_1__SEL_4,
       MUX_coarseFreq_samples_17$write_1__SEL_5,
       MUX_coarseFreq_samples_18$write_1__SEL_1,
       MUX_coarseFreq_samples_18$write_1__SEL_2,
       MUX_coarseFreq_samples_18$write_1__SEL_3,
       MUX_coarseFreq_samples_18$write_1__SEL_4,
       MUX_coarseFreq_samples_18$write_1__SEL_5,
       MUX_coarseFreq_samples_19$write_1__SEL_1,
       MUX_coarseFreq_samples_19$write_1__SEL_2,
       MUX_coarseFreq_samples_19$write_1__SEL_3,
       MUX_coarseFreq_samples_19$write_1__SEL_4,
       MUX_coarseFreq_samples_19$write_1__SEL_5,
       MUX_coarseFreq_samples_2$write_1__SEL_1,
       MUX_coarseFreq_samples_2$write_1__SEL_2,
       MUX_coarseFreq_samples_2$write_1__SEL_3,
       MUX_coarseFreq_samples_2$write_1__SEL_4,
       MUX_coarseFreq_samples_2$write_1__SEL_5,
       MUX_coarseFreq_samples_3$write_1__SEL_1,
       MUX_coarseFreq_samples_3$write_1__SEL_2,
       MUX_coarseFreq_samples_3$write_1__SEL_3,
       MUX_coarseFreq_samples_3$write_1__SEL_4,
       MUX_coarseFreq_samples_3$write_1__SEL_5,
       MUX_coarseFreq_samples_4$write_1__SEL_1,
       MUX_coarseFreq_samples_4$write_1__SEL_2,
       MUX_coarseFreq_samples_4$write_1__SEL_3,
       MUX_coarseFreq_samples_4$write_1__SEL_4,
       MUX_coarseFreq_samples_4$write_1__SEL_5,
       MUX_coarseFreq_samples_5$write_1__SEL_1,
       MUX_coarseFreq_samples_5$write_1__SEL_2,
       MUX_coarseFreq_samples_5$write_1__SEL_3,
       MUX_coarseFreq_samples_5$write_1__SEL_4,
       MUX_coarseFreq_samples_5$write_1__SEL_5,
       MUX_coarseFreq_samples_6$write_1__SEL_1,
       MUX_coarseFreq_samples_6$write_1__SEL_2,
       MUX_coarseFreq_samples_6$write_1__SEL_3,
       MUX_coarseFreq_samples_6$write_1__SEL_4,
       MUX_coarseFreq_samples_6$write_1__SEL_5,
       MUX_coarseFreq_samples_7$write_1__SEL_1,
       MUX_coarseFreq_samples_7$write_1__SEL_2,
       MUX_coarseFreq_samples_7$write_1__SEL_3,
       MUX_coarseFreq_samples_7$write_1__SEL_4,
       MUX_coarseFreq_samples_7$write_1__SEL_5,
       MUX_coarseFreq_samples_8$write_1__SEL_1,
       MUX_coarseFreq_samples_8$write_1__SEL_2,
       MUX_coarseFreq_samples_8$write_1__SEL_3,
       MUX_coarseFreq_samples_8$write_1__SEL_4,
       MUX_coarseFreq_samples_8$write_1__SEL_5,
       MUX_coarseFreq_samples_9$write_1__SEL_1,
       MUX_coarseFreq_samples_9$write_1__SEL_2,
       MUX_coarseFreq_samples_9$write_1__SEL_3,
       MUX_coarseFreq_samples_9$write_1__SEL_4,
       MUX_coarseFreq_samples_9$write_1__SEL_5,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1,
	       SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
	       SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
	       fpart__h504208,
	       fpart__h504994;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1559,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1562,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1570,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1579,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1588,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1597,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1623,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1626,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1634,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1643,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1652,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1661,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1565,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1629,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1574,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1638,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1583,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1647,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1592,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1656,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1601,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1665;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1066,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d972,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1275,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1352,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1228,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1314,
		IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d864,
		IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1453,
		IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172,
		IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1491,
		IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124,
		IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d641,
		IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d720,
		IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d598,
		IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d682,
		IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414,
		_25734_MUL_IF_coarseFreq_fsError_205_BIT_23_409_ETC___d1412,
		_651_MUL_IF_IF_coarseFreq_accumError_84_BIT_23__ETC___d1168,
		x__h170345,
		x__h174424,
		x__h177136,
		x__h179880,
		x__h182592,
		x__h188196,
		x__h189123,
		x__h191978,
		x__h195910,
		x__h198637,
		x__h201349,
		x__h202015,
		x__h215009,
		x__h477622,
		x__h480347,
		x__h483062,
		x__h59705,
		x__h62889,
		x__h65634;
  wire [44 : 0] digit__h504434,
		digit__h504501,
		digit__h504590,
		digit__h504679,
		digit__h504768,
		digit__h504857,
		digit__h505214,
		digit__h505281,
		digit__h505370,
		digit__h505459,
		digit__h505548,
		digit__h505637,
		tx04499_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2,
		tx04588_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3,
		tx04677_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4,
		tx04766_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5,
		tx04855_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6,
		tx05279_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7,
		tx05368_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8,
		tx05457_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9,
		tx05546_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10,
		tx05635_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11,
		tx__h504499,
		tx__h504588,
		tx__h504677,
		tx__h504766,
		tx__h504855,
		tx__h505279,
		tx__h505368,
		tx__h505457,
		tx__h505546,
		tx__h505635,
		y__h504647,
		y__h504736,
		y__h504825,
		y__h504914,
		y__h505427,
		y__h505516,
		y__h505605,
		y__h505694;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1024,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1109,
		x__h195230,
		x__h206187,
		x__h208890;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1036,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1121,
		x__h194891,
		x__h208551;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1080,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d986,
		IF_IF_coarseFreq_accumError_84_BIT_23_78_AND_N_ETC___d1182,
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245,
		IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470,
		IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102,
		IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508,
		IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1289,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1366,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1242,
		IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1328,
		IF_coarseFreq_accumError_84_BIT_23_78_THEN_0_C_ETC___d795,
		IF_coarseFreq_accumError_84_BIT_23_78_THEN_NEG_ETC___d913,
		IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d878,
		IF_coarseFreq_accumError_84_BIT_47_17_THEN_0_C_ETC___d834,
		IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d946,
		IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1467,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186,
		IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1505,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138,
		IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d655,
		IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d734,
		IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d612,
		IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d696,
		IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1426,
		IF_coarseFreq_lastSample_27_BIT_23_29_THEN_0_C_ETC___d547,
		x__h170016,
		x__h174095,
		x__h176807,
		x__h179551,
		x__h182263,
		x__h187867,
		x__h188794,
		x__h191649,
		x__h195581,
		x__h198308,
		x__h201020,
		x__h201686,
		x__h214680,
		x__h477293,
		x__h480018,
		x__h482733,
		x__h59376,
		x__h62560,
		x__h65305;
  wire [25 : 0] ax2_f__h195253;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1056,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1141,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966,
		IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1149,
		IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1151,
		IF_coarseFreq_accumError_84_BIT_23_78_THEN_IF__ETC___d816,
		IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1150,
		IF_coarseFreq_accumError_84_BIT_47_17_THEN_IF__ETC___d855,
		_0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1057,
		ax1_f__h195258,
		coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81,
		coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168,
		coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207,
		coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120,
		x__h173732,
		x__h173765,
		x__h174469,
		x__h174488,
		x__h177181,
		x__h177200,
		x__h179202,
		x__h179221,
		x__h194269,
		x__h194301,
		x__h194434,
		x__h195955,
		x__h195974,
		x__h204158,
		x__h206206,
		x__h217808,
		x__h219856,
		x__h262589,
		x__h474217,
		x__h477669,
		x__h479688,
		x__h480394,
		x__h480413,
		x__h483128,
		x__h494200,
		x__h497573,
		x__h500368,
		x__h57012,
		x__h59760,
		x__h62944,
		x__h65689,
		x__h68759,
		x__h68859,
		x__h68930,
		x__h69821,
		x__h69836,
		x__h69892,
		x__h69907,
		x__h69963;
  wire [12 : 0] SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606,
		SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542,
		ax2_i__h195252;
  wire [11 : 0] IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1162,
		IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1164,
		IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1163,
		res_f__h197955,
		res_i__h208082,
		x__h195260,
		x__h504464,
		x__h505244,
		x_f__h265062,
		x_f__h503005,
		x_f__h503596,
		x_f__h70469,
		x_f__h70507,
		x_f__h70521,
		x_img_f__h169284,
		x_img_f__h173275,
		x_img_f__h185510,
		x_img_f__h488813,
		x_rel_f__h168877,
		x_rel_f__h172862,
		x_rel_f__h185073,
		x_rel_f__h485908,
		y_avValue_snd__h504398,
		y_avValue_snd__h505178,
		y_f__h171300,
		y_f__h175317,
		y_f__h178029,
		y_f__h180773,
		y_f__h183485,
		y_f__h190072,
		y_f__h192927,
		y_f__h196803,
		y_f__h199530,
		y_f__h202908,
		y_f__h205000,
		y_f__h206910,
		y_f__h218650,
		y_f__h220560,
		y_f__h263419,
		y_f__h475803,
		y_f__h478518,
		y_f__h481243,
		y_f__h483958,
		y_f__h495030,
		y_f__h498415,
		y_f__h501210,
		y_f__h57857,
		y_f__h60602,
		y_f__h63786,
		y_f__h66531;
  wire NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857,
       NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059,
       abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776,
       coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1681,
       coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300,
       coarseFreq_cordic_n_8_ULT_14___d39,
       coarseFreq_cordic_z__1_SLE_0___d256,
       coarseFreq_cordic_z__1_SLE_3216___d72,
       coarseFreq_cordic_z__1_SLT_3216___d160,
       coarseFreq_n_38_ULT_20___d339,
       n_721_ULT_20___d1722;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule coarseFreq_cordic_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_ix(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_ix$D_IN),
							       .ENQ(coarseFreq_cordic_ix$ENQ),
							       .DEQ(coarseFreq_cordic_ix$DEQ),
							       .CLR(coarseFreq_cordic_ix$CLR),
							       .D_OUT(coarseFreq_cordic_ix$D_OUT),
							       .FULL_N(coarseFreq_cordic_ix$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_ix$EMPTY_N));

  // submodule coarseFreq_cordic_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iy(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iy$D_IN),
							       .ENQ(coarseFreq_cordic_iy$ENQ),
							       .DEQ(coarseFreq_cordic_iy$DEQ),
							       .CLR(coarseFreq_cordic_iy$CLR),
							       .D_OUT(coarseFreq_cordic_iy$D_OUT),
							       .FULL_N(coarseFreq_cordic_iy$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iy$EMPTY_N));

  // submodule coarseFreq_cordic_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iz(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iz$D_IN),
							       .ENQ(coarseFreq_cordic_iz$ENQ),
							       .DEQ(coarseFreq_cordic_iz$DEQ),
							       .CLR(coarseFreq_cordic_iz$CLR),
							       .D_OUT(coarseFreq_cordic_iz$D_OUT),
							       .FULL_N(coarseFreq_cordic_iz$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iz$EMPTY_N));

  // submodule coarseFreq_newSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) coarseFreq_newSample(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_newSample$D_IN),
							       .ENQ(coarseFreq_newSample$ENQ),
							       .DEQ(coarseFreq_newSample$DEQ),
							       .CLR(coarseFreq_newSample$CLR),
							       .D_OUT(coarseFreq_newSample$D_OUT),
							       .FULL_N(coarseFreq_newSample$FULL_N),
							       .EMPTY_N(coarseFreq_newSample$EMPTY_N));

  // rule RL_action_l36c23
  assign WILL_FIRE_RL_action_l36c23 =
	     coarseFreq_newSample$FULL_N && n_721_ULT_20___d1722 &&
	     (state_mkFSMstate == 4'd9 || state_mkFSMstate == 4'd12) ;

  // rule RL_action_l38c13
  assign WILL_FIRE_RL_action_l38c13 =
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1681 &&
	     !coarseFreq_coarseErrorCalc &&
	     state_mkFSMstate == 4'd10 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776 &&
	     start_reg ;

  // rule RL_action_l27c11
  assign WILL_FIRE_RL_action_l27c11 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !n_721_ULT_20___d1722 && start_wire$whas &&
	     state_mkFSMstate == 4'd9 ||
	     !n_721_ULT_20___d1722 && start_wire$whas &&
	     state_mkFSMstate == 4'd12 ;

  // rule RL_idle_l26c17
  assign WILL_FIRE_RL_idle_l26c17 =
	     !n_721_ULT_20___d1722 && !start_wire$whas &&
	     state_mkFSMstate == 4'd9 ;

  // rule RL_idle_l26c17_1
  assign WILL_FIRE_RL_idle_l26c17_1 =
	     !n_721_ULT_20___d1722 && !start_wire$whas &&
	     state_mkFSMstate == 4'd12 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l55c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd1 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l56c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd2 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l57c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd3 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l58c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd4 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l59c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l61c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 =
	     !coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l74c13
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 =
	     coarseFreq_cordic_n_8_ULT_14___d39 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) ;

  // rule RL_coarseFreq_cordic_atanCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start =
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     coarseFreq_cordic_atanCalc ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l67c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ||
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd6 ||
	      coarseFreq_cordic_atanCalc_2_1 == 4'd7) ||
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l53c22
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_1$whas &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd9 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l53c22_1
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_1$whas &&
	     coarseFreq_cordic_atanCalc_2_1 == 4'd12 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l100c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 =
	     coarseFreq_newSample$EMPTY_N && coarseFreq_n_38_ULT_20___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd5 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l101c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 =
	     coarseFreq_newSample$EMPTY_N &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd6 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 =
	     !coarseFreq_n_38_ULT_20___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd5 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l104c24
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 =
	     coarseFreq_n_38_ULT_20___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd9 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd21) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l137c17
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 =
	     !coarseFreq_n_38_ULT_20___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd9 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd21) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l147c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 =
	     coarseFreq_n_38_ULT_20___d339 &&
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	      coarseFreq_coarseErrorCalc_2_1 == 6'd33) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l150c19
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 =
	     coarseFreq_cordic_ix$FULL_N && coarseFreq_cordic_iy$FULL_N &&
	     coarseFreq_cordic_iz$FULL_N &&
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     !coarseFreq_cordic_atanCalc &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd27 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l151c13
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 =
	     coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 &&
	     !coarseFreq_cordic_atanCalc &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd28 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l54c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     (coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_1$whas &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) ;

  // rule RL_coarseFreq_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start =
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1681 &&
	     coarseFreq_coarseErrorCalc ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l95c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 =
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd0 ||
	     !coarseFreq_n_38_ULT_20___d339 &&
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	     !coarseFreq_n_38_ULT_20___d339 &&
	     coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd33 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l94c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 =
	     !coarseFreq_n_38_ULT_20___d339 &&
	     !coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd24 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l94c22_1
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 =
	     !coarseFreq_n_38_ULT_20___d339 &&
	     !coarseFreq_coarseErrorCalc_1$whas &&
	     coarseFreq_coarseErrorCalc_2_1 == 6'd33 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ;
  assign MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ;
  assign MUX_coarseFreq_n$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ;
  assign MUX_coarseFreq_samples$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_4 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_5 =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l26c17_1 || WILL_FIRE_RL_idle_l26c17 ;
  assign MUX_coarseFreq_accumError$write_1__VAL_1 =
	     { x__h173732, x__h179202 } ;
  assign MUX_coarseFreq_accumError$write_1__VAL_2 =
	     { coarseFreq_accumError[47:36],
	       x_rel_f__h185073,
	       coarseFreq_accumError[23:0] } ;
  assign MUX_coarseFreq_accumError$write_1__VAL_3 =
	     { coarseFreq_accumError[47:12], x_img_f__h185510 } ;
  assign MUX_coarseFreq_cordic_n$write_1__VAL_1 = coarseFreq_cordic_n + 4'd1 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_3 =
	     (!x__h62560[35] &&
	      (x__h62560[23] || x__h62560[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h62560[35] &&
		 (!x__h62560[23] || ~x__h62560[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h62560[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69821 : x__h68759 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_5 =
	     { coarseFreq_cordic_x_[23:12], x_f__h70469 } ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_2 =
	     (!x__h59376[35] &&
	      (x__h59376[23] || x__h59376[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h59376[35] &&
		 (!x__h59376[23] || ~x__h59376[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h59376[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_3 =
	     (!x__h65305[35] &&
	      (x__h65305[23] || x__h65305[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h65305[35] &&
		 (!x__h65305[23] || ~x__h65305[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h65305[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69892 : x__h68859 ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_5 =
	     { coarseFreq_cordic_y_[23:12], x_f__h70507 } ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_1 =
	     coarseFreq_cordic_z_ + 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_2 =
	     coarseFreq_cordic_z_ - 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h69963 : x__h68930 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_5 =
	     { coarseFreq_cordic_z_[23:12], x_f__h70521 } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_1 =
	     { SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
	       fpart__h504208,
	       SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
	       fpart__h504994 } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_2 =
	     { coarseFreq_currSample[47:36],
	       x_rel_f__h168877,
	       coarseFreq_currSample[23:0] } ;
  assign MUX_coarseFreq_currSample$write_1__VAL_3 =
	     { coarseFreq_currSample[47:12], x_img_f__h169284 } ;
  assign MUX_coarseFreq_fsError$write_1__VAL_1 =
	     (!x__h187867[35] &&
	      (x__h187867[23] || x__h187867[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h187867[35] &&
		 (!x__h187867[23] || ~x__h187867[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h187867[23:0]) ;
  assign MUX_coarseFreq_fsError$write_1__VAL_2 =
	     { coarseFreq_fsError[23:12], x_f__h265062 } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_2 =
	     { coarseFreq_lastSample[47:24],
	       (!x__h170016[35] &&
		(x__h170016[23] || x__h170016[35:24] != 12'd0)) ?
		 24'd8388607 :
		 ((x__h170016[35] &&
		   (!x__h170016[23] || ~x__h170016[35:24] != 12'd0)) ?
		    24'd8388608 :
		    x__h170016[23:0]) } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_3 =
	     { coarseFreq_lastSample[47:36],
	       x_rel_f__h172862,
	       coarseFreq_lastSample[23:0] } ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_4 =
	     { coarseFreq_lastSample[47:12], x_img_f__h173275 } ;
  assign MUX_coarseFreq_n$write_1__VAL_1 = coarseFreq_n + 10'd1 ;
  assign MUX_coarseFreq_samples$write_1__VAL_3 = { x__h474217, x__h479688 } ;
  assign MUX_coarseFreq_samples$write_1__VAL_4 =
	     { SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
	       x_rel_f__h485908,
	       SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
	       fpart__h504994 } ;
  assign MUX_coarseFreq_samples$write_1__VAL_5 =
	     { SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
	       fpart__h504208,
	       SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
	       x_img_f__h488813 } ;
  assign MUX_coarseFreq_xFix$write_1__VAL_1 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470[23:0]) ;
  assign MUX_coarseFreq_xFix$write_1__VAL_2 =
	     { coarseFreq_xFix[23:12], x_f__h503005 } ;
  assign MUX_coarseFreq_yFix$write_1__VAL_1 =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508[23:0]) ;
  assign MUX_coarseFreq_yFix$write_1__VAL_2 =
	     { coarseFreq_yFix[23:12], x_f__h503596 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign coarseFreq_cordic_atanCalc_1$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     coarseFreq_cordic_atanCalc_1_1 &&
	     !coarseFreq_cordic_atanCalc_3_1 ;
  assign coarseFreq_coarseErrorCalc_1$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_1_1 &&
	     !coarseFreq_coarseErrorCalc_3_1 ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign coarseFreq_cordic_atanCalc_3$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ;
  assign coarseFreq_coarseErrorCalc_3$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l26c17_1 || WILL_FIRE_RL_idle_l26c17 ||
	     state_mkFSMstate == 4'd11 ||
	     WILL_FIRE_RL_action_l38c13 ||
	     WILL_FIRE_RL_action_l36c23 ||
	     state_mkFSMstate == 4'd8 ||
	     state_mkFSMstate == 4'd7 ||
	     state_mkFSMstate == 4'd6 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l27c11 ;

  // register coarseFreq_accumError
  always@(coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_accumError$write_1__VAL_1 or
	  MUX_coarseFreq_accumError$write_1__VAL_2 or
	  MUX_coarseFreq_accumError$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_2_1 == 6'd15:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd16:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd17:
	  coarseFreq_accumError$D_IN =
	      MUX_coarseFreq_accumError$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd2:
	  coarseFreq_accumError$D_IN = 48'd0;
      default: coarseFreq_accumError$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_accumError$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ;

  // register coarseFreq_coarseErrorCalc
  assign coarseFreq_coarseErrorCalc$D_IN =
	     !WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ;
  assign coarseFreq_coarseErrorCalc$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1681 &&
	     !coarseFreq_coarseErrorCalc ;

  // register coarseFreq_coarseErrorCalc_1_1
  assign coarseFreq_coarseErrorCalc_1_1$D_IN =
	     coarseFreq_coarseErrorCalc_1$whas ;
  assign coarseFreq_coarseErrorCalc_1_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_2_1
  always@(MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_coarseErrorCalc_2_1$write_1__SEL_1:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd0;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd1:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd2:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd3:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd4;
      coarseFreq_coarseErrorCalc_2_1 == 6'd4:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd5;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd6;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd7;
      coarseFreq_coarseErrorCalc_2_1 == 6'd7:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd8;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd9;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd10;
      coarseFreq_coarseErrorCalc_2_1 == 6'd10:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd11;
      coarseFreq_coarseErrorCalc_2_1 == 6'd11:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd12;
      coarseFreq_coarseErrorCalc_2_1 == 6'd12:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd13;
      coarseFreq_coarseErrorCalc_2_1 == 6'd13:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd14;
      coarseFreq_coarseErrorCalc_2_1 == 6'd14:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd15;
      coarseFreq_coarseErrorCalc_2_1 == 6'd15:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd16;
      coarseFreq_coarseErrorCalc_2_1 == 6'd16:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd17;
      coarseFreq_coarseErrorCalc_2_1 == 6'd17:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd18;
      coarseFreq_coarseErrorCalc_2_1 == 6'd18:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd19;
      coarseFreq_coarseErrorCalc_2_1 == 6'd19:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd20;
      coarseFreq_coarseErrorCalc_2_1 == 6'd20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd21;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd22;
      coarseFreq_coarseErrorCalc_2_1 == 6'd22:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd23;
      coarseFreq_coarseErrorCalc_2_1 == 6'd23:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd24;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd25;
      coarseFreq_coarseErrorCalc_2_1 == 6'd25:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd26;
      coarseFreq_coarseErrorCalc_2_1 == 6'd26:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd27;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd28;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd29;
      coarseFreq_coarseErrorCalc_2_1 == 6'd29:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd30;
      coarseFreq_coarseErrorCalc_2_1 == 6'd30:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd31;
      coarseFreq_coarseErrorCalc_2_1 == 6'd31:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd32;
      coarseFreq_coarseErrorCalc_2_1 == 6'd32:
	  coarseFreq_coarseErrorCalc_2_1$D_IN = 6'd33;
      default: coarseFreq_coarseErrorCalc_2_1$D_IN =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_coarseErrorCalc_2_1$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l94c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ;

  // register coarseFreq_coarseErrorCalc_3_1
  assign coarseFreq_coarseErrorCalc_3_1$D_IN =
	     coarseFreq_coarseErrorCalc_3$whas ;
  assign coarseFreq_coarseErrorCalc_3_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_4
  assign coarseFreq_coarseErrorCalc_4$D_IN =
	     coarseFreq_coarseErrorCalc_3$whas ||
	     coarseFreq_coarseErrorCalc_4 ;
  assign coarseFreq_coarseErrorCalc_4$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc
  assign coarseFreq_cordic_atanCalc$D_IN =
	     !WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ;
  assign coarseFreq_cordic_atanCalc$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;

  // register coarseFreq_cordic_atanCalc_1_1
  assign coarseFreq_cordic_atanCalc_1_1$D_IN =
	     coarseFreq_cordic_atanCalc_1$whas ;
  assign coarseFreq_cordic_atanCalc_1_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_2_1
  always@(MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  coarseFreq_cordic_atanCalc_2_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_cordic_atanCalc_2_1$write_1__SEL_1:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd0;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd4;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd5;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd6;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd7;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd8;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd9;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd10;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd11;
      coarseFreq_cordic_atanCalc_2_1 == 4'd11:
	  coarseFreq_cordic_atanCalc_2_1$D_IN = 4'd12;
      default: coarseFreq_cordic_atanCalc_2_1$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_atanCalc_2_1$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l53c22 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ;

  // register coarseFreq_cordic_atanCalc_3_1
  assign coarseFreq_cordic_atanCalc_3_1$D_IN =
	     coarseFreq_cordic_atanCalc_3$whas ;
  assign coarseFreq_cordic_atanCalc_3_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_4
  assign coarseFreq_cordic_atanCalc_4$D_IN =
	     coarseFreq_cordic_atanCalc_3$whas ||
	     coarseFreq_cordic_atanCalc_4 ;
  assign coarseFreq_cordic_atanCalc_4$EN = 1'd1 ;

  // register coarseFreq_cordic_limitX_inner_reg
  assign coarseFreq_cordic_limitX_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitX_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_limitY_inner_reg
  assign coarseFreq_cordic_limitY_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitY_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_limitZ_inner_reg
  assign coarseFreq_cordic_limitZ_inner_reg$D_IN = 12'h0 ;
  assign coarseFreq_cordic_limitZ_inner_reg$EN = 1'b0 ;

  // register coarseFreq_cordic_n
  assign coarseFreq_cordic_n$D_IN =
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd11) ?
	       MUX_coarseFreq_cordic_n$write_1__VAL_1 :
	       4'd0 ;
  assign coarseFreq_cordic_n$EN =
	     coarseFreq_cordic_atanCalc_2_1 == 4'd11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ;

  // register coarseFreq_cordic_x_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 or
	  coarseFreq_cordic_ix$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12:
	  coarseFreq_cordic_x_$D_IN = coarseFreq_cordic_ix$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_5;
      default: coarseFreq_cordic_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_x_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_cordic_y_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 or
	  coarseFreq_cordic_iy$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12:
	  coarseFreq_cordic_y_$D_IN = coarseFreq_cordic_iy$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_5;
      default: coarseFreq_cordic_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_y_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_cordic_z_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 or
	  coarseFreq_cordic_iz$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_4 or
	  coarseFreq_cordic_atanCalc_2_1 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12:
	  coarseFreq_cordic_z_$D_IN = coarseFreq_cordic_iz$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_4;
      coarseFreq_cordic_atanCalc_2_1 == 4'd10:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_5;
      default: coarseFreq_cordic_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_z_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	     coarseFreq_cordic_atanCalc_2_1 == 4'd10 ;

  // register coarseFreq_currSample
  always@(WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 or
	  MUX_coarseFreq_currSample$write_1__VAL_1 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_currSample$write_1__VAL_2 or
	  MUX_coarseFreq_currSample$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd10:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd11:
	  coarseFreq_currSample$D_IN =
	      MUX_coarseFreq_currSample$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd1:
	  coarseFreq_currSample$D_IN = 48'd0;
      default: coarseFreq_currSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_currSample$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd1 ;

  // register coarseFreq_dummy
  assign coarseFreq_dummy$D_IN = 1'b0 ;
  assign coarseFreq_dummy$EN = 1'b0 ;

  // register coarseFreq_fsError
  always@(WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 or
	  MUX_coarseFreq_fsError$write_1__VAL_1 or
	  coarseFreq_coarseErrorCalc_2_1 or
	  MUX_coarseFreq_fsError$write_1__VAL_2)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17:
	  coarseFreq_fsError$D_IN = MUX_coarseFreq_fsError$write_1__VAL_1;
      coarseFreq_coarseErrorCalc_2_1 == 6'd22:
	  coarseFreq_fsError$D_IN = MUX_coarseFreq_fsError$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd3: coarseFreq_fsError$D_IN = 24'd0;
      default: coarseFreq_fsError$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_fsError$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd3 ;

  // register coarseFreq_lastSample
  always@(coarseFreq_coarseErrorCalc_2_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_lastSample$write_1__VAL_2 or
	  MUX_coarseFreq_lastSample$write_1__VAL_3 or
	  MUX_coarseFreq_lastSample$write_1__VAL_4 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_2_1 == 6'd18:
	  coarseFreq_lastSample$D_IN = coarseFreq_currSample;
      coarseFreq_coarseErrorCalc_2_1 == 6'd12:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_2;
      coarseFreq_coarseErrorCalc_2_1 == 6'd13:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_3;
      coarseFreq_coarseErrorCalc_2_1 == 6'd14:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_4;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20:
	  coarseFreq_lastSample$D_IN = 48'd0;
      default: coarseFreq_lastSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_lastSample$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 ;

  // register coarseFreq_limitAccumE_inner_reg
  assign coarseFreq_limitAccumE_inner_reg$D_IN = 12'hFFF << inV ;
  assign coarseFreq_limitAccumE_inner_reg$EN = state_mkFSMstate == 4'd3 ;

  // register coarseFreq_limitCpxFix_inner_reg
  assign coarseFreq_limitCpxFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitCpxFix_inner_reg$EN = state_mkFSMstate == 4'd5 ;

  // register coarseFreq_limitCurrS_inner_reg
  assign coarseFreq_limitCurrS_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitCurrS_inner_reg$EN = state_mkFSMstate == 4'd1 ;

  // register coarseFreq_limitError_inner_reg
  assign coarseFreq_limitError_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitError_inner_reg$EN = state_mkFSMstate == 4'd4 ;

  // register coarseFreq_limitLastS_inner_reg
  assign coarseFreq_limitLastS_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitLastS_inner_reg$EN = state_mkFSMstate == 4'd2 ;

  // register coarseFreq_limitXFix_inner_reg
  assign coarseFreq_limitXFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitXFix_inner_reg$EN = state_mkFSMstate == 4'd6 ;

  // register coarseFreq_limitYFix_inner_reg
  assign coarseFreq_limitYFix_inner_reg$D_IN =
	     coarseFreq_limitAccumE_inner_reg$D_IN ;
  assign coarseFreq_limitYFix_inner_reg$EN = state_mkFSMstate == 4'd7 ;

  // register coarseFreq_n
  assign coarseFreq_n$D_IN =
	     MUX_coarseFreq_n$write_1__SEL_1 ?
	       MUX_coarseFreq_n$write_1__VAL_1 :
	       10'd0 ;
  assign coarseFreq_n$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd32 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd4 ;

  // register coarseFreq_samples
  always@(MUX_coarseFreq_samples$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples$write_1__SEL_1:
	  coarseFreq_samples$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples$write_1__SEL_2:
	  coarseFreq_samples$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples$write_1__SEL_3:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples$write_1__SEL_4:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples$write_1__SEL_5:
	  coarseFreq_samples$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd0 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd0 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd0 ;

  // register coarseFreq_samples_1
  always@(MUX_coarseFreq_samples_1$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_1$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_1$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_1$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_1$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_1$write_1__SEL_1:
	  coarseFreq_samples_1$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_1$write_1__SEL_2:
	  coarseFreq_samples_1$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_1$write_1__SEL_3:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_1$write_1__SEL_4:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_1$write_1__SEL_5:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_1$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_1$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd1 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd1 ;

  // register coarseFreq_samples_10
  always@(MUX_coarseFreq_samples_10$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_10$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_10$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_10$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_10$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_10$write_1__SEL_1:
	  coarseFreq_samples_10$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_10$write_1__SEL_2:
	  coarseFreq_samples_10$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_10$write_1__SEL_3:
	  coarseFreq_samples_10$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_10$write_1__SEL_4:
	  coarseFreq_samples_10$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_10$write_1__SEL_5:
	  coarseFreq_samples_10$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_10$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_10$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd10 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd10 ;

  // register coarseFreq_samples_11
  always@(MUX_coarseFreq_samples_11$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_11$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_11$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_11$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_11$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_11$write_1__SEL_1:
	  coarseFreq_samples_11$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_11$write_1__SEL_2:
	  coarseFreq_samples_11$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_11$write_1__SEL_3:
	  coarseFreq_samples_11$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_11$write_1__SEL_4:
	  coarseFreq_samples_11$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_11$write_1__SEL_5:
	  coarseFreq_samples_11$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_11$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_11$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd11 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd11 ;

  // register coarseFreq_samples_12
  always@(MUX_coarseFreq_samples_12$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_12$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_12$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_12$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_12$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_12$write_1__SEL_1:
	  coarseFreq_samples_12$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_12$write_1__SEL_2:
	  coarseFreq_samples_12$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_12$write_1__SEL_3:
	  coarseFreq_samples_12$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_12$write_1__SEL_4:
	  coarseFreq_samples_12$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_12$write_1__SEL_5:
	  coarseFreq_samples_12$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_12$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_12$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd12 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd12 ;

  // register coarseFreq_samples_13
  always@(MUX_coarseFreq_samples_13$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_13$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_13$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_13$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_13$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_13$write_1__SEL_1:
	  coarseFreq_samples_13$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_13$write_1__SEL_2:
	  coarseFreq_samples_13$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_13$write_1__SEL_3:
	  coarseFreq_samples_13$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_13$write_1__SEL_4:
	  coarseFreq_samples_13$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_13$write_1__SEL_5:
	  coarseFreq_samples_13$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_13$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_13$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd13 ;

  // register coarseFreq_samples_14
  always@(MUX_coarseFreq_samples_14$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_14$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_14$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_14$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_14$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_14$write_1__SEL_1:
	  coarseFreq_samples_14$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_14$write_1__SEL_2:
	  coarseFreq_samples_14$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_14$write_1__SEL_3:
	  coarseFreq_samples_14$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_14$write_1__SEL_4:
	  coarseFreq_samples_14$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_14$write_1__SEL_5:
	  coarseFreq_samples_14$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_14$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_14$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd14 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd14 ;

  // register coarseFreq_samples_15
  always@(MUX_coarseFreq_samples_15$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_15$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_15$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_15$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_15$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_15$write_1__SEL_1:
	  coarseFreq_samples_15$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_15$write_1__SEL_2:
	  coarseFreq_samples_15$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_15$write_1__SEL_3:
	  coarseFreq_samples_15$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_15$write_1__SEL_4:
	  coarseFreq_samples_15$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_15$write_1__SEL_5:
	  coarseFreq_samples_15$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_15$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_15$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd15 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd15 ;

  // register coarseFreq_samples_16
  always@(MUX_coarseFreq_samples_16$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_16$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_16$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_16$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_16$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_16$write_1__SEL_1:
	  coarseFreq_samples_16$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_16$write_1__SEL_2:
	  coarseFreq_samples_16$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_16$write_1__SEL_3:
	  coarseFreq_samples_16$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_16$write_1__SEL_4:
	  coarseFreq_samples_16$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_16$write_1__SEL_5:
	  coarseFreq_samples_16$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_16$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_16$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd16 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd16 ;

  // register coarseFreq_samples_17
  always@(MUX_coarseFreq_samples_17$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_17$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_17$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_17$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_17$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_17$write_1__SEL_1:
	  coarseFreq_samples_17$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_17$write_1__SEL_2:
	  coarseFreq_samples_17$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_17$write_1__SEL_3:
	  coarseFreq_samples_17$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_17$write_1__SEL_4:
	  coarseFreq_samples_17$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_17$write_1__SEL_5:
	  coarseFreq_samples_17$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_17$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_17$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd17 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd17 ;

  // register coarseFreq_samples_18
  always@(MUX_coarseFreq_samples_18$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_18$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_18$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_18$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_18$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_18$write_1__SEL_1:
	  coarseFreq_samples_18$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_18$write_1__SEL_2:
	  coarseFreq_samples_18$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_18$write_1__SEL_3:
	  coarseFreq_samples_18$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_18$write_1__SEL_4:
	  coarseFreq_samples_18$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_18$write_1__SEL_5:
	  coarseFreq_samples_18$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_18$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_18$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd18 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd18 ;

  // register coarseFreq_samples_19
  always@(MUX_coarseFreq_samples_19$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_19$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_19$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_19$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_19$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_19$write_1__SEL_1:
	  coarseFreq_samples_19$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_19$write_1__SEL_2:
	  coarseFreq_samples_19$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_19$write_1__SEL_3:
	  coarseFreq_samples_19$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_19$write_1__SEL_4:
	  coarseFreq_samples_19$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_19$write_1__SEL_5:
	  coarseFreq_samples_19$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_19$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_19$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd19 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd19 ;

  // register coarseFreq_samples_2
  always@(MUX_coarseFreq_samples_2$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_2$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_2$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_2$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_2$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_2$write_1__SEL_1:
	  coarseFreq_samples_2$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_2$write_1__SEL_2:
	  coarseFreq_samples_2$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_2$write_1__SEL_3:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_2$write_1__SEL_4:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_2$write_1__SEL_5:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_2$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_2$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd2 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd2 ;

  // register coarseFreq_samples_3
  always@(MUX_coarseFreq_samples_3$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_3$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_3$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_3$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_3$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_3$write_1__SEL_1:
	  coarseFreq_samples_3$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_3$write_1__SEL_2:
	  coarseFreq_samples_3$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_3$write_1__SEL_3:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_3$write_1__SEL_4:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_3$write_1__SEL_5:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_3$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_3$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd3 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd3 ;

  // register coarseFreq_samples_4
  always@(MUX_coarseFreq_samples_4$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_4$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_4$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_4$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_4$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_4$write_1__SEL_1:
	  coarseFreq_samples_4$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_4$write_1__SEL_2:
	  coarseFreq_samples_4$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_4$write_1__SEL_3:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_4$write_1__SEL_4:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_4$write_1__SEL_5:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_4$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_4$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd4 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd4 ;

  // register coarseFreq_samples_5
  always@(MUX_coarseFreq_samples_5$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_5$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_5$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_5$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_5$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_5$write_1__SEL_1:
	  coarseFreq_samples_5$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_5$write_1__SEL_2:
	  coarseFreq_samples_5$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_5$write_1__SEL_3:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_5$write_1__SEL_4:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_5$write_1__SEL_5:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_5$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_5$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd5 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd5 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd5 ;

  // register coarseFreq_samples_6
  always@(MUX_coarseFreq_samples_6$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_6$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_6$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_6$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_6$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_6$write_1__SEL_1:
	  coarseFreq_samples_6$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_6$write_1__SEL_2:
	  coarseFreq_samples_6$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_6$write_1__SEL_3:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_6$write_1__SEL_4:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_6$write_1__SEL_5:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_6$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_6$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd6 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd6 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd6 ;

  // register coarseFreq_samples_7
  always@(MUX_coarseFreq_samples_7$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_7$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_7$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_7$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_7$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_7$write_1__SEL_1:
	  coarseFreq_samples_7$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_7$write_1__SEL_2:
	  coarseFreq_samples_7$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_7$write_1__SEL_3:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_7$write_1__SEL_4:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_7$write_1__SEL_5:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_7$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_7$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd7 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd7 ;

  // register coarseFreq_samples_8
  always@(MUX_coarseFreq_samples_8$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_8$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_8$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_8$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_8$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_8$write_1__SEL_1:
	  coarseFreq_samples_8$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_8$write_1__SEL_2:
	  coarseFreq_samples_8$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_8$write_1__SEL_3:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_8$write_1__SEL_4:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_8$write_1__SEL_5:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_8$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_8$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd8 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd8 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd8 ;

  // register coarseFreq_samples_9
  always@(MUX_coarseFreq_samples_9$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_9$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_9$write_1__SEL_3 or
	  MUX_coarseFreq_samples$write_1__VAL_3 or
	  MUX_coarseFreq_samples_9$write_1__SEL_4 or
	  MUX_coarseFreq_samples$write_1__VAL_4 or
	  MUX_coarseFreq_samples_9$write_1__SEL_5 or
	  MUX_coarseFreq_samples$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_9$write_1__SEL_1:
	  coarseFreq_samples_9$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_9$write_1__SEL_2:
	  coarseFreq_samples_9$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_9$write_1__SEL_3:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_3;
      MUX_coarseFreq_samples_9$write_1__SEL_4:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_4;
      MUX_coarseFreq_samples_9$write_1__SEL_5:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples$write_1__VAL_5;
      default: coarseFreq_samples_9$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_9$EN =
	     coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	     coarseFreq_n == 10'd9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	     coarseFreq_n == 10'd9 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	     coarseFreq_n == 10'd9 ;

  // register coarseFreq_xFix
  assign coarseFreq_xFix$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ?
	       MUX_coarseFreq_xFix$write_1__VAL_1 :
	       MUX_coarseFreq_xFix$write_1__VAL_2 ;
  assign coarseFreq_xFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd29 ;

  // register coarseFreq_yFix
  assign coarseFreq_yFix$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ?
	       MUX_coarseFreq_yFix$write_1__VAL_1 :
	       MUX_coarseFreq_yFix$write_1__VAL_2 ;
  assign coarseFreq_yFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	     coarseFreq_coarseErrorCalc_2_1 == 6'd30 ;

  // register fV
  assign fV$D_IN = { fV[23:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l27c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 4'd11) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 4'd11 || state_mkFSMstate == 4'd8 ;

  // register outV
  assign outV$D_IN = coarseFreq_fsError ;
  assign outV$EN = WILL_FIRE_RL_action_l38c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l27c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l36c23 or WILL_FIRE_RL_action_l38c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l27c11: state_mkFSMstate$D_IN = 4'd1;
      state_mkFSMstate == 4'd1: state_mkFSMstate$D_IN = 4'd2;
      state_mkFSMstate == 4'd2: state_mkFSMstate$D_IN = 4'd3;
      state_mkFSMstate == 4'd3: state_mkFSMstate$D_IN = 4'd4;
      state_mkFSMstate == 4'd4: state_mkFSMstate$D_IN = 4'd5;
      state_mkFSMstate == 4'd5: state_mkFSMstate$D_IN = 4'd6;
      state_mkFSMstate == 4'd6: state_mkFSMstate$D_IN = 4'd7;
      state_mkFSMstate == 4'd7: state_mkFSMstate$D_IN = 4'd8;
      state_mkFSMstate == 4'd8: state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_action_l36c23: state_mkFSMstate$D_IN = 4'd10;
      WILL_FIRE_RL_action_l38c13: state_mkFSMstate$D_IN = 4'd11;
      state_mkFSMstate == 4'd11: state_mkFSMstate$D_IN = 4'd12;
      default: state_mkFSMstate$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l26c17_1 || WILL_FIRE_RL_idle_l26c17 ||
	     WILL_FIRE_RL_action_l27c11 ||
	     state_mkFSMstate == 4'd1 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd6 ||
	     state_mkFSMstate == 4'd7 ||
	     state_mkFSMstate == 4'd8 ||
	     WILL_FIRE_RL_action_l36c23 ||
	     WILL_FIRE_RL_action_l38c13 ||
	     state_mkFSMstate == 4'd11 ;

  // submodule coarseFreq_cordic_ix
  assign coarseFreq_cordic_ix$D_IN = coarseFreq_xFix ;
  assign coarseFreq_cordic_ix$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_ix$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ;
  assign coarseFreq_cordic_ix$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iy
  assign coarseFreq_cordic_iy$D_IN = coarseFreq_yFix ;
  assign coarseFreq_cordic_iy$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_iy$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ;
  assign coarseFreq_cordic_iy$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iz
  assign coarseFreq_cordic_iz$D_IN =
	     (!IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[35] &&
	      (IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[23] ||
	       IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[35] &&
		 (!IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[23] ||
		  ~IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429[23:0]) ;
  assign coarseFreq_cordic_iz$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ;
  assign coarseFreq_cordic_iz$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ;
  assign coarseFreq_cordic_iz$CLR = 1'b0 ;

  // submodule coarseFreq_newSample
  assign coarseFreq_newSample$D_IN = {2{fV}} ;
  assign coarseFreq_newSample$ENQ = WILL_FIRE_RL_action_l36c23 ;
  assign coarseFreq_newSample$DEQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ;
  assign coarseFreq_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1066 =
	     x__h204158 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1080 =
	     x__h201349[47:12] + { 24'd0, y_f__h205000 } ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d972 =
	     x__h217808 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d986 =
	     x__h215009[47:12] + { 24'd0, y_f__h218650 } ;
  assign IF_IF_coarseFreq_accumError_84_BIT_23_78_AND_N_ETC___d1182 =
	     x__h188196[47:12] + { 24'd0, y_f__h263419 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1056 =
	     (!x__h208551[36] &&
	      (x__h208551[23] || x__h208551[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h208551[36] &&
		 (!x__h208551[23] || ~x__h208551[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h208551[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1141 =
	     (!x__h194891[36] &&
	      (x__h194891[23] || x__h194891[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h194891[36] &&
		 (!x__h194891[23] || ~x__h194891[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h194891[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933 +
	     ((!x__h214680[35] &&
	       (x__h214680[23] || x__h214680[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h214680[35] &&
		  (!x__h214680[23] || ~x__h214680[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h214680[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966 +
	     ((!x__h201020[35] &&
	       (x__h201020[23] || x__h201020[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h201020[35] &&
		  (!x__h201020[23] || ~x__h201020[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h201020[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933 =
	     (!x__h201686[35] &&
	      (x__h201686[23] || x__h201686[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h201686[35] &&
		 (!x__h201686[23] || ~x__h201686[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h201686[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966 =
	     (!x__h198308[35] &&
	      (x__h198308[23] || x__h198308[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h198308[35] &&
		 (!x__h198308[23] || ~x__h198308[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h198308[23:0]) ;
  assign IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245 =
	     (!IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230[47] &&
	      IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1242[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1242 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_450_TH_ETC___d1470 =
	     (!IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455[47] &&
	      IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1467[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1467 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102 =
	     (!IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] &&
	      IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 ;
  assign IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_488_TH_ETC___d1508 =
	     (!IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493[47] &&
	      IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1505[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1505 ;
  assign IF_NOT_IF_coarseFreq_fsError_205_BIT_23_409_TH_ETC___d1429 =
	     (!IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414[47] &&
	      IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1426[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1426 ;
  assign IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1149 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857) ?
	       x__h194434 :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1141 :
		  24'd0) ;
  assign IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1162 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857) ?
	       x__h194434[23:12] :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059) ?
		  res_i__h208082 :
		  12'd0) ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1275 =
	     x__h477669 * x__h480413 ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1289 =
	     x__h477622[47:12] + { 24'd0, y_f__h478518 } ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1352 =
	     x__h477669 * x__h483128 ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1366 =
	     x__h483062[47:12] + { 24'd0, y_f__h483958 } ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1228 =
	     x__h480394 * x__h483128 ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230 =
	     (SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1228 :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1228 ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1242 =
	     IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230[47:12] +
	     { 24'd0, y_f__h475803 } ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1314 =
	     x__h480394 * x__h480413 ;
  assign IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1328 =
	     x__h480347[47:12] + { 24'd0, y_f__h481243 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1024 =
	     x__h206187 / x__h219856 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1036 =
	     x__h208890[38:2] + { 25'd0, y_f__h220560 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1109 =
	     x__h206187 / x__h206206 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1121 =
	     x__h195230[38:2] + { 25'd0, y_f__h206910 } ;
  assign IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1151 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1057 :
	       IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1150 ;
  assign IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1164 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1057[23:12] :
	       IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1163 ;
  assign IF_coarseFreq_accumError_84_BIT_23_78_THEN_0_C_ETC___d795 =
	     x__h189123[47:12] + { 24'd0, y_f__h190072 } ;
  assign IF_coarseFreq_accumError_84_BIT_23_78_THEN_IF__ETC___d816 =
	     coarseFreq_accumError[23] ?
	       ((!x__h188794[35] &&
		 (x__h188794[23] || x__h188794[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h188794[35] &&
		    (!x__h188794[23] || ~x__h188794[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h188794[23:0])) :
	       coarseFreq_accumError[23:0] ;
  assign IF_coarseFreq_accumError_84_BIT_23_78_THEN_NEG_ETC___d913 =
	     x__h202015[47:12] + { 24'd0, y_f__h202908 } ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1150 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059) ?
	       (coarseFreq_accumError[23] ? x__h194301 : x__h194269) :
	       IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1149 ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d1163 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059) ?
	       (coarseFreq_accumError[23] ?
		  x__h194301[23:12] :
		  x__h194269[23:12]) :
	       IF_NOT_coarseFreq_accumError_84_BIT_23_78_59_A_ETC___d1162 ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d878 =
	     x__h195910[47:12] + { 24'd0, y_f__h196803 } ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_THEN_0_C_ETC___d834 =
	     x__h191978[47:12] + { 24'd0, y_f__h192927 } ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_THEN_IF__ETC___d855 =
	     coarseFreq_accumError[47] ?
	       ((!x__h191649[35] &&
		 (x__h191649[23] || x__h191649[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h191649[35] &&
		    (!x__h191649[23] || ~x__h191649[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h191649[23:0])) :
	       coarseFreq_accumError[47:24] ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d864 =
	     x__h195955 * x__h195974 ;
  assign IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d946 =
	     x__h198637[47:12] + { 24'd0, y_f__h199530 } ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1453 =
	     x__h497573 * 24'd2487 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455 =
	     coarseFreq_cordic_x_[23] ?
	       -IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1453 :
	       IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1453 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1467 =
	     IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455[47:12] +
	     { 24'd0, y_f__h498415 } ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 =
	     x__h57012 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 =
	     IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47:12] +
	     { 24'd0, y_f__h57857 } ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 =
	     x__h62944 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 =
	     x__h62889[47:12] + { 24'd0, y_f__h63786 } ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1491 =
	     x__h500368 * 24'd2487 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493 =
	     coarseFreq_cordic_y_[23] ?
	       -IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1491 :
	       IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1491 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1505 =
	     IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493[47:12] +
	     { 24'd0, y_f__h501210 } ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 =
	     x__h65689 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 =
	     x__h65634[47:12] + { 24'd0, y_f__h66531 } ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 =
	     x__h59760 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 =
	     x__h59705[47:12] + { 24'd0, y_f__h60602 } ;
  assign IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d655 =
	     x__h177136[47:12] + { 24'd0, y_f__h178029 } ;
  assign IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d734 =
	     x__h182592[47:12] + { 24'd0, y_f__h183485 } ;
  assign IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d641 =
	     x__h177181 * x__h177200 ;
  assign IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d720 =
	     x__h177181 * x__h174488 ;
  assign IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d612 =
	     x__h174424[47:12] + { 24'd0, y_f__h175317 } ;
  assign IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d696 =
	     x__h179880[47:12] + { 24'd0, y_f__h180773 } ;
  assign IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d598 =
	     x__h174469 * x__h174488 ;
  assign IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d682 =
	     x__h174469 * x__h177200 ;
  assign IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414 =
	     coarseFreq_fsError[23] ?
	       _25734_MUL_IF_coarseFreq_fsError_205_BIT_23_409_ETC___d1412 :
	       -_25734_MUL_IF_coarseFreq_fsError_205_BIT_23_409_ETC___d1412 ;
  assign IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1426 =
	     IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414[47:12] +
	     { 24'd0, y_f__h495030 } ;
  assign IF_coarseFreq_lastSample_27_BIT_23_29_THEN_0_C_ETC___d547 =
	     x__h170345[47:12] + { 24'd0, y_f__h171300 } ;
  assign NOT_IF_coarseFreq_accumError_84_BIT_23_78_THEN_ETC___d857 =
	     (IF_coarseFreq_accumError_84_BIT_23_78_THEN_IF__ETC___d816 ^
	      24'h800000) >=
	     (IF_coarseFreq_accumError_84_BIT_47_17_THEN_IF__ETC___d855 ^
	      24'h800000) ;
  assign NOT_IF_coarseFreq_accumError_84_BIT_47_17_THEN_ETC___d1059 =
	     (IF_coarseFreq_accumError_84_BIT_47_17_THEN_IF__ETC___d855 ^
	      24'h800000) >
	     (IF_coarseFreq_accumError_84_BIT_23_78_THEN_IF__ETC___d816 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606 =
	     { SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11],
	       SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 } ;
  assign SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542 =
	     { SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11],
	       SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1559 =
	     { 33'd0, x__h504464 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1562 =
	     { 33'd0, x__h504464 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1570 =
	     { 33'd0, x__h504464 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1579 =
	     { 33'd0, x__h504464 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1588 =
	     { 33'd0, x__h504464 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1597 =
	     { 33'd0, x__h504464 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1623 =
	     { 33'd0, x__h505244 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1626 =
	     { 33'd0, x__h505244 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1634 =
	     { 33'd0, x__h505244 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1643 =
	     { 33'd0, x__h505244 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1652 =
	     { 33'd0, x__h505244 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1661 =
	     { 33'd0, x__h505244 } * 45'd1000000 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 } ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1565 =
	     45'd10 * digit__h504434 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1629 =
	     45'd10 * digit__h505214 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1574 =
	     45'd10 * y__h504647 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1638 =
	     45'd10 * y__h505427 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1583 =
	     45'd10 * y__h504736 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1647 =
	     45'd10 * y__h505516 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1592 =
	     45'd10 * y__h504825 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1656 =
	     45'd10 * y__h505605 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1601 =
	     45'd10 * y__h504914 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1665 =
	     45'd10 * y__h505694 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1057 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1056 ;
  assign _25734_MUL_IF_coarseFreq_fsError_205_BIT_23_409_ETC___d1412 =
	     24'd25734 * x__h494200 ;
  assign _651_MUL_IF_IF_coarseFreq_accumError_84_BIT_23__ETC___d1168 =
	     24'd651 * x__h262589 ;
  assign abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776 =
	     (state_mkFSMstate == 4'd0 ||
	      !n_721_ULT_20___d1722 && state_mkFSMstate == 4'd9 ||
	      !n_721_ULT_20___d1722 && state_mkFSMstate == 4'd12) &&
	     (!start_reg_1 || state_fired) ;
  assign ax1_f__h195258 = { res_f__h197955, 12'd0 } ;
  assign ax2_f__h195253 = { ax1_f__h195258, 2'd0 } ;
  assign ax2_i__h195252 = { x__h195260[11], x__h195260 } ;
  assign coarseFreq_coarseErrorCalc_2_whas__06_AND_coar_ETC___d1681 =
	     (coarseFreq_coarseErrorCalc_2_1 == 6'd0 ||
	      !coarseFreq_n_38_ULT_20___d339 &&
	      coarseFreq_coarseErrorCalc_2_1 == 6'd24 ||
	      !coarseFreq_n_38_ULT_20___d339 &&
	      coarseFreq_coarseErrorCalc_2_1 == 6'd33) &&
	     (!coarseFreq_coarseErrorCalc_1_1 ||
	      coarseFreq_coarseErrorCalc_3_1) ;
  assign coarseFreq_cordic_atanCalc_2_whas_AND_coarseFr_ETC___d300 =
	     (coarseFreq_cordic_atanCalc_2_1 == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_2_1 == 4'd12) &&
	     (!coarseFreq_cordic_atanCalc_1_1 ||
	      coarseFreq_cordic_atanCalc_3_1) ;
  assign coarseFreq_cordic_n_8_ULT_14___d39 = coarseFreq_cordic_n < 4'd14 ;
  assign coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 =
	     coarseFreq_cordic_x_ - coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 =
	     coarseFreq_cordic_x_ + coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 =
	     coarseFreq_cordic_y_ - coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 =
	     coarseFreq_cordic_y_ + coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_z__1_SLE_0___d256 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign coarseFreq_cordic_z__1_SLE_3216___d72 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign coarseFreq_cordic_z__1_SLT_3216___d160 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) < 24'd8391824 ;
  assign coarseFreq_n_38_ULT_20___d339 = coarseFreq_n < 10'd20 ;
  assign digit__h504434 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1559[15:12] } ;
  assign digit__h504501 =
	     { 41'd0,
	       tx04499_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2[3:0] } ;
  assign digit__h504590 =
	     { 41'd0,
	       tx04588_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3[3:0] } ;
  assign digit__h504679 =
	     { 41'd0,
	       tx04677_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4[3:0] } ;
  assign digit__h504768 =
	     { 41'd0,
	       tx04766_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5[3:0] } ;
  assign digit__h504857 =
	     { 41'd0,
	       tx04855_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6[3:0] } ;
  assign digit__h505214 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1623[15:12] } ;
  assign digit__h505281 =
	     { 41'd0,
	       tx05279_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7[3:0] } ;
  assign digit__h505370 =
	     { 41'd0,
	       tx05368_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8[3:0] } ;
  assign digit__h505459 =
	     { 41'd0,
	       tx05457_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9[3:0] } ;
  assign digit__h505548 =
	     { 41'd0,
	       tx05546_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10[3:0] } ;
  assign digit__h505637 =
	     { 41'd0,
	       tx05635_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11[3:0] } ;
  assign n_721_ULT_20___d1722 = n < 10'd20 ;
  assign res_f__h197955 =
	     (!x__h195581[35] &&
	      (x__h195581[23] || x__h195581[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h195581[35] &&
		 (!x__h195581[23] || ~x__h195581[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h195581[11:0]) ;
  assign res_i__h208082 =
	     (!x__h194891[36] &&
	      (x__h194891[23] || x__h194891[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h194891[36] &&
		 (!x__h194891[23] || ~x__h194891[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h194891[23:12]) ;
  assign tx04499_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2 =
	     tx__h504499 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1565[44:0] ;
  assign tx04588_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3 =
	     tx__h504588 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1574[44:0] ;
  assign tx04677_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4 =
	     tx__h504677 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1583[44:0] ;
  assign tx04766_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5 =
	     tx__h504766 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1592[44:0] ;
  assign tx04855_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6 =
	     tx__h504855 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1601[44:0] ;
  assign tx05279_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7 =
	     tx__h505279 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1629[44:0] ;
  assign tx05368_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8 =
	     tx__h505368 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1638[44:0] ;
  assign tx05457_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9 =
	     tx__h505457 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1647[44:0] ;
  assign tx05546_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10 =
	     tx__h505546 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1656[44:0] ;
  assign tx05635_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11 =
	     tx__h505635 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1665[44:0] ;
  assign tx__h504499 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1562[44:12] } ;
  assign tx__h504588 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1570[44:12] } ;
  assign tx__h504677 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1579[44:12] } ;
  assign tx__h504766 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1588[44:12] } ;
  assign tx__h504855 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1597[44:12] } ;
  assign tx__h505279 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1626[44:12] } ;
  assign tx__h505368 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1634[44:12] } ;
  assign tx__h505457 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1643[44:12] } ;
  assign tx__h505546 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1652[44:12] } ;
  assign tx__h505635 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_99_ETC___d1661[44:12] } ;
  assign x__h170016 =
	     (!x__h170345[47] &&
	      IF_coarseFreq_lastSample_27_BIT_23_29_THEN_0_C_ETC___d547[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_lastSample_27_BIT_23_29_THEN_0_C_ETC___d547 ;
  assign x__h170345 =
	     coarseFreq_lastSample[23] ?
	       { 12'd0, x__h177200, 12'd0 } :
	       -{ 12'd0, x__h177200, 12'd0 } ;
  assign x__h173732 = coarseFreq_accumError[47:24] + x__h173765 ;
  assign x__h173765 =
	     ((!x__h174095[35] &&
	       (x__h174095[23] || x__h174095[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h174095[35] &&
		  (!x__h174095[23] || ~x__h174095[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h174095[23:0])) -
	     ((!x__h176807[35] &&
	       (x__h176807[23] || x__h176807[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h176807[35] &&
		  (!x__h176807[23] || ~x__h176807[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h176807[23:0])) ;
  assign x__h174095 =
	     (!x__h174424[47] &&
	      IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d612[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d612 ;
  assign x__h174424 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d598 :
	       IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d598 ;
  assign x__h174469 =
	     coarseFreq_currSample[47] ?
	       -coarseFreq_currSample[47:24] :
	       coarseFreq_currSample[47:24] ;
  assign x__h174488 =
	     coarseFreq_lastSample[47] ?
	       -coarseFreq_lastSample[47:24] :
	       coarseFreq_lastSample[47:24] ;
  assign x__h176807 =
	     (!x__h177136[47] &&
	      IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d655[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d655 ;
  assign x__h177136 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d641 :
	       IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d641 ;
  assign x__h177181 =
	     coarseFreq_currSample[23] ?
	       -coarseFreq_currSample[23:0] :
	       coarseFreq_currSample[23:0] ;
  assign x__h177200 =
	     coarseFreq_lastSample[23] ?
	       -coarseFreq_lastSample[23:0] :
	       coarseFreq_lastSample[23:0] ;
  assign x__h179202 = coarseFreq_accumError[23:0] + x__h179221 ;
  assign x__h179221 =
	     ((!x__h179551[35] &&
	       (x__h179551[23] || x__h179551[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h179551[35] &&
		  (!x__h179551[23] || ~x__h179551[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h179551[23:0])) +
	     ((!x__h182263[35] &&
	       (x__h182263[23] || x__h182263[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h182263[35] &&
		  (!x__h182263[23] || ~x__h182263[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h182263[23:0])) ;
  assign x__h179551 =
	     (!x__h179880[47] &&
	      IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d696[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_12_BIT_47_86_AND_NOT__ETC___d696 ;
  assign x__h179880 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d682 :
	       IF_coarseFreq_currSample_12_BIT_47_86_THEN_NEG_ETC___d682 ;
  assign x__h182263 =
	     (!x__h182592[47] &&
	      IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d734[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_12_BIT_23_33_AND_NOT__ETC___d734 ;
  assign x__h182592 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d720 :
	       IF_coarseFreq_currSample_12_BIT_23_33_THEN_NEG_ETC___d720 ;
  assign x__h187867 =
	     (!x__h188196[47] &&
	      IF_IF_coarseFreq_accumError_84_BIT_23_78_AND_N_ETC___d1182[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_coarseFreq_accumError_84_BIT_23_78_AND_N_ETC___d1182 ;
  assign x__h188196 =
	     IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1151[23] ?
	       -_651_MUL_IF_IF_coarseFreq_accumError_84_BIT_23__ETC___d1168 :
	       _651_MUL_IF_IF_coarseFreq_accumError_84_BIT_23__ETC___d1168 ;
  assign x__h188794 =
	     (!x__h189123[47] &&
	      IF_coarseFreq_accumError_84_BIT_23_78_THEN_0_C_ETC___d795[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_84_BIT_23_78_THEN_0_C_ETC___d795 ;
  assign x__h189123 =
	     coarseFreq_accumError[23] ?
	       { 12'd0, x__h195974, 12'd0 } :
	       -{ 12'd0, x__h195974, 12'd0 } ;
  assign x__h191649 =
	     (!x__h191978[47] &&
	      IF_coarseFreq_accumError_84_BIT_47_17_THEN_0_C_ETC___d834[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_84_BIT_47_17_THEN_0_C_ETC___d834 ;
  assign x__h191978 =
	     coarseFreq_accumError[47] ?
	       { 12'd0, x__h195955, 12'd0 } :
	       -{ 12'd0, x__h195955, 12'd0 } ;
  assign x__h194269 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1141 ;
  assign x__h194301 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1141 ;
  assign x__h194434 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1056 ;
  assign x__h194891 =
	     (!x__h195230[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1121[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1121 ;
  assign x__h195230 =
	     (ax2_i__h195252[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101[23] ||
	      !ax2_i__h195252[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1109 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1109 ;
  assign x__h195260 =
	     (!x__h195581[35] &&
	      (x__h195581[23] || x__h195581[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h195581[35] &&
		 (!x__h195581[23] || ~x__h195581[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h195581[23:12]) ;
  assign x__h195581 =
	     (!x__h195910[47] &&
	      IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d878[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_84_BIT_47_17_AND_NOT__ETC___d878 ;
  assign x__h195910 =
	     (coarseFreq_accumError[47] && !coarseFreq_accumError[23] ||
	      coarseFreq_accumError[23] && !coarseFreq_accumError[47]) ?
	       -IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d864 :
	       IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d864 ;
  assign x__h195955 =
	     coarseFreq_accumError[47] ?
	       -coarseFreq_accumError[47:24] :
	       coarseFreq_accumError[47:24] ;
  assign x__h195974 =
	     coarseFreq_accumError[23] ?
	       -coarseFreq_accumError[23:0] :
	       coarseFreq_accumError[23:0] ;
  assign x__h198308 =
	     (!x__h198637[47] &&
	      IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d946[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_84_BIT_47_17_THEN_NEG_ETC___d946 ;
  assign x__h198637 = x__h195955 * x__h195955 ;
  assign x__h201020 =
	     (!x__h201349[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1080[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1080 ;
  assign x__h201349 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1066 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d1066 ;
  assign x__h201686 =
	     (!x__h202015[47] &&
	      IF_coarseFreq_accumError_84_BIT_23_78_THEN_NEG_ETC___d913[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_84_BIT_23_78_THEN_NEG_ETC___d913 ;
  assign x__h202015 = x__h195974 * x__h195974 ;
  assign x__h204158 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933[23] ?
	       ((!x__h201686[35] &&
		 (x__h201686[23] || x__h201686[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h201686[35] &&
		    (!x__h201686[23] || ~x__h201686[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h201686[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d933 ;
  assign x__h206187 =
	     ax2_i__h195252[12] ?
	       -{ ax2_i__h195252, ax2_f__h195253 } :
	       { ax2_i__h195252, ax2_f__h195253 } ;
  assign x__h206206 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1101 ;
  assign x__h208551 =
	     (!x__h208890[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1036[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1036 ;
  assign x__h208890 =
	     (ax2_i__h195252[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007[23] ||
	      !ax2_i__h195252[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1024 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1024 ;
  assign x__h214680 =
	     (!x__h215009[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d986[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d986 ;
  assign x__h215009 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d972 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_B_ETC___d972 ;
  assign x__h217808 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966[23] ?
	       ((!x__h198308[35] &&
		 (x__h198308[23] || x__h198308[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h198308[35] &&
		    (!x__h198308[23] || ~x__h198308[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h198308[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d966 ;
  assign x__h219856 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_84_BIT__ETC___d1007 ;
  assign x__h262589 =
	     IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1164[11] ?
	       -IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1151 :
	       IF_coarseFreq_accumError_84_BIT_23_78_AND_NOT__ETC___d1151 ;
  assign x__h474217 =
	     ((!IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[35] &&
	       (IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[23] ||
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[35] &&
		  (!IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[23] ||
		   ~IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_SEL_ARR_coarseFreq_samples_99_BITS_4_ETC___d1245[23:0])) -
	     ((!x__h477293[35] &&
	       (x__h477293[23] || x__h477293[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h477293[35] &&
		  (!x__h477293[23] || ~x__h477293[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h477293[23:0])) ;
  assign x__h477293 =
	     (!x__h477622[47] &&
	      IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1289[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1289 ;
  assign x__h477622 =
	     (SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1275 :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1275 ;
  assign x__h477669 =
	     SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11] ?
	       -{ SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
		  fpart__h504994 } :
	       { SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485,
		 fpart__h504994 } ;
  assign x__h479688 =
	     ((!x__h480018[35] &&
	       (x__h480018[23] || x__h480018[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h480018[35] &&
		  (!x__h480018[23] || ~x__h480018[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h480018[23:0])) +
	     ((!x__h482733[35] &&
	       (x__h482733[23] || x__h482733[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h482733[35] &&
		  (!x__h482733[23] || ~x__h482733[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h482733[23:0])) ;
  assign x__h480018 =
	     (!x__h480347[47] &&
	      IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1328[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1328 ;
  assign x__h480347 =
	     (SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1314 :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1314 ;
  assign x__h480394 =
	     SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440[11] ?
	       -{ SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
		  fpart__h504208 } :
	       { SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440,
		 fpart__h504208 } ;
  assign x__h480413 =
	     coarseFreq_yFix[23] ? -coarseFreq_yFix : coarseFreq_yFix ;
  assign x__h482733 =
	     (!x__h483062[47] &&
	      IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1366[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1366 ;
  assign x__h483062 =
	     (SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1352 :
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_ETC___d1352 ;
  assign x__h483128 =
	     coarseFreq_xFix[23] ? -coarseFreq_xFix : coarseFreq_xFix ;
  assign x__h494200 =
	     coarseFreq_fsError[23] ?
	       -coarseFreq_fsError :
	       coarseFreq_fsError ;
  assign x__h497573 =
	     coarseFreq_cordic_x_[23] ?
	       -coarseFreq_cordic_x_ :
	       coarseFreq_cordic_x_ ;
  assign x__h500368 =
	     coarseFreq_cordic_y_[23] ?
	       -coarseFreq_cordic_y_ :
	       coarseFreq_cordic_y_ ;
  assign x__h504464 =
	     (SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542[12] &&
	      fpart__h504208 != 12'd0) ?
	       y_avValue_snd__h504398 :
	       fpart__h504208 ;
  assign x__h505244 =
	     (SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606[12] &&
	      fpart__h504994 != 12'd0) ?
	       y_avValue_snd__h505178 :
	       fpart__h504994 ;
  assign x__h57012 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 :
	       coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 ;
  assign x__h59376 =
	     (!x__h59705[47] &&
	      IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 ;
  assign x__h59705 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 ;
  assign x__h59760 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 :
	       coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 ;
  assign x__h62560 =
	     (!x__h62889[47] &&
	      IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 ;
  assign x__h62889 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 ;
  assign x__h62944 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 :
	       coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 ;
  assign x__h65305 =
	     (!x__h65634[47] &&
	      IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 ;
  assign x__h65634 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 ;
  assign x__h65689 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 :
	       coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 ;
  assign x__h68759 = coarseFreq_cordic_x_ - x__h69836 ;
  assign x__h68859 = coarseFreq_cordic_y_ + x__h69907 ;
  assign x__h68930 =
	     coarseFreq_cordic_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h69821 = coarseFreq_cordic_x_ + x__h69836 ;
  assign x__h69836 =
	     coarseFreq_cordic_y_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_y_[23]}} ;
  assign x__h69892 = coarseFreq_cordic_y_ - x__h69907 ;
  assign x__h69907 =
	     coarseFreq_cordic_x_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_x_[23]}} ;
  assign x__h69963 =
	     coarseFreq_cordic_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x_f__h265062 =
	     coarseFreq_fsError[11:0] & coarseFreq_limitError_inner_reg ;
  assign x_f__h503005 =
	     coarseFreq_xFix[11:0] & coarseFreq_limitXFix_inner_reg ;
  assign x_f__h503596 =
	     coarseFreq_yFix[11:0] & coarseFreq_limitYFix_inner_reg ;
  assign x_f__h70469 =
	     coarseFreq_cordic_x_[11:0] & coarseFreq_cordic_limitX_inner_reg ;
  assign x_f__h70507 =
	     coarseFreq_cordic_y_[11:0] & coarseFreq_cordic_limitY_inner_reg ;
  assign x_f__h70521 =
	     coarseFreq_cordic_z_[11:0] & coarseFreq_cordic_limitZ_inner_reg ;
  assign x_img_f__h169284 =
	     coarseFreq_currSample[11:0] & coarseFreq_limitCurrS_inner_reg ;
  assign x_img_f__h173275 =
	     coarseFreq_lastSample[11:0] & coarseFreq_limitLastS_inner_reg ;
  assign x_img_f__h185510 =
	     coarseFreq_accumError[11:0] & coarseFreq_limitAccumE_inner_reg ;
  assign x_img_f__h488813 =
	     fpart__h504994 & coarseFreq_limitCpxFix_inner_reg ;
  assign x_rel_f__h168877 =
	     coarseFreq_currSample[35:24] & coarseFreq_limitCurrS_inner_reg ;
  assign x_rel_f__h172862 =
	     coarseFreq_lastSample[35:24] & coarseFreq_limitLastS_inner_reg ;
  assign x_rel_f__h185073 =
	     coarseFreq_accumError[35:24] & coarseFreq_limitAccumE_inner_reg ;
  assign x_rel_f__h485908 =
	     fpart__h504208 & coarseFreq_limitCpxFix_inner_reg ;
  assign y__h504647 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1565[44:0] +
	     digit__h504501 ;
  assign y__h504736 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1574[44:0] +
	     digit__h504590 ;
  assign y__h504825 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1583[44:0] +
	     digit__h504679 ;
  assign y__h504914 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1592[44:0] +
	     digit__h504768 ;
  assign y__h505427 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1629[44:0] +
	     digit__h505281 ;
  assign y__h505516 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1638[44:0] +
	     digit__h505370 ;
  assign y__h505605 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1647[44:0] +
	     digit__h505459 ;
  assign y__h505694 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1656[44:0] +
	     digit__h505548 ;
  assign y_avValue_snd__h504398 = 12'd0 - fpart__h504208 ;
  assign y_avValue_snd__h505178 = 12'd0 - fpart__h504994 ;
  assign y_f__h171300 =
	     (x__h170345[11] &&
	      (x__h170345[47] || x__h170345[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h175317 =
	     (x__h174424[11] &&
	      (x__h174424[47] || x__h174424[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h178029 =
	     (x__h177136[11] &&
	      (x__h177136[47] || x__h177136[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h180773 =
	     (x__h179880[11] &&
	      (x__h179880[47] || x__h179880[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h183485 =
	     (x__h182592[11] &&
	      (x__h182592[47] || x__h182592[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h190072 =
	     (x__h189123[11] &&
	      (x__h189123[47] || x__h189123[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h192927 =
	     (x__h191978[11] &&
	      (x__h191978[47] || x__h191978[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h196803 =
	     (x__h195910[11] &&
	      (x__h195910[47] || x__h195910[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h199530 =
	     (x__h198637[11] &&
	      (x__h198637[47] || x__h198637[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h202908 =
	     (x__h202015[11] &&
	      (x__h202015[47] || x__h202015[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h205000 =
	     (x__h201349[11] &&
	      (x__h201349[47] || x__h201349[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h206910 =
	     (x__h195230[1] && (x__h195230[38] || x__h195230[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h218650 =
	     (x__h215009[11] &&
	      (x__h215009[47] || x__h215009[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h220560 =
	     (x__h208890[1] && (x__h208890[38] || x__h208890[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h263419 =
	     (x__h188196[11] &&
	      (x__h188196[47] || x__h188196[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h475803 =
	     (IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230[11] &&
	      (IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230[47] ||
	       IF_SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_ETC___d1230[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h478518 =
	     (x__h477622[11] &&
	      (x__h477622[47] || x__h477622[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h481243 =
	     (x__h480347[11] &&
	      (x__h480347[47] || x__h480347[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h483958 =
	     (x__h483062[11] &&
	      (x__h483062[47] || x__h483062[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h495030 =
	     (IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414[11] &&
	      (IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414[47] ||
	       IF_coarseFreq_fsError_205_BIT_23_409_THEN_2573_ETC___d1414[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h498415 =
	     (IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455[11] &&
	      (IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455[47] ||
	       IF_coarseFreq_cordic_x__9_BIT_23_450_THEN_NEG__ETC___d1455[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h501210 =
	     (IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493[11] &&
	      (IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493[47] ||
	       IF_coarseFreq_cordic_y__0_BIT_23_488_THEN_NEG__ETC___d1493[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h57857 =
	     (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[11] &&
	      (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] ||
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h60602 =
	     (x__h59705[11] && (x__h59705[47] || x__h59705[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h63786 =
	     (x__h62889[11] && (x__h62889[47] || x__h62889[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h66531 =
	     (x__h65634[11] && (x__h65634[47] || x__h65634[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h504208 = coarseFreq_samples[35:24];
      10'd1: fpart__h504208 = coarseFreq_samples_1[35:24];
      10'd2: fpart__h504208 = coarseFreq_samples_2[35:24];
      10'd3: fpart__h504208 = coarseFreq_samples_3[35:24];
      10'd4: fpart__h504208 = coarseFreq_samples_4[35:24];
      10'd5: fpart__h504208 = coarseFreq_samples_5[35:24];
      10'd6: fpart__h504208 = coarseFreq_samples_6[35:24];
      10'd7: fpart__h504208 = coarseFreq_samples_7[35:24];
      10'd8: fpart__h504208 = coarseFreq_samples_8[35:24];
      10'd9: fpart__h504208 = coarseFreq_samples_9[35:24];
      10'd10: fpart__h504208 = coarseFreq_samples_10[35:24];
      10'd11: fpart__h504208 = coarseFreq_samples_11[35:24];
      10'd12: fpart__h504208 = coarseFreq_samples_12[35:24];
      10'd13: fpart__h504208 = coarseFreq_samples_13[35:24];
      10'd14: fpart__h504208 = coarseFreq_samples_14[35:24];
      10'd15: fpart__h504208 = coarseFreq_samples_15[35:24];
      10'd16: fpart__h504208 = coarseFreq_samples_16[35:24];
      10'd17: fpart__h504208 = coarseFreq_samples_17[35:24];
      10'd18: fpart__h504208 = coarseFreq_samples_18[35:24];
      10'd19: fpart__h504208 = coarseFreq_samples_19[35:24];
      default: fpart__h504208 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h504994 = coarseFreq_samples[11:0];
      10'd1: fpart__h504994 = coarseFreq_samples_1[11:0];
      10'd2: fpart__h504994 = coarseFreq_samples_2[11:0];
      10'd3: fpart__h504994 = coarseFreq_samples_3[11:0];
      10'd4: fpart__h504994 = coarseFreq_samples_4[11:0];
      10'd5: fpart__h504994 = coarseFreq_samples_5[11:0];
      10'd6: fpart__h504994 = coarseFreq_samples_6[11:0];
      10'd7: fpart__h504994 = coarseFreq_samples_7[11:0];
      10'd8: fpart__h504994 = coarseFreq_samples_8[11:0];
      10'd9: fpart__h504994 = coarseFreq_samples_9[11:0];
      10'd10: fpart__h504994 = coarseFreq_samples_10[11:0];
      10'd11: fpart__h504994 = coarseFreq_samples_11[11:0];
      10'd12: fpart__h504994 = coarseFreq_samples_12[11:0];
      10'd13: fpart__h504994 = coarseFreq_samples_13[11:0];
      10'd14: fpart__h504994 = coarseFreq_samples_14[11:0];
      10'd15: fpart__h504994 = coarseFreq_samples_15[11:0];
      10'd16: fpart__h504994 = coarseFreq_samples_16[11:0];
      10'd17: fpart__h504994 = coarseFreq_samples_17[11:0];
      10'd18: fpart__h504994 = coarseFreq_samples_18[11:0];
      10'd19: fpart__h504994 = coarseFreq_samples_19[11:0];
      default: fpart__h504994 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_cordic_n)
  begin
    case (coarseFreq_cordic_n)
      4'd0: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3216;
      4'd1: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1899;
      4'd2: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1003;
      4'd3: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd509;
      4'd4: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd255;
      4'd5: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd127;
      4'd6: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd63;
      4'd7: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd31;
      4'd8: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd15;
      4'd9: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd7;
      4'd10: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3;
      4'd11: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd0;
      default: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples[47:36];
      10'd1:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_1[47:36];
      10'd2:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_2[47:36];
      10'd3:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_3[47:36];
      10'd4:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_4[47:36];
      10'd5:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_5[47:36];
      10'd6:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_6[47:36];
      10'd7:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_7[47:36];
      10'd8:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_8[47:36];
      10'd9:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_9[47:36];
      10'd10:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_10[47:36];
      10'd11:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_11[47:36];
      10'd12:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_12[47:36];
      10'd13:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_13[47:36];
      10'd14:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_14[47:36];
      10'd15:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_15[47:36];
      10'd16:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_16[47:36];
      10'd17:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_17[47:36];
      10'd18:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_18[47:36];
      10'd19:
	  SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
	      coarseFreq_samples_19[47:36];
      default: SEL_ARR_coarseFreq_samples_99_BITS_47_TO_36_00_ETC___d440 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples[23:12];
      10'd1:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_1[23:12];
      10'd2:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_2[23:12];
      10'd3:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_3[23:12];
      10'd4:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_4[23:12];
      10'd5:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_5[23:12];
      10'd6:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_6[23:12];
      10'd7:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_7[23:12];
      10'd8:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_8[23:12];
      10'd9:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_9[23:12];
      10'd10:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_10[23:12];
      10'd11:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_11[23:12];
      10'd12:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_12[23:12];
      10'd13:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_13[23:12];
      10'd14:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_14[23:12];
      10'd15:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_15[23:12];
      10'd16:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_16[23:12];
      10'd17:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_17[23:12];
      10'd18:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_18[23:12];
      10'd19:
	  SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
	      coarseFreq_samples_19[23:12];
      default: SEL_ARR_coarseFreq_samples_99_BITS_23_TO_12_64_ETC___d485 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_coarseErrorCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 6'd0;
	coarseFreq_coarseErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	coarseFreq_cordic_atanCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	coarseFreq_cordic_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_limitAccumE_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitCpxFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitCurrS_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitLastS_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitXFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_limitYFix_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	coarseFreq_n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	coarseFreq_samples <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY 24'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (coarseFreq_accumError$EN)
	  coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_accumError$D_IN;
	if (coarseFreq_coarseErrorCalc$EN)
	  coarseFreq_coarseErrorCalc <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc$D_IN;
	if (coarseFreq_coarseErrorCalc_1_1$EN)
	  coarseFreq_coarseErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_1_1$D_IN;
	if (coarseFreq_coarseErrorCalc_2_1$EN)
	  coarseFreq_coarseErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_2_1$D_IN;
	if (coarseFreq_coarseErrorCalc_3_1$EN)
	  coarseFreq_coarseErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_3_1$D_IN;
	if (coarseFreq_coarseErrorCalc_4$EN)
	  coarseFreq_coarseErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_4$D_IN;
	if (coarseFreq_cordic_atanCalc$EN)
	  coarseFreq_cordic_atanCalc <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc$D_IN;
	if (coarseFreq_cordic_atanCalc_1_1$EN)
	  coarseFreq_cordic_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_1_1$D_IN;
	if (coarseFreq_cordic_atanCalc_2_1$EN)
	  coarseFreq_cordic_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_2_1$D_IN;
	if (coarseFreq_cordic_atanCalc_3_1$EN)
	  coarseFreq_cordic_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_3_1$D_IN;
	if (coarseFreq_cordic_atanCalc_4$EN)
	  coarseFreq_cordic_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_4$D_IN;
	if (coarseFreq_cordic_limitX_inner_reg$EN)
	  coarseFreq_cordic_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitX_inner_reg$D_IN;
	if (coarseFreq_cordic_limitY_inner_reg$EN)
	  coarseFreq_cordic_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitY_inner_reg$D_IN;
	if (coarseFreq_cordic_limitZ_inner_reg$EN)
	  coarseFreq_cordic_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_limitZ_inner_reg$D_IN;
	if (coarseFreq_cordic_n$EN)
	  coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_n$D_IN;
	if (coarseFreq_cordic_x_$EN)
	  coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_x_$D_IN;
	if (coarseFreq_cordic_y_$EN)
	  coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_y_$D_IN;
	if (coarseFreq_cordic_z_$EN)
	  coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_z_$D_IN;
	if (coarseFreq_currSample$EN)
	  coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_currSample$D_IN;
	if (coarseFreq_dummy$EN)
	  coarseFreq_dummy <= `BSV_ASSIGNMENT_DELAY coarseFreq_dummy$D_IN;
	if (coarseFreq_fsError$EN)
	  coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY coarseFreq_fsError$D_IN;
	if (coarseFreq_lastSample$EN)
	  coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_lastSample$D_IN;
	if (coarseFreq_limitAccumE_inner_reg$EN)
	  coarseFreq_limitAccumE_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitAccumE_inner_reg$D_IN;
	if (coarseFreq_limitCpxFix_inner_reg$EN)
	  coarseFreq_limitCpxFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitCpxFix_inner_reg$D_IN;
	if (coarseFreq_limitCurrS_inner_reg$EN)
	  coarseFreq_limitCurrS_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitCurrS_inner_reg$D_IN;
	if (coarseFreq_limitError_inner_reg$EN)
	  coarseFreq_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitError_inner_reg$D_IN;
	if (coarseFreq_limitLastS_inner_reg$EN)
	  coarseFreq_limitLastS_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitLastS_inner_reg$D_IN;
	if (coarseFreq_limitXFix_inner_reg$EN)
	  coarseFreq_limitXFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitXFix_inner_reg$D_IN;
	if (coarseFreq_limitYFix_inner_reg$EN)
	  coarseFreq_limitYFix_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_limitYFix_inner_reg$D_IN;
	if (coarseFreq_n$EN)
	  coarseFreq_n <= `BSV_ASSIGNMENT_DELAY coarseFreq_n$D_IN;
	if (coarseFreq_samples$EN)
	  coarseFreq_samples <= `BSV_ASSIGNMENT_DELAY coarseFreq_samples$D_IN;
	if (coarseFreq_samples_1$EN)
	  coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_1$D_IN;
	if (coarseFreq_samples_10$EN)
	  coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_10$D_IN;
	if (coarseFreq_samples_11$EN)
	  coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_11$D_IN;
	if (coarseFreq_samples_12$EN)
	  coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_12$D_IN;
	if (coarseFreq_samples_13$EN)
	  coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_13$D_IN;
	if (coarseFreq_samples_14$EN)
	  coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_14$D_IN;
	if (coarseFreq_samples_15$EN)
	  coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_15$D_IN;
	if (coarseFreq_samples_16$EN)
	  coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_16$D_IN;
	if (coarseFreq_samples_17$EN)
	  coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_17$D_IN;
	if (coarseFreq_samples_18$EN)
	  coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_18$D_IN;
	if (coarseFreq_samples_19$EN)
	  coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_19$D_IN;
	if (coarseFreq_samples_2$EN)
	  coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_2$D_IN;
	if (coarseFreq_samples_3$EN)
	  coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_3$D_IN;
	if (coarseFreq_samples_4$EN)
	  coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_4$D_IN;
	if (coarseFreq_samples_5$EN)
	  coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_5$D_IN;
	if (coarseFreq_samples_6$EN)
	  coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_6$D_IN;
	if (coarseFreq_samples_7$EN)
	  coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_7$D_IN;
	if (coarseFreq_samples_8$EN)
	  coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_8$D_IN;
	if (coarseFreq_samples_9$EN)
	  coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_9$D_IN;
	if (coarseFreq_xFix$EN)
	  coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_xFix$D_IN;
	if (coarseFreq_yFix$EN)
	  coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_yFix$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coarseFreq_accumError = 48'hAAAAAAAAAAAA;
    coarseFreq_coarseErrorCalc = 1'h0;
    coarseFreq_coarseErrorCalc_1_1 = 1'h0;
    coarseFreq_coarseErrorCalc_2_1 = 6'h2A;
    coarseFreq_coarseErrorCalc_3_1 = 1'h0;
    coarseFreq_coarseErrorCalc_4 = 1'h0;
    coarseFreq_cordic_atanCalc = 1'h0;
    coarseFreq_cordic_atanCalc_1_1 = 1'h0;
    coarseFreq_cordic_atanCalc_2_1 = 4'hA;
    coarseFreq_cordic_atanCalc_3_1 = 1'h0;
    coarseFreq_cordic_atanCalc_4 = 1'h0;
    coarseFreq_cordic_limitX_inner_reg = 12'hAAA;
    coarseFreq_cordic_limitY_inner_reg = 12'hAAA;
    coarseFreq_cordic_limitZ_inner_reg = 12'hAAA;
    coarseFreq_cordic_n = 4'hA;
    coarseFreq_cordic_x_ = 24'hAAAAAA;
    coarseFreq_cordic_y_ = 24'hAAAAAA;
    coarseFreq_cordic_z_ = 24'hAAAAAA;
    coarseFreq_currSample = 48'hAAAAAAAAAAAA;
    coarseFreq_dummy = 1'h0;
    coarseFreq_fsError = 24'hAAAAAA;
    coarseFreq_lastSample = 48'hAAAAAAAAAAAA;
    coarseFreq_limitAccumE_inner_reg = 12'hAAA;
    coarseFreq_limitCpxFix_inner_reg = 12'hAAA;
    coarseFreq_limitCurrS_inner_reg = 12'hAAA;
    coarseFreq_limitError_inner_reg = 12'hAAA;
    coarseFreq_limitLastS_inner_reg = 12'hAAA;
    coarseFreq_limitXFix_inner_reg = 12'hAAA;
    coarseFreq_limitYFix_inner_reg = 12'hAAA;
    coarseFreq_n = 10'h2AA;
    coarseFreq_samples = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_1 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_10 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_11 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_12 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_13 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_14 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_15 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_16 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_17 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_18 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_19 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_2 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_3 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_4 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_5 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_6 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_7 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_8 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_9 = 48'hAAAAAAAAAAAA;
    coarseFreq_xFix = 24'hAAAAAA;
    coarseFreq_yFix = 24'hAAAAAA;
    fV = 24'hAAAAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd8 &&
	  (WILL_FIRE_RL_action_l36c23 || WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 35, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l35c9] and\n  [RL_action_l36c23, RL_action_l38c13, RL_action_f_update_l35c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l36c23 &&
	  (WILL_FIRE_RL_action_l38c13 || state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 36, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l36c23] and\n  [RL_action_l38c13, RL_action_f_update_l35c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c13 && state_mkFSMstate == 4'd11)
	$display("Error: \"Tb_tang.bsv\", line 38, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l38c13] and\n  [RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__689_AND_abort_wget__690_691_OR_sta_ETC___d1776 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 &&
	  (coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 74, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l74c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_cordic_atanCalc_2_1 == 4'd10 &&
	  coarseFreq_cordic_atanCalc_2_1 == 4'd11)
	$display("Error: \"../Cordic/Cordic.bsv\", line 86, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l86c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 55, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l55c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l56c12,\n  RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 56, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l56c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 57, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l57c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 58, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l58c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 59, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l59c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 67, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l67c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 61, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l61c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 73, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9] and\n  [RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l54c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l55c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l74c13 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd10 ||
	   coarseFreq_cordic_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 54, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l54c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l55c11,\n  RL_coarseFreq_cordic_atanCalc_action_l56c12,\n  RL_coarseFreq_cordic_atanCalc_action_l57c11,\n  RL_coarseFreq_cordic_atanCalc_action_l58c12,\n  RL_coarseFreq_cordic_atanCalc_action_l59c11,\n  RL_coarseFreq_cordic_atanCalc_action_l61c32,\n  RL_coarseFreq_cordic_atanCalc_action_l67c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l73c9,\n  RL_coarseFreq_cordic_atanCalc_action_l74c13,\n  RL_coarseFreq_cordic_atanCalc_action_l86c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l73c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l27c11 &&
	  (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2 ||
	   state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 27, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l27c11] and\n  [RL_action_l28c27, RL_action_l29c27, RL_action_l30c27, RL_action_l31c27,\n  RL_action_l32c27, RL_action_l33c27, RL_action_l34c27,\n  RL_action_f_init_l35c9, RL_action_l36c23, RL_action_l38c13,\n  RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd1 &&
	  (state_mkFSMstate == 4'd2 || state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 28, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c27] and\n  [RL_action_l29c27, RL_action_l30c27, RL_action_l31c27, RL_action_l32c27,\n  RL_action_l33c27, RL_action_l34c27, RL_action_f_init_l35c9,\n  RL_action_l36c23, RL_action_l38c13, RL_action_f_update_l35c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd2 &&
	  (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 29, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l29c27] and\n  [RL_action_l30c27, RL_action_l31c27, RL_action_l32c27, RL_action_l33c27,\n  RL_action_l34c27, RL_action_f_init_l35c9, RL_action_l36c23,\n  RL_action_l38c13, RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd3 &&
	  (state_mkFSMstate == 4'd4 || state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 30, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l30c27] and\n  [RL_action_l31c27, RL_action_l32c27, RL_action_l33c27, RL_action_l34c27,\n  RL_action_f_init_l35c9, RL_action_l36c23, RL_action_l38c13,\n  RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd4 &&
	  (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd6 ||
	   state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 31, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l31c27] and\n  [RL_action_l32c27, RL_action_l33c27, RL_action_l34c27,\n  RL_action_f_init_l35c9, RL_action_l36c23, RL_action_l38c13,\n  RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd6 &&
	  (state_mkFSMstate == 4'd7 || state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 33, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c27] and\n  [RL_action_l34c27, RL_action_f_init_l35c9, RL_action_l36c23,\n  RL_action_l38c13, RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd5 &&
	  (state_mkFSMstate == 4'd6 || state_mkFSMstate == 4'd7 ||
	   state_mkFSMstate == 4'd8 ||
	   WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 32, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l32c27] and\n  [RL_action_l33c27, RL_action_l34c27, RL_action_f_init_l35c9,\n  RL_action_l36c23, RL_action_l38c13, RL_action_f_update_l35c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd7 &&
	  (state_mkFSMstate == 4'd8 || WILL_FIRE_RL_action_l36c23 ||
	   WILL_FIRE_RL_action_l38c13 ||
	   state_mkFSMstate == 4'd11))
	$display("Error: \"Tb_tang.bsv\", line 34, column 27: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l34c27] and\n  [RL_action_f_init_l35c9, RL_action_l36c23, RL_action_l38c13,\n  RL_action_f_update_l35c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542[12] &&
	  fpart__h504208 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542[12] &&
	  fpart__h504208 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542[12] ||
	   fpart__h504208 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_99_BITS_47_TO__ETC___d1542));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504434);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504501);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504590);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504679);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504768);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h504857);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606[12] &&
	  fpart__h504994 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606[12] &&
	  fpart__h504994 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606[12] ||
	   fpart__h504994 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_99_BITS_23_TO__ETC___d1606));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505214);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505281);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505370);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505459);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505548);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31)
	$write("%0d", digit__h505637);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd1 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 96, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l97c20,\n  RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd2 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 97, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l97c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd3 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 98, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l98c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd4 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 99, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 100, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l100c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd7 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 99, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 101, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l101c22] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 103, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 104, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l104c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd10 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 111, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l111c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd11 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 112, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l112c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd12 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 119, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l119c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd13 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 120, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l120c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd15 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 123, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l123c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd14 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 121, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l121c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd16 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 124, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l124c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd17 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 125, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l125c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd18 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 133, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l133c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd19 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 134, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l134c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 103, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 137, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l137c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd22 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 138, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l138c16] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 147, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l147c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd23 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 146, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd25 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 148, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l148c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd26 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 149, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l149c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 150, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l150c19] and\n  [RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 151, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l151c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd30 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 158, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l158c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd29 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 157, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l157c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_2_1 == 6'd31 &&
	  coarseFreq_coarseErrorCalc_2_1 == 6'd32)
	$display("Error: \"CoarseFreq.bsv\", line 159, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l159c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l95c20 &&
	  (coarseFreq_coarseErrorCalc_2_1 == 6'd1 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd2 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd3 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l100c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l104c24 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd10 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd11 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd12 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd14 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd15 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd16 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd18 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd19 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l137c17 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd22 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd23 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l147c20 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd25 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd26 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l150c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l151c13 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd29 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd30 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd31 ||
	   coarseFreq_coarseErrorCalc_2_1 == 6'd32))
	$display("Error: \"CoarseFreq.bsv\", line 95, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l95c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l96c20,\n  RL_coarseFreq_coarseErrorCalc_action_l97c20,\n  RL_coarseFreq_coarseErrorCalc_action_l98c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_l100c20,\n  RL_coarseFreq_coarseErrorCalc_action_l101c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l99c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l104c24,\n  RL_coarseFreq_coarseErrorCalc_action_l111c23,\n  RL_coarseFreq_coarseErrorCalc_action_l112c23,\n  RL_coarseFreq_coarseErrorCalc_action_l119c23,\n  RL_coarseFreq_coarseErrorCalc_action_l120c23,\n  RL_coarseFreq_coarseErrorCalc_action_l121c23,\n  RL_coarseFreq_coarseErrorCalc_action_l123c24,\n  RL_coarseFreq_coarseErrorCalc_action_l124c23,\n  RL_coarseFreq_coarseErrorCalc_action_l125c23,\n  RL_coarseFreq_coarseErrorCalc_action_l133c24,\n  RL_coarseFreq_coarseErrorCalc_action_l134c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l103c9,\n  RL_coarseFreq_coarseErrorCalc_action_l137c17,\n  RL_coarseFreq_coarseErrorCalc_action_l138c16,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l146c9,\n  RL_coarseFreq_coarseErrorCalc_action_l147c20,\n  RL_coarseFreq_coarseErrorCalc_action_l148c20,\n  RL_coarseFreq_coarseErrorCalc_action_l149c20,\n  RL_coarseFreq_coarseErrorCalc_action_l150c19,\n  RL_coarseFreq_coarseErrorCalc_action_l151c13,\n  RL_coarseFreq_coarseErrorCalc_action_l157c17,\n  RL_coarseFreq_coarseErrorCalc_action_l158c17,\n  RL_coarseFreq_coarseErrorCalc_action_l159c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l146c9] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

