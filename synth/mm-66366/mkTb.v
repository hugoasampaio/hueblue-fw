//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 13:50:15 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire mmTed_tedErrorCalc_start_wire$whas,
       mmTed_tedErrorCalc_state_set_pw$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register fV
  reg [15 : 0] fV;
  wire [15 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register mmTed_iIn
  reg [11 : 0] mmTed_iIn;
  wire [11 : 0] mmTed_iIn$D_IN;
  wire mmTed_iIn$EN;

  // register mmTed_iOut
  reg [11 : 0] mmTed_iOut;
  wire [11 : 0] mmTed_iOut$D_IN;
  wire mmTed_iOut$EN;

  // register mmTed_mmVal
  reg [9 : 0] mmTed_mmVal;
  wire [9 : 0] mmTed_mmVal$D_IN;
  wire mmTed_mmVal$EN;

  // register mmTed_mu
  reg [20 : 0] mmTed_mu;
  wire [20 : 0] mmTed_mu$D_IN;
  wire mmTed_mu$EN;

  // register mmTed_n
  reg [11 : 0] mmTed_n;
  reg [11 : 0] mmTed_n$D_IN;
  wire mmTed_n$EN;

  // register mmTed_outRail_0
  reg [31 : 0] mmTed_outRail_0;
  wire [31 : 0] mmTed_outRail_0$D_IN;
  wire mmTed_outRail_0$EN;

  // register mmTed_outRail_1
  reg [31 : 0] mmTed_outRail_1;
  wire [31 : 0] mmTed_outRail_1$D_IN;
  wire mmTed_outRail_1$EN;

  // register mmTed_outRail_10
  reg [31 : 0] mmTed_outRail_10;
  wire [31 : 0] mmTed_outRail_10$D_IN;
  wire mmTed_outRail_10$EN;

  // register mmTed_outRail_11
  reg [31 : 0] mmTed_outRail_11;
  wire [31 : 0] mmTed_outRail_11$D_IN;
  wire mmTed_outRail_11$EN;

  // register mmTed_outRail_12
  reg [31 : 0] mmTed_outRail_12;
  wire [31 : 0] mmTed_outRail_12$D_IN;
  wire mmTed_outRail_12$EN;

  // register mmTed_outRail_13
  reg [31 : 0] mmTed_outRail_13;
  wire [31 : 0] mmTed_outRail_13$D_IN;
  wire mmTed_outRail_13$EN;

  // register mmTed_outRail_14
  reg [31 : 0] mmTed_outRail_14;
  wire [31 : 0] mmTed_outRail_14$D_IN;
  wire mmTed_outRail_14$EN;

  // register mmTed_outRail_15
  reg [31 : 0] mmTed_outRail_15;
  wire [31 : 0] mmTed_outRail_15$D_IN;
  wire mmTed_outRail_15$EN;

  // register mmTed_outRail_16
  reg [31 : 0] mmTed_outRail_16;
  wire [31 : 0] mmTed_outRail_16$D_IN;
  wire mmTed_outRail_16$EN;

  // register mmTed_outRail_17
  reg [31 : 0] mmTed_outRail_17;
  wire [31 : 0] mmTed_outRail_17$D_IN;
  wire mmTed_outRail_17$EN;

  // register mmTed_outRail_18
  reg [31 : 0] mmTed_outRail_18;
  wire [31 : 0] mmTed_outRail_18$D_IN;
  wire mmTed_outRail_18$EN;

  // register mmTed_outRail_19
  reg [31 : 0] mmTed_outRail_19;
  wire [31 : 0] mmTed_outRail_19$D_IN;
  wire mmTed_outRail_19$EN;

  // register mmTed_outRail_2
  reg [31 : 0] mmTed_outRail_2;
  wire [31 : 0] mmTed_outRail_2$D_IN;
  wire mmTed_outRail_2$EN;

  // register mmTed_outRail_20
  reg [31 : 0] mmTed_outRail_20;
  wire [31 : 0] mmTed_outRail_20$D_IN;
  wire mmTed_outRail_20$EN;

  // register mmTed_outRail_21
  reg [31 : 0] mmTed_outRail_21;
  wire [31 : 0] mmTed_outRail_21$D_IN;
  wire mmTed_outRail_21$EN;

  // register mmTed_outRail_22
  reg [31 : 0] mmTed_outRail_22;
  wire [31 : 0] mmTed_outRail_22$D_IN;
  wire mmTed_outRail_22$EN;

  // register mmTed_outRail_23
  reg [31 : 0] mmTed_outRail_23;
  wire [31 : 0] mmTed_outRail_23$D_IN;
  wire mmTed_outRail_23$EN;

  // register mmTed_outRail_24
  reg [31 : 0] mmTed_outRail_24;
  wire [31 : 0] mmTed_outRail_24$D_IN;
  wire mmTed_outRail_24$EN;

  // register mmTed_outRail_3
  reg [31 : 0] mmTed_outRail_3;
  wire [31 : 0] mmTed_outRail_3$D_IN;
  wire mmTed_outRail_3$EN;

  // register mmTed_outRail_4
  reg [31 : 0] mmTed_outRail_4;
  wire [31 : 0] mmTed_outRail_4$D_IN;
  wire mmTed_outRail_4$EN;

  // register mmTed_outRail_5
  reg [31 : 0] mmTed_outRail_5;
  wire [31 : 0] mmTed_outRail_5$D_IN;
  wire mmTed_outRail_5$EN;

  // register mmTed_outRail_6
  reg [31 : 0] mmTed_outRail_6;
  wire [31 : 0] mmTed_outRail_6$D_IN;
  wire mmTed_outRail_6$EN;

  // register mmTed_outRail_7
  reg [31 : 0] mmTed_outRail_7;
  wire [31 : 0] mmTed_outRail_7$D_IN;
  wire mmTed_outRail_7$EN;

  // register mmTed_outRail_8
  reg [31 : 0] mmTed_outRail_8;
  wire [31 : 0] mmTed_outRail_8$D_IN;
  wire mmTed_outRail_8$EN;

  // register mmTed_outRail_9
  reg [31 : 0] mmTed_outRail_9;
  wire [31 : 0] mmTed_outRail_9$D_IN;
  wire mmTed_outRail_9$EN;

  // register mmTed_out_0
  reg [19 : 0] mmTed_out_0;
  wire [19 : 0] mmTed_out_0$D_IN;
  wire mmTed_out_0$EN;

  // register mmTed_out_1
  reg [19 : 0] mmTed_out_1;
  wire [19 : 0] mmTed_out_1$D_IN;
  wire mmTed_out_1$EN;

  // register mmTed_out_10
  reg [19 : 0] mmTed_out_10;
  wire [19 : 0] mmTed_out_10$D_IN;
  wire mmTed_out_10$EN;

  // register mmTed_out_11
  reg [19 : 0] mmTed_out_11;
  wire [19 : 0] mmTed_out_11$D_IN;
  wire mmTed_out_11$EN;

  // register mmTed_out_12
  reg [19 : 0] mmTed_out_12;
  wire [19 : 0] mmTed_out_12$D_IN;
  wire mmTed_out_12$EN;

  // register mmTed_out_13
  reg [19 : 0] mmTed_out_13;
  wire [19 : 0] mmTed_out_13$D_IN;
  wire mmTed_out_13$EN;

  // register mmTed_out_14
  reg [19 : 0] mmTed_out_14;
  wire [19 : 0] mmTed_out_14$D_IN;
  wire mmTed_out_14$EN;

  // register mmTed_out_15
  reg [19 : 0] mmTed_out_15;
  wire [19 : 0] mmTed_out_15$D_IN;
  wire mmTed_out_15$EN;

  // register mmTed_out_16
  reg [19 : 0] mmTed_out_16;
  wire [19 : 0] mmTed_out_16$D_IN;
  wire mmTed_out_16$EN;

  // register mmTed_out_17
  reg [19 : 0] mmTed_out_17;
  wire [19 : 0] mmTed_out_17$D_IN;
  wire mmTed_out_17$EN;

  // register mmTed_out_18
  reg [19 : 0] mmTed_out_18;
  wire [19 : 0] mmTed_out_18$D_IN;
  wire mmTed_out_18$EN;

  // register mmTed_out_19
  reg [19 : 0] mmTed_out_19;
  wire [19 : 0] mmTed_out_19$D_IN;
  wire mmTed_out_19$EN;

  // register mmTed_out_2
  reg [19 : 0] mmTed_out_2;
  wire [19 : 0] mmTed_out_2$D_IN;
  wire mmTed_out_2$EN;

  // register mmTed_out_20
  reg [19 : 0] mmTed_out_20;
  wire [19 : 0] mmTed_out_20$D_IN;
  wire mmTed_out_20$EN;

  // register mmTed_out_21
  reg [19 : 0] mmTed_out_21;
  wire [19 : 0] mmTed_out_21$D_IN;
  wire mmTed_out_21$EN;

  // register mmTed_out_22
  reg [19 : 0] mmTed_out_22;
  wire [19 : 0] mmTed_out_22$D_IN;
  wire mmTed_out_22$EN;

  // register mmTed_out_23
  reg [19 : 0] mmTed_out_23;
  wire [19 : 0] mmTed_out_23$D_IN;
  wire mmTed_out_23$EN;

  // register mmTed_out_24
  reg [19 : 0] mmTed_out_24;
  wire [19 : 0] mmTed_out_24$D_IN;
  wire mmTed_out_24$EN;

  // register mmTed_out_3
  reg [19 : 0] mmTed_out_3;
  wire [19 : 0] mmTed_out_3$D_IN;
  wire mmTed_out_3$EN;

  // register mmTed_out_4
  reg [19 : 0] mmTed_out_4;
  wire [19 : 0] mmTed_out_4$D_IN;
  wire mmTed_out_4$EN;

  // register mmTed_out_5
  reg [19 : 0] mmTed_out_5;
  wire [19 : 0] mmTed_out_5$D_IN;
  wire mmTed_out_5$EN;

  // register mmTed_out_6
  reg [19 : 0] mmTed_out_6;
  wire [19 : 0] mmTed_out_6$D_IN;
  wire mmTed_out_6$EN;

  // register mmTed_out_7
  reg [19 : 0] mmTed_out_7;
  wire [19 : 0] mmTed_out_7$D_IN;
  wire mmTed_out_7$EN;

  // register mmTed_out_8
  reg [19 : 0] mmTed_out_8;
  wire [19 : 0] mmTed_out_8$D_IN;
  wire mmTed_out_8$EN;

  // register mmTed_out_9
  reg [19 : 0] mmTed_out_9;
  wire [19 : 0] mmTed_out_9$D_IN;
  wire mmTed_out_9$EN;

  // register mmTed_samples_0
  reg [31 : 0] mmTed_samples_0;
  wire [31 : 0] mmTed_samples_0$D_IN;
  wire mmTed_samples_0$EN;

  // register mmTed_samples_1
  reg [31 : 0] mmTed_samples_1;
  wire [31 : 0] mmTed_samples_1$D_IN;
  wire mmTed_samples_1$EN;

  // register mmTed_samples_10
  reg [31 : 0] mmTed_samples_10;
  wire [31 : 0] mmTed_samples_10$D_IN;
  wire mmTed_samples_10$EN;

  // register mmTed_samples_11
  reg [31 : 0] mmTed_samples_11;
  wire [31 : 0] mmTed_samples_11$D_IN;
  wire mmTed_samples_11$EN;

  // register mmTed_samples_12
  reg [31 : 0] mmTed_samples_12;
  wire [31 : 0] mmTed_samples_12$D_IN;
  wire mmTed_samples_12$EN;

  // register mmTed_samples_13
  reg [31 : 0] mmTed_samples_13;
  wire [31 : 0] mmTed_samples_13$D_IN;
  wire mmTed_samples_13$EN;

  // register mmTed_samples_14
  reg [31 : 0] mmTed_samples_14;
  wire [31 : 0] mmTed_samples_14$D_IN;
  wire mmTed_samples_14$EN;

  // register mmTed_samples_15
  reg [31 : 0] mmTed_samples_15;
  wire [31 : 0] mmTed_samples_15$D_IN;
  wire mmTed_samples_15$EN;

  // register mmTed_samples_16
  reg [31 : 0] mmTed_samples_16;
  wire [31 : 0] mmTed_samples_16$D_IN;
  wire mmTed_samples_16$EN;

  // register mmTed_samples_17
  reg [31 : 0] mmTed_samples_17;
  wire [31 : 0] mmTed_samples_17$D_IN;
  wire mmTed_samples_17$EN;

  // register mmTed_samples_18
  reg [31 : 0] mmTed_samples_18;
  wire [31 : 0] mmTed_samples_18$D_IN;
  wire mmTed_samples_18$EN;

  // register mmTed_samples_19
  reg [31 : 0] mmTed_samples_19;
  wire [31 : 0] mmTed_samples_19$D_IN;
  wire mmTed_samples_19$EN;

  // register mmTed_samples_2
  reg [31 : 0] mmTed_samples_2;
  wire [31 : 0] mmTed_samples_2$D_IN;
  wire mmTed_samples_2$EN;

  // register mmTed_samples_20
  reg [31 : 0] mmTed_samples_20;
  wire [31 : 0] mmTed_samples_20$D_IN;
  wire mmTed_samples_20$EN;

  // register mmTed_samples_21
  reg [31 : 0] mmTed_samples_21;
  wire [31 : 0] mmTed_samples_21$D_IN;
  wire mmTed_samples_21$EN;

  // register mmTed_samples_22
  reg [31 : 0] mmTed_samples_22;
  wire [31 : 0] mmTed_samples_22$D_IN;
  wire mmTed_samples_22$EN;

  // register mmTed_samples_23
  reg [31 : 0] mmTed_samples_23;
  wire [31 : 0] mmTed_samples_23$D_IN;
  wire mmTed_samples_23$EN;

  // register mmTed_samples_24
  reg [31 : 0] mmTed_samples_24;
  wire [31 : 0] mmTed_samples_24$D_IN;
  wire mmTed_samples_24$EN;

  // register mmTed_samples_3
  reg [31 : 0] mmTed_samples_3;
  wire [31 : 0] mmTed_samples_3$D_IN;
  wire mmTed_samples_3$EN;

  // register mmTed_samples_4
  reg [31 : 0] mmTed_samples_4;
  wire [31 : 0] mmTed_samples_4$D_IN;
  wire mmTed_samples_4$EN;

  // register mmTed_samples_5
  reg [31 : 0] mmTed_samples_5;
  wire [31 : 0] mmTed_samples_5$D_IN;
  wire mmTed_samples_5$EN;

  // register mmTed_samples_6
  reg [31 : 0] mmTed_samples_6;
  wire [31 : 0] mmTed_samples_6$D_IN;
  wire mmTed_samples_6$EN;

  // register mmTed_samples_7
  reg [31 : 0] mmTed_samples_7;
  wire [31 : 0] mmTed_samples_7$D_IN;
  wire mmTed_samples_7$EN;

  // register mmTed_samples_8
  reg [31 : 0] mmTed_samples_8;
  wire [31 : 0] mmTed_samples_8$D_IN;
  wire mmTed_samples_8$EN;

  // register mmTed_samples_9
  reg [31 : 0] mmTed_samples_9;
  wire [31 : 0] mmTed_samples_9$D_IN;
  wire mmTed_samples_9$EN;

  // register mmTed_tedErrorCalc_start_reg
  reg mmTed_tedErrorCalc_start_reg;
  wire mmTed_tedErrorCalc_start_reg$D_IN, mmTed_tedErrorCalc_start_reg$EN;

  // register mmTed_tedErrorCalc_start_reg_1
  reg mmTed_tedErrorCalc_start_reg_1;
  wire mmTed_tedErrorCalc_start_reg_1$D_IN, mmTed_tedErrorCalc_start_reg_1$EN;

  // register mmTed_tedErrorCalc_state_can_overlap
  reg mmTed_tedErrorCalc_state_can_overlap;
  wire mmTed_tedErrorCalc_state_can_overlap$D_IN,
       mmTed_tedErrorCalc_state_can_overlap$EN;

  // register mmTed_tedErrorCalc_state_fired
  reg mmTed_tedErrorCalc_state_fired;
  wire mmTed_tedErrorCalc_state_fired$D_IN, mmTed_tedErrorCalc_state_fired$EN;

  // register mmTed_tedErrorCalc_state_mkFSMstate
  reg [4 : 0] mmTed_tedErrorCalc_state_mkFSMstate;
  reg [4 : 0] mmTed_tedErrorCalc_state_mkFSMstate$D_IN;
  wire mmTed_tedErrorCalc_state_mkFSMstate$EN;

  // register mmTed_x
  reg [19 : 0] mmTed_x;
  wire [19 : 0] mmTed_x$D_IN;
  wire mmTed_x$EN;

  // register mmTed_xx
  reg [31 : 0] mmTed_xx;
  wire [31 : 0] mmTed_xx$D_IN;
  wire mmTed_xx$EN;

  // register mmTed_y
  reg [19 : 0] mmTed_y;
  wire [19 : 0] mmTed_y$D_IN;
  wire mmTed_y$EN;

  // register mmTed_yy
  reg [31 : 0] mmTed_yy;
  wire [31 : 0] mmTed_yy$D_IN;
  wire mmTed_yy$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [20 : 0] outV;
  wire [20 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule mmTed_newSample
  wire [31 : 0] mmTed_newSample$D_IN, mmTed_newSample$D_OUT;
  wire mmTed_newSample$CLR,
       mmTed_newSample$DEQ,
       mmTed_newSample$EMPTY_N,
       mmTed_newSample$ENQ,
       mmTed_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l38c18,
       WILL_FIRE_RL_action_l39c13,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44,
       WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1;

  // inputs to muxes for submodule ports
  wire [20 : 0] MUX_mmTed_mu$write_1__VAL_1, MUX_mmTed_mu$write_1__VAL_2;
  wire [11 : 0] MUX_mmTed_n$write_1__VAL_1;
  wire [9 : 0] MUX_n$write_1__VAL_1;
  wire MUX_mmTed_n$write_1__SEL_1,
       MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590,
	       SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676,
	       SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679,
	       SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486,
	       SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490,
	       SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497,
	       x__h53855,
	       x__h53900;
  reg [5 : 0] SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344,
	      SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886,
	      SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401,
	      SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938,
	      fpart__h101513,
	      fpart__h102304;
  reg [3 : 0] SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562,
	      SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675,
	      SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678,
	      SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459,
	      SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489,
	      SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495,
	      SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146,
	      SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317,
	      SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885,
	      SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212,
	      SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374,
	      SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937,
	      res_i__h53816,
	      res_i__h53861;
  wire [77 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1165,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1168,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1176,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1185,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1194,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1203,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1231,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1234,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1242,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1251,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1260,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1269,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1171,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1237,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1180,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1246,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1189,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1255,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1198,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1264,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1207,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1273;
  wire [38 : 0] digit__h101744,
		digit__h101811,
		digit__h101900,
		digit__h101989,
		digit__h102078,
		digit__h102167,
		digit__h102529,
		digit__h102596,
		digit__h102685,
		digit__h102774,
		digit__h102863,
		digit__h102952,
		tx01809_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1,
		tx01898_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2,
		tx01987_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3,
		tx02076_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4,
		tx02165_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5,
		tx02594_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6,
		tx02683_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7,
		tx02772_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8,
		tx02861_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9,
		tx02950_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10,
		tx__h101809,
		tx__h101898,
		tx__h101987,
		tx__h102076,
		tx__h102165,
		tx__h102594,
		tx__h102683,
		tx__h102772,
		tx__h102861,
		tx__h102950,
		y__h101957,
		y__h102046,
		y__h102135,
		y__h102224,
		y__h102742,
		y__h102831,
		y__h102920,
		y__h103009;
  wire [31 : 0] IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d760,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d837,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d640,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d799,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d502,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d595,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_ETC___d594,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_ETC___d501,
		x__h66979,
		x__h67868,
		x__h69835,
		x__h73327,
		x__h73809,
		x__h75674,
		x__h78969,
		x__h80843;
  wire [20 : 0] x__h97836;
  wire [19 : 0] IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d608,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d728,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d774,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d851,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d515,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d654,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d695,
		IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d813,
		IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d902,
		IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d992,
		IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1030,
		IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d953,
		IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084,
		_19_MUL_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_m_ETC___d1082,
		x__h66745,
		x__h67651,
		x__h69618,
		x__h73110,
		x__h73592,
		x__h75457,
		x__h78752,
		x__h80626,
		x__h91407,
		x__h92983,
		x__h94481,
		x__h95934;
  wire [15 : 0] IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629,
		IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749,
		SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681,
		SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492,
		x__h66524,
		x__h71498,
		x__h71518,
		x__h77130,
		x__h77150,
		x__h78534;
  wire [13 : 0] IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099,
		IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d1006,
		IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d916,
		IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1044,
		IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d967,
		IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1096,
		x__h91232,
		x__h92808,
		x__h94306,
		x__h95759;
  wire [11 : 0] in2_i__h97867,
		x__h67385,
		x__h67896,
		y_f__h68632,
		y_f__h70702,
		y_f__h72124,
		y_f__h74471,
		y_f__h76334,
		y_f__h77756,
		y_f__h79640,
		y_f__h81514;
  wire [9 : 0] SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888,
	       SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940,
	       x__h91056,
	       x__h91575,
	       x__h93063,
	       x__h93083,
	       x__h94130,
	       x__h95999,
	       x__h98339;
  wire [8 : 0] in2_f__h97868;
  wire [5 : 0] res_f__h99369,
	       x__h101774,
	       x__h102559,
	       y_avValue_snd__h101708,
	       y_avValue_snd__h102493,
	       y_f__h92032,
	       y_f__h93520,
	       y_f__h94983,
	       y_f__h96436,
	       y_f__h98777;
  wire [4 : 0] SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147,
	       SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213;
  wire [3 : 0] imagA_i__h66144, realA_i__h65934, x__h97870;
  wire abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369,
       mmTed_iIn_2_PLUS_16_3_ULT_24___d94,
       mmTed_iOut_7_ULT_24___d91,
       mmTed_n_6_ULT_24___d51,
       mmTed_n_6_ULT_mmTed_iOut_7___d38,
       mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1289,
       n_329_ULT_10___d1330;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[20:9] ;

  // submodule mmTed_newSample
  FIFO2 #(.width(32'd32), .guarded(1'd1)) mmTed_newSample(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(mmTed_newSample$D_IN),
							  .ENQ(mmTed_newSample$ENQ),
							  .DEQ(mmTed_newSample$DEQ),
							  .CLR(mmTed_newSample$CLR),
							  .D_OUT(mmTed_newSample$D_OUT),
							  .FULL_N(mmTed_newSample$FULL_N),
							  .EMPTY_N(mmTed_newSample$EMPTY_N));

  // rule RL_action_l38c18
  assign WILL_FIRE_RL_action_l38c18 =
	     mmTed_newSample$FULL_N && n_329_ULT_10___d1330 &&
	     (state_mkFSMstate == 3'd2 || state_mkFSMstate == 3'd5) ;

  // rule RL_action_l39c13
  assign WILL_FIRE_RL_action_l39c13 =
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1289 &&
	     !mmTed_tedErrorCalc_start_reg &&
	     state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 3'd0 ||
	     !n_329_ULT_10___d1330 && start_wire$whas &&
	     state_mkFSMstate == 3'd2 ||
	     !n_329_ULT_10___d1330 && start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_329_ULT_10___d1330 && !start_wire$whas &&
	     state_mkFSMstate == 3'd2 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_329_ULT_10___d1330 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_mmTed_tedErrorCalc_action_l38c20
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 =
	     mmTed_newSample$EMPTY_N && mmTed_n_6_ULT_24___d51 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ;

  // rule RL_mmTed_tedErrorCalc_action_l39c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 =
	     mmTed_newSample$EMPTY_N &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd2 ;

  // rule RL_mmTed_tedErrorCalc_action_l57c44
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 =
	     mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd18) ;

  // rule RL_mmTed_tedErrorCalc_fsm_start
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start =
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1289 &&
	     mmTed_tedErrorCalc_start_reg ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l37c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 =
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd0 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_mmTed_tedErrorCalc_action_l42c16
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 =
	     !mmTed_n_6_ULT_24___d51 && mmTed_iOut_7_ULT_24___d91 &&
	     mmTed_iIn_2_PLUS_16_3_ULT_24___d94 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ||
	     mmTed_iOut_7_ULT_24___d91 &&
	     mmTed_iIn_2_PLUS_16_3_ULT_24___d94 &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd15 ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l57c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 =
	     !mmTed_n_6_ULT_24___d51 &&
	     (!mmTed_iOut_7_ULT_24___d91 ||
	      !mmTed_iIn_2_PLUS_16_3_ULT_24___d94) &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ||
	     (!mmTed_iOut_7_ULT_24___d91 ||
	      !mmTed_iIn_2_PLUS_16_3_ULT_24___d94) &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd15 ;

  // rule RL_mmTed_tedErrorCalc_idle_l36c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ;

  // rule RL_mmTed_tedErrorCalc_idle_l36c22_1
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd18 ;

  // inputs to muxes for submodule ports
  assign MUX_mmTed_n$write_1__SEL_1 =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ;
  assign MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_mmTed_mu$write_1__VAL_1 =
	     x__h97836 + { in2_i__h97867, in2_f__h97868 } ;
  assign MUX_mmTed_mu$write_1__VAL_2 = { 12'd0, mmTed_mu[8:0] } ;
  assign MUX_mmTed_n$write_1__VAL_1 = mmTed_n + 12'd1 ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign mmTed_tedErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_start_reg_1 &&
	     !mmTed_tedErrorCalc_state_fired ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign mmTed_tedErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 3'd4 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     WILL_FIRE_RL_action_l38c18 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register fV
  assign fV$D_IN = { fV[15:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register mmTed_iIn
  assign mmTed_iIn$D_IN = mmTed_iIn + mmTed_mu[20:9] ;
  assign mmTed_iIn$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ;

  // register mmTed_iOut
  assign mmTed_iOut$D_IN = mmTed_iOut + 12'd1 ;
  assign mmTed_iOut$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ;

  // register mmTed_mmVal
  assign mmTed_mmVal$D_IN = mmTed_y[19:10] - mmTed_x[19:10] ;
  assign mmTed_mmVal$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ;

  // register mmTed_mu
  assign mmTed_mu$D_IN =
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11) ?
	       MUX_mmTed_mu$write_1__VAL_1 :
	       MUX_mmTed_mu$write_1__VAL_2 ;
  assign mmTed_mu$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ;

  // register mmTed_n
  always@(MUX_mmTed_n$write_1__SEL_1 or
	  MUX_mmTed_n$write_1__VAL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_n$write_1__SEL_1: mmTed_n$D_IN = MUX_mmTed_n$write_1__VAL_1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9:
	  mmTed_n$D_IN = 12'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9:
	  mmTed_n$D_IN = 12'd2;
      default: mmTed_n$D_IN = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_n$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ;

  // register mmTed_outRail_0
  assign mmTed_outRail_0$D_IN =
	     { realA_i__h65934, 12'd0, imagA_i__h66144, 12'd0 } ;
  assign mmTed_outRail_0$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd0 ;

  // register mmTed_outRail_1
  assign mmTed_outRail_1$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_1$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd1 ;

  // register mmTed_outRail_10
  assign mmTed_outRail_10$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_10$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd10 ;

  // register mmTed_outRail_11
  assign mmTed_outRail_11$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_11$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd11 ;

  // register mmTed_outRail_12
  assign mmTed_outRail_12$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_12$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd12 ;

  // register mmTed_outRail_13
  assign mmTed_outRail_13$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_13$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd13 ;

  // register mmTed_outRail_14
  assign mmTed_outRail_14$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_14$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd14 ;

  // register mmTed_outRail_15
  assign mmTed_outRail_15$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_15$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd15 ;

  // register mmTed_outRail_16
  assign mmTed_outRail_16$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_16$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd16 ;

  // register mmTed_outRail_17
  assign mmTed_outRail_17$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_17$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd17 ;

  // register mmTed_outRail_18
  assign mmTed_outRail_18$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_18$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd18 ;

  // register mmTed_outRail_19
  assign mmTed_outRail_19$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_19$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd19 ;

  // register mmTed_outRail_2
  assign mmTed_outRail_2$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_2$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd2 ;

  // register mmTed_outRail_20
  assign mmTed_outRail_20$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_20$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd20 ;

  // register mmTed_outRail_21
  assign mmTed_outRail_21$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_21$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd21 ;

  // register mmTed_outRail_22
  assign mmTed_outRail_22$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_22$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd22 ;

  // register mmTed_outRail_23
  assign mmTed_outRail_23$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_23$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd23 ;

  // register mmTed_outRail_24
  assign mmTed_outRail_24$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_24$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd24 ;

  // register mmTed_outRail_3
  assign mmTed_outRail_3$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_3$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd3 ;

  // register mmTed_outRail_4
  assign mmTed_outRail_4$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_4$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd4 ;

  // register mmTed_outRail_5
  assign mmTed_outRail_5$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_5$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd5 ;

  // register mmTed_outRail_6
  assign mmTed_outRail_6$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_6$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd6 ;

  // register mmTed_outRail_7
  assign mmTed_outRail_7$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_7$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd7 ;

  // register mmTed_outRail_8
  assign mmTed_outRail_8$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_8$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd8 ;

  // register mmTed_outRail_9
  assign mmTed_outRail_9$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_9$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd9 ;

  // register mmTed_out_0
  assign mmTed_out_0$D_IN =
	     { res_i__h53816,
	       x__h53855[11:6],
	       res_i__h53861,
	       x__h53900[11:6] } ;
  assign mmTed_out_0$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd0 ;

  // register mmTed_out_1
  assign mmTed_out_1$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd1 ;

  // register mmTed_out_10
  assign mmTed_out_10$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd10 ;

  // register mmTed_out_11
  assign mmTed_out_11$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd11 ;

  // register mmTed_out_12
  assign mmTed_out_12$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd12 ;

  // register mmTed_out_13
  assign mmTed_out_13$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd13 ;

  // register mmTed_out_14
  assign mmTed_out_14$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd14 ;

  // register mmTed_out_15
  assign mmTed_out_15$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd15 ;

  // register mmTed_out_16
  assign mmTed_out_16$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd16 ;

  // register mmTed_out_17
  assign mmTed_out_17$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd17 ;

  // register mmTed_out_18
  assign mmTed_out_18$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd18 ;

  // register mmTed_out_19
  assign mmTed_out_19$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd19 ;

  // register mmTed_out_2
  assign mmTed_out_2$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd2 ;

  // register mmTed_out_20
  assign mmTed_out_20$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd20 ;

  // register mmTed_out_21
  assign mmTed_out_21$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd21 ;

  // register mmTed_out_22
  assign mmTed_out_22$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd22 ;

  // register mmTed_out_23
  assign mmTed_out_23$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd23 ;

  // register mmTed_out_24
  assign mmTed_out_24$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd24 ;

  // register mmTed_out_3
  assign mmTed_out_3$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd3 ;

  // register mmTed_out_4
  assign mmTed_out_4$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd4 ;

  // register mmTed_out_5
  assign mmTed_out_5$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd5 ;

  // register mmTed_out_6
  assign mmTed_out_6$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd6 ;

  // register mmTed_out_7
  assign mmTed_out_7$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd7 ;

  // register mmTed_out_8
  assign mmTed_out_8$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd8 ;

  // register mmTed_out_9
  assign mmTed_out_9$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd9 ;

  // register mmTed_samples_0
  assign mmTed_samples_0$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_0$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd0 ;

  // register mmTed_samples_1
  assign mmTed_samples_1$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd1 ;

  // register mmTed_samples_10
  assign mmTed_samples_10$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd10 ;

  // register mmTed_samples_11
  assign mmTed_samples_11$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd11 ;

  // register mmTed_samples_12
  assign mmTed_samples_12$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd12 ;

  // register mmTed_samples_13
  assign mmTed_samples_13$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd13 ;

  // register mmTed_samples_14
  assign mmTed_samples_14$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd14 ;

  // register mmTed_samples_15
  assign mmTed_samples_15$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd15 ;

  // register mmTed_samples_16
  assign mmTed_samples_16$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd16 ;

  // register mmTed_samples_17
  assign mmTed_samples_17$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd17 ;

  // register mmTed_samples_18
  assign mmTed_samples_18$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd18 ;

  // register mmTed_samples_19
  assign mmTed_samples_19$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd19 ;

  // register mmTed_samples_2
  assign mmTed_samples_2$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd2 ;

  // register mmTed_samples_20
  assign mmTed_samples_20$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd20 ;

  // register mmTed_samples_21
  assign mmTed_samples_21$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd21 ;

  // register mmTed_samples_22
  assign mmTed_samples_22$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd22 ;

  // register mmTed_samples_23
  assign mmTed_samples_23$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd23 ;

  // register mmTed_samples_24
  assign mmTed_samples_24$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd24 ;

  // register mmTed_samples_3
  assign mmTed_samples_3$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd3 ;

  // register mmTed_samples_4
  assign mmTed_samples_4$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd4 ;

  // register mmTed_samples_5
  assign mmTed_samples_5$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd5 ;

  // register mmTed_samples_6
  assign mmTed_samples_6$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd6 ;

  // register mmTed_samples_7
  assign mmTed_samples_7$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd7 ;

  // register mmTed_samples_8
  assign mmTed_samples_8$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd8 ;

  // register mmTed_samples_9
  assign mmTed_samples_9$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd9 ;

  // register mmTed_tedErrorCalc_start_reg
  assign mmTed_tedErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ;
  assign mmTed_tedErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1289 &&
	     !mmTed_tedErrorCalc_start_reg ;

  // register mmTed_tedErrorCalc_start_reg_1
  assign mmTed_tedErrorCalc_start_reg_1$D_IN =
	     mmTed_tedErrorCalc_start_wire$whas ;
  assign mmTed_tedErrorCalc_start_reg_1$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_can_overlap
  assign mmTed_tedErrorCalc_state_can_overlap$D_IN =
	     mmTed_tedErrorCalc_state_set_pw$whas ||
	     mmTed_tedErrorCalc_state_can_overlap ;
  assign mmTed_tedErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_fired
  assign mmTed_tedErrorCalc_state_fired$D_IN =
	     mmTed_tedErrorCalc_state_set_pw$whas ;
  assign mmTed_tedErrorCalc_state_fired$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_mkFSMstate
  always@(MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 or
	  mmTed_tedErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd3:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd5:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd6:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd7:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd8:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd10:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd11:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd12:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd13:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd14:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd17:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      default: mmTed_tedErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_tedErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ;

  // register mmTed_x
  assign mmTed_x$D_IN = { mmTed_xx[31:22], mmTed_xx[15:6] } ;
  assign mmTed_x$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ;

  // register mmTed_xx
  assign mmTed_xx$D_IN = { x__h66524, x__h78534 } ;
  assign mmTed_xx$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ;

  // register mmTed_y
  assign mmTed_y$D_IN = { x__h91056, x__h94130 } ;
  assign mmTed_y$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ;

  // register mmTed_yy
  assign mmTed_yy$D_IN =
	     { IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629,
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749 } ;
  assign mmTed_yy$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 3'd4) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd1 ;

  // register outV
  assign outV$D_IN = mmTed_mu ;
  assign outV$EN = WILL_FIRE_RL_action_l39c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l38c18 or WILL_FIRE_RL_action_l39c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 3'd1;
      state_mkFSMstate == 3'd1: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l38c18: state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l39c13: state_mkFSMstate$D_IN = 3'd4;
      state_mkFSMstate == 3'd4: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l38c18 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     state_mkFSMstate == 3'd4 ;

  // submodule mmTed_newSample
  assign mmTed_newSample$D_IN = {2{fV}} ;
  assign mmTed_newSample$ENQ = WILL_FIRE_RL_action_l38c18 ;
  assign mmTed_newSample$DEQ = WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ;
  assign mmTed_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629 =
	     ((!x__h67651[19] &&
	       (x__h67651[15] || x__h67651[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h67651[19] &&
		  (!x__h67651[15] || ~x__h67651[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h67651[15:0])) -
	     ((!x__h69618[19] &&
	       (x__h69618[15] || x__h69618[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h69618[19] &&
		  (!x__h69618[15] || ~x__h69618[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h69618[15:0])) ;
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749 =
	     ((!x__h73592[19] &&
	       (x__h73592[15] || x__h73592[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h73592[19] &&
		  (!x__h73592[15] || ~x__h73592[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h73592[15:0])) +
	     ((!x__h75457[19] &&
	       (x__h75457[15] || x__h75457[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h75457[19] &&
		  (!x__h75457[15] || ~x__h75457[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h75457[15:0])) ;
  assign IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099 =
	     (!IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084[19] &&
	      IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1096[13]) ?
	       14'd8191 :
	       IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1096 ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d608 =
	     x__h69835[31:12] + { 8'd0, y_f__h70702 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d728 =
	     x__h75674[31:12] + { 8'd0, y_f__h76334 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d760 =
	     x__h77130 * x__h77150 ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d774 =
	     x__h73327[31:12] + { 8'd0, y_f__h77756 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d837 =
	     x__h77130 * x__h71518 ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d851 =
	     x__h80843[31:12] + { 8'd0, y_f__h81514 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d515 =
	     x__h67868[31:12] + { 8'd0, y_f__h68632 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d640 =
	     x__h71498 * x__h71518 ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d654 =
	     x__h66979[31:12] + { 8'd0, y_f__h72124 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d695 =
	     x__h73809[31:12] + { 8'd0, y_f__h74471 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d799 =
	     x__h71498 * x__h77150 ;
  assign IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d813 =
	     x__h78969[31:12] + { 8'd0, y_f__h79640 } ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d1006 =
	     x__h94481[19:6] + { 8'd0, y_f__h94983 } ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d902 =
	     x__h91575 * x__h95999 ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d916 =
	     x__h91407[19:6] + { 8'd0, y_f__h92032 } ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d992 =
	     x__h91575 * x__h93083 ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1030 =
	     x__h93063 * x__h95999 ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1044 =
	     x__h95934[19:6] + { 8'd0, y_f__h96436 } ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d953 =
	     x__h93063 * x__h93083 ;
  assign IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d967 =
	     x__h92983[19:6] + { 8'd0, y_f__h93520 } ;
  assign IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084 =
	     mmTed_mmVal[9] ?
	       -_19_MUL_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_m_ETC___d1082 :
	       _19_MUL_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_m_ETC___d1082 ;
  assign IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1096 =
	     IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084[19:6] +
	     { 8'd0, y_f__h98777 } ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d502 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_ETC___d501 ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d595 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_ETC___d594 ;
  assign SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681 =
	     { SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675,
	       SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 } -
	     { SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678,
	       SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 } ;
  assign SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492 =
	     { SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459,
	       SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 } -
	     { SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489,
	       SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 } ;
  assign SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888 =
	     { SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317,
	       SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 } -
	     { SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885,
	       SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 } ;
  assign SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940 =
	     { SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374,
	       SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 } -
	     { SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937,
	       SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 } ;
  assign SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147 =
	     { SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146[3],
	       SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 } ;
  assign SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213 =
	     { SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212[3],
	       SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_ETC___d594 =
	     { 4'd0,
	       SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562[3] ?
		 -{ SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562,
		    SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 } :
		 { SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562,
		   SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_ETC___d501 =
	     { 4'd0,
	       SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495[3] ?
		 -{ SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495,
		    SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 } :
		 { SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495,
		   SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1165 =
	     { 33'd0, x__h101774 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1168 =
	     { 33'd0, x__h101774 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1176 =
	     { 33'd0, x__h101774 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1185 =
	     { 33'd0, x__h101774 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1194 =
	     { 33'd0, x__h101774 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1203 =
	     { 33'd0, x__h101774 } * 39'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1231 =
	     { 33'd0, x__h102559 } * 39'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1234 =
	     { 33'd0, x__h102559 } * 39'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1242 =
	     { 33'd0, x__h102559 } * 39'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1251 =
	     { 33'd0, x__h102559 } * 39'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1260 =
	     { 33'd0, x__h102559 } * 39'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1269 =
	     { 33'd0, x__h102559 } * 39'd1000000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1171 =
	     39'd10 * digit__h101744 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1237 =
	     39'd10 * digit__h102529 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1180 =
	     39'd10 * y__h101957 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1246 =
	     39'd10 * y__h102742 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1189 =
	     39'd10 * y__h102046 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1255 =
	     39'd10 * y__h102831 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1198 =
	     39'd10 * y__h102135 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1264 =
	     39'd10 * y__h102920 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1207 =
	     39'd10 * y__h102224 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1273 =
	     39'd10 * y__h103009 ;
  assign _19_MUL_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_m_ETC___d1082 =
	     10'd19 * x__h98339 ;
  assign abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369 =
	     (state_mkFSMstate == 3'd0 ||
	      !n_329_ULT_10___d1330 && state_mkFSMstate == 3'd2 ||
	      !n_329_ULT_10___d1330 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign digit__h101744 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1165[9:6] } ;
  assign digit__h101811 =
	     { 35'd0,
	       tx01809_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1[3:0] } ;
  assign digit__h101900 =
	     { 35'd0,
	       tx01898_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2[3:0] } ;
  assign digit__h101989 =
	     { 35'd0,
	       tx01987_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3[3:0] } ;
  assign digit__h102078 =
	     { 35'd0,
	       tx02076_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4[3:0] } ;
  assign digit__h102167 =
	     { 35'd0,
	       tx02165_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5[3:0] } ;
  assign digit__h102529 =
	     { 35'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1231[9:6] } ;
  assign digit__h102596 =
	     { 35'd0,
	       tx02594_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6[3:0] } ;
  assign digit__h102685 =
	     { 35'd0,
	       tx02683_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7[3:0] } ;
  assign digit__h102774 =
	     { 35'd0,
	       tx02772_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8[3:0] } ;
  assign digit__h102863 =
	     { 35'd0,
	       tx02861_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9[3:0] } ;
  assign digit__h102952 =
	     { 35'd0,
	       tx02950_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10[3:0] } ;
  assign imagA_i__h66144 =
	     (({ SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374,
		 SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 } ^
	       10'h200) <=
	      10'd512) ?
	       4'd0 :
	       4'd1 ;
  assign in2_f__h97868 = { res_f__h99369, 3'd0 } ;
  assign in2_i__h97867 = { {8{x__h97870[3]}}, x__h97870 } ;
  assign mmTed_iIn_2_PLUS_16_3_ULT_24___d94 = mmTed_iIn + 12'd16 < 12'd24 ;
  assign mmTed_iOut_7_ULT_24___d91 = mmTed_iOut < 12'd24 ;
  assign mmTed_n_6_ULT_24___d51 = mmTed_n < 12'd24 ;
  assign mmTed_n_6_ULT_mmTed_iOut_7___d38 = mmTed_n < mmTed_iOut ;
  assign mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1289 =
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd0 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd18) &&
	     (!mmTed_tedErrorCalc_start_reg_1 ||
	      mmTed_tedErrorCalc_state_fired) ;
  assign n_329_ULT_10___d1330 = n < 10'd10 ;
  assign realA_i__h65934 =
	     (({ SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317,
		 SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 } ^
	       10'h200) <=
	      10'd512) ?
	       4'd0 :
	       4'd1 ;
  assign res_f__h99369 =
	     (!IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13] &&
	      (IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[9] ||
	       IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13:10] !=
	       4'd0)) ?
	       6'd63 :
	       ((IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13] &&
		 (!IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[9] ||
		  ~IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13:10] !=
		  4'd0)) ?
		  6'd0 :
		  IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[5:0]) ;
  assign tx01809_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1 =
	     tx__h101809 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1171[38:0] ;
  assign tx01898_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2 =
	     tx__h101898 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1180[38:0] ;
  assign tx01987_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3 =
	     tx__h101987 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1189[38:0] ;
  assign tx02076_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4 =
	     tx__h102076 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1198[38:0] ;
  assign tx02165_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5 =
	     tx__h102165 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1207[38:0] ;
  assign tx02594_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6 =
	     tx__h102594 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1237[38:0] ;
  assign tx02683_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7 =
	     tx__h102683 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1246[38:0] ;
  assign tx02772_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8 =
	     tx__h102772 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1255[38:0] ;
  assign tx02861_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9 =
	     tx__h102861 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1264[38:0] ;
  assign tx02950_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10 =
	     tx__h102950 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1273[38:0] ;
  assign tx__h101809 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1168[38:6] } ;
  assign tx__h101898 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1176[38:6] } ;
  assign tx__h101987 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1185[38:6] } ;
  assign tx__h102076 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1194[38:6] } ;
  assign tx__h102165 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_1_ETC___d1203[38:6] } ;
  assign tx__h102594 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1234[38:6] } ;
  assign tx__h102683 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1242[38:6] } ;
  assign tx__h102772 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1251[38:6] } ;
  assign tx__h102861 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1260[38:6] } ;
  assign tx__h102950 =
	     { 6'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_ETC___d1269[38:6] } ;
  assign x__h101774 =
	     (SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147[4] &&
	      fpart__h101513 != 6'd0) ?
	       y_avValue_snd__h101708 :
	       fpart__h101513 ;
  assign x__h102559 =
	     (SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213[4] &&
	      fpart__h102304 != 6'd0) ?
	       y_avValue_snd__h102493 :
	       fpart__h102304 ;
  assign x__h66524 =
	     ((!x__h66745[19] &&
	       (x__h66745[15] || x__h66745[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h66745[19] &&
		  (!x__h66745[15] || ~x__h66745[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h66745[15:0])) -
	     ((!x__h73110[19] &&
	       (x__h73110[15] || x__h73110[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h73110[19] &&
		  (!x__h73110[15] || ~x__h73110[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h73110[15:0])) ;
  assign x__h66745 =
	     (!x__h66979[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d654[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d654 ;
  assign x__h66979 =
	     (SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629[15] &&
	      !SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d640 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d640 ;
  assign x__h67385 = mmTed_iOut - 12'd2 ;
  assign x__h67651 =
	     (!x__h67868[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d515[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d515 ;
  assign x__h67868 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495[3] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d502 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_ETC___d501 ;
  assign x__h67896 = mmTed_iOut - 12'd1 ;
  assign x__h69618 =
	     (!x__h69835[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d608[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d608 ;
  assign x__h69835 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562[3] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_ETC___d594 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d595 ;
  assign x__h71498 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492[15] ?
	       -SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492 :
	       SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492 ;
  assign x__h71518 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629[15] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629 ;
  assign x__h73110 =
	     (!x__h73327[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d774[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d774 ;
  assign x__h73327 =
	     (SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749[15] &&
	      !SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d760 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d760 ;
  assign x__h73592 =
	     (!x__h73809[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d695[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d695 ;
  assign x__h73809 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495[3] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_ETC___d501 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d502 ;
  assign x__h75457 =
	     (!x__h75674[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d728[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d728 ;
  assign x__h75674 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562[3] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BIT_ETC___d595 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_ETC___d594 ;
  assign x__h77130 =
	     SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681[15] ?
	       -SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681 :
	       SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681 ;
  assign x__h77150 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749[15] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749 ;
  assign x__h78534 =
	     ((!x__h78752[19] &&
	       (x__h78752[15] || x__h78752[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h78752[19] &&
		  (!x__h78752[15] || ~x__h78752[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h78752[15:0])) +
	     ((!x__h80626[19] &&
	       (x__h80626[15] || x__h80626[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h80626[19] &&
		  (!x__h80626[15] || ~x__h80626[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h80626[15:0])) ;
  assign x__h78752 =
	     (!x__h78969[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d813[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d813 ;
  assign x__h78969 =
	     (SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d749[15] &&
	      !SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d492[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d799 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_ETC___d799 ;
  assign x__h80626 =
	     (!x__h80843[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d851[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d851 ;
  assign x__h80843 =
	     (SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_08_BI_ETC___d629[15] &&
	      !SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d681[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d837 :
	       IF_SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_ETC___d837 ;
  assign x__h91056 =
	     ((!x__h91232[13] && (x__h91232[9] || x__h91232[13:10] != 4'd0)) ?
		10'd511 :
		((x__h91232[13] &&
		  (!x__h91232[9] || ~x__h91232[13:10] != 4'd0)) ?
		   10'd512 :
		   x__h91232[9:0])) -
	     ((!x__h92808[13] && (x__h92808[9] || x__h92808[13:10] != 4'd0)) ?
		10'd511 :
		((x__h92808[13] &&
		  (!x__h92808[9] || ~x__h92808[13:10] != 4'd0)) ?
		   10'd512 :
		   x__h92808[9:0])) ;
  assign x__h91232 =
	     (!x__h91407[19] &&
	      IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d916[13]) ?
	       14'd8191 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d916 ;
  assign x__h91407 =
	     (SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888[9] &&
	      !mmTed_yy[31] ||
	      mmTed_yy[31] &&
	      !SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888[9]) ?
	       -IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d902 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d902 ;
  assign x__h91575 =
	     SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888[9] ?
	       -SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888 :
	       SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888 ;
  assign x__h92808 =
	     (!x__h92983[19] &&
	      IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d967[13]) ?
	       14'd8191 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d967 ;
  assign x__h92983 =
	     (SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940[9] &&
	      !mmTed_yy[15] ||
	      mmTed_yy[15] &&
	      !SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940[9]) ?
	       -IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d953 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d953 ;
  assign x__h93063 =
	     SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940[9] ?
	       -SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940 :
	       SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940 ;
  assign x__h93083 = mmTed_yy[15] ? -mmTed_yy[15:6] : mmTed_yy[15:6] ;
  assign x__h94130 =
	     ((!x__h94306[13] && (x__h94306[9] || x__h94306[13:10] != 4'd0)) ?
		10'd511 :
		((x__h94306[13] &&
		  (!x__h94306[9] || ~x__h94306[13:10] != 4'd0)) ?
		   10'd512 :
		   x__h94306[9:0])) +
	     ((!x__h95759[13] && (x__h95759[9] || x__h95759[13:10] != 4'd0)) ?
		10'd511 :
		((x__h95759[13] &&
		  (!x__h95759[9] || ~x__h95759[13:10] != 4'd0)) ?
		   10'd512 :
		   x__h95759[9:0])) ;
  assign x__h94306 =
	     (!x__h94481[19] &&
	      IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d1006[13]) ?
	       14'd8191 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d1006 ;
  assign x__h94481 =
	     (SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888[9] &&
	      !mmTed_yy[15] ||
	      mmTed_yy[15] &&
	      !SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d888[9]) ?
	       -IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d992 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmT_ETC___d992 ;
  assign x__h95759 =
	     (!x__h95934[19] &&
	      IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1044[13]) ?
	       14'd8191 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1044 ;
  assign x__h95934 =
	     (SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940[9] &&
	      !mmTed_yy[31] ||
	      mmTed_yy[31] &&
	      !SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d940[9]) ?
	       -IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1030 :
	       IF_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ETC___d1030 ;
  assign x__h95999 = mmTed_yy[31] ? -mmTed_yy[31:22] : mmTed_yy[31:22] ;
  assign x__h97836 = mmTed_mu + 21'd2048 ;
  assign x__h97870 =
	     (!IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13] &&
	      (IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[9] ||
	       IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13:10] !=
	       4'd0)) ?
	       4'd7 :
	       ((IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13] &&
		 (!IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[9] ||
		  ~IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[13:10] !=
		  4'd0)) ?
		  4'd8 :
		  IF_NOT_IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_1_ETC___d1099[9:6]) ;
  assign x__h98339 = mmTed_mmVal[9] ? -mmTed_mmVal : mmTed_mmVal ;
  assign y__h101957 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1171[38:0] +
	     digit__h101811 ;
  assign y__h102046 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1180[38:0] +
	     digit__h101900 ;
  assign y__h102135 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1189[38:0] +
	     digit__h101989 ;
  assign y__h102224 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1198[38:0] +
	     digit__h102078 ;
  assign y__h102742 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1237[38:0] +
	     digit__h102596 ;
  assign y__h102831 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1246[38:0] +
	     digit__h102685 ;
  assign y__h102920 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1255[38:0] +
	     digit__h102774 ;
  assign y__h103009 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1264[38:0] +
	     digit__h102863 ;
  assign y_avValue_snd__h101708 = 6'd0 - fpart__h101513 ;
  assign y_avValue_snd__h102493 = 6'd0 - fpart__h102304 ;
  assign y_f__h68632 =
	     (x__h67868[11] && (x__h67868[31] || x__h67868[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h70702 =
	     (x__h69835[11] && (x__h69835[31] || x__h69835[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h72124 =
	     (x__h66979[11] && (x__h66979[31] || x__h66979[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h74471 =
	     (x__h73809[11] && (x__h73809[31] || x__h73809[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h76334 =
	     (x__h75674[11] && (x__h75674[31] || x__h75674[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h77756 =
	     (x__h73327[11] && (x__h73327[31] || x__h73327[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h79640 =
	     (x__h78969[11] && (x__h78969[31] || x__h78969[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h81514 =
	     (x__h80843[11] && (x__h80843[31] || x__h80843[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h92032 =
	     (x__h91407[5] && (x__h91407[19] || x__h91407[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h93520 =
	     (x__h92983[5] && (x__h92983[19] || x__h92983[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h94983 =
	     (x__h94481[5] && (x__h94481[19] || x__h94481[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h96436 =
	     (x__h95934[5] && (x__h95934[19] || x__h95934[4:0] != 5'd0)) ?
	       6'd1 :
	       6'd0 ;
  assign y_f__h98777 =
	     (IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084[5] &&
	      (IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084[19] ||
	       IF_mmTed_mmVal_078_BIT_9_079_THEN_NEG_19_MUL_I_ETC___d1084[4:0] !=
	       5'd0)) ?
	       6'd1 :
	       6'd0 ;
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h101513 = mmTed_out_0[15:10];
      12'd1: fpart__h101513 = mmTed_out_1[15:10];
      12'd2: fpart__h101513 = mmTed_out_2[15:10];
      12'd3: fpart__h101513 = mmTed_out_3[15:10];
      12'd4: fpart__h101513 = mmTed_out_4[15:10];
      12'd5: fpart__h101513 = mmTed_out_5[15:10];
      12'd6: fpart__h101513 = mmTed_out_6[15:10];
      12'd7: fpart__h101513 = mmTed_out_7[15:10];
      12'd8: fpart__h101513 = mmTed_out_8[15:10];
      12'd9: fpart__h101513 = mmTed_out_9[15:10];
      12'd10: fpart__h101513 = mmTed_out_10[15:10];
      12'd11: fpart__h101513 = mmTed_out_11[15:10];
      12'd12: fpart__h101513 = mmTed_out_12[15:10];
      12'd13: fpart__h101513 = mmTed_out_13[15:10];
      12'd14: fpart__h101513 = mmTed_out_14[15:10];
      12'd15: fpart__h101513 = mmTed_out_15[15:10];
      12'd16: fpart__h101513 = mmTed_out_16[15:10];
      12'd17: fpart__h101513 = mmTed_out_17[15:10];
      12'd18: fpart__h101513 = mmTed_out_18[15:10];
      12'd19: fpart__h101513 = mmTed_out_19[15:10];
      12'd20: fpart__h101513 = mmTed_out_20[15:10];
      12'd21: fpart__h101513 = mmTed_out_21[15:10];
      12'd22: fpart__h101513 = mmTed_out_22[15:10];
      12'd23: fpart__h101513 = mmTed_out_23[15:10];
      12'd24: fpart__h101513 = mmTed_out_24[15:10];
      default: fpart__h101513 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h102304 = mmTed_out_0[5:0];
      12'd1: fpart__h102304 = mmTed_out_1[5:0];
      12'd2: fpart__h102304 = mmTed_out_2[5:0];
      12'd3: fpart__h102304 = mmTed_out_3[5:0];
      12'd4: fpart__h102304 = mmTed_out_4[5:0];
      12'd5: fpart__h102304 = mmTed_out_5[5:0];
      12'd6: fpart__h102304 = mmTed_out_6[5:0];
      12'd7: fpart__h102304 = mmTed_out_7[5:0];
      12'd8: fpart__h102304 = mmTed_out_8[5:0];
      12'd9: fpart__h102304 = mmTed_out_9[5:0];
      12'd10: fpart__h102304 = mmTed_out_10[5:0];
      12'd11: fpart__h102304 = mmTed_out_11[5:0];
      12'd12: fpart__h102304 = mmTed_out_12[5:0];
      12'd13: fpart__h102304 = mmTed_out_13[5:0];
      12'd14: fpart__h102304 = mmTed_out_14[5:0];
      12'd15: fpart__h102304 = mmTed_out_15[5:0];
      12'd16: fpart__h102304 = mmTed_out_16[5:0];
      12'd17: fpart__h102304 = mmTed_out_17[5:0];
      12'd18: fpart__h102304 = mmTed_out_18[5:0];
      12'd19: fpart__h102304 = mmTed_out_19[5:0];
      12'd20: fpart__h102304 = mmTed_out_20[5:0];
      12'd21: fpart__h102304 = mmTed_out_21[5:0];
      12'd22: fpart__h102304 = mmTed_out_22[5:0];
      12'd23: fpart__h102304 = mmTed_out_23[5:0];
      12'd24: fpart__h102304 = mmTed_out_24[5:0];
      default: fpart__h102304 = 6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_i__h53816 = mmTed_samples_0[31:28];
      12'd1: res_i__h53816 = mmTed_samples_1[31:28];
      12'd2: res_i__h53816 = mmTed_samples_2[31:28];
      12'd3: res_i__h53816 = mmTed_samples_3[31:28];
      12'd4: res_i__h53816 = mmTed_samples_4[31:28];
      12'd5: res_i__h53816 = mmTed_samples_5[31:28];
      12'd6: res_i__h53816 = mmTed_samples_6[31:28];
      12'd7: res_i__h53816 = mmTed_samples_7[31:28];
      12'd8: res_i__h53816 = mmTed_samples_8[31:28];
      12'd9: res_i__h53816 = mmTed_samples_9[31:28];
      12'd10: res_i__h53816 = mmTed_samples_10[31:28];
      12'd11: res_i__h53816 = mmTed_samples_11[31:28];
      12'd12: res_i__h53816 = mmTed_samples_12[31:28];
      12'd13: res_i__h53816 = mmTed_samples_13[31:28];
      12'd14: res_i__h53816 = mmTed_samples_14[31:28];
      12'd15: res_i__h53816 = mmTed_samples_15[31:28];
      12'd16: res_i__h53816 = mmTed_samples_16[31:28];
      12'd17: res_i__h53816 = mmTed_samples_17[31:28];
      12'd18: res_i__h53816 = mmTed_samples_18[31:28];
      12'd19: res_i__h53816 = mmTed_samples_19[31:28];
      12'd20: res_i__h53816 = mmTed_samples_20[31:28];
      12'd21: res_i__h53816 = mmTed_samples_21[31:28];
      12'd22: res_i__h53816 = mmTed_samples_22[31:28];
      12'd23: res_i__h53816 = mmTed_samples_23[31:28];
      12'd24: res_i__h53816 = mmTed_samples_24[31:28];
      default: res_i__h53816 = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_i__h53861 = mmTed_samples_0[15:12];
      12'd1: res_i__h53861 = mmTed_samples_1[15:12];
      12'd2: res_i__h53861 = mmTed_samples_2[15:12];
      12'd3: res_i__h53861 = mmTed_samples_3[15:12];
      12'd4: res_i__h53861 = mmTed_samples_4[15:12];
      12'd5: res_i__h53861 = mmTed_samples_5[15:12];
      12'd6: res_i__h53861 = mmTed_samples_6[15:12];
      12'd7: res_i__h53861 = mmTed_samples_7[15:12];
      12'd8: res_i__h53861 = mmTed_samples_8[15:12];
      12'd9: res_i__h53861 = mmTed_samples_9[15:12];
      12'd10: res_i__h53861 = mmTed_samples_10[15:12];
      12'd11: res_i__h53861 = mmTed_samples_11[15:12];
      12'd12: res_i__h53861 = mmTed_samples_12[15:12];
      12'd13: res_i__h53861 = mmTed_samples_13[15:12];
      12'd14: res_i__h53861 = mmTed_samples_14[15:12];
      12'd15: res_i__h53861 = mmTed_samples_15[15:12];
      12'd16: res_i__h53861 = mmTed_samples_16[15:12];
      12'd17: res_i__h53861 = mmTed_samples_17[15:12];
      12'd18: res_i__h53861 = mmTed_samples_18[15:12];
      12'd19: res_i__h53861 = mmTed_samples_19[15:12];
      12'd20: res_i__h53861 = mmTed_samples_20[15:12];
      12'd21: res_i__h53861 = mmTed_samples_21[15:12];
      12'd22: res_i__h53861 = mmTed_samples_22[15:12];
      12'd23: res_i__h53861 = mmTed_samples_23[15:12];
      12'd24: res_i__h53861 = mmTed_samples_24[15:12];
      default: res_i__h53861 = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: x__h53855 = mmTed_samples_0[27:16];
      12'd1: x__h53855 = mmTed_samples_1[27:16];
      12'd2: x__h53855 = mmTed_samples_2[27:16];
      12'd3: x__h53855 = mmTed_samples_3[27:16];
      12'd4: x__h53855 = mmTed_samples_4[27:16];
      12'd5: x__h53855 = mmTed_samples_5[27:16];
      12'd6: x__h53855 = mmTed_samples_6[27:16];
      12'd7: x__h53855 = mmTed_samples_7[27:16];
      12'd8: x__h53855 = mmTed_samples_8[27:16];
      12'd9: x__h53855 = mmTed_samples_9[27:16];
      12'd10: x__h53855 = mmTed_samples_10[27:16];
      12'd11: x__h53855 = mmTed_samples_11[27:16];
      12'd12: x__h53855 = mmTed_samples_12[27:16];
      12'd13: x__h53855 = mmTed_samples_13[27:16];
      12'd14: x__h53855 = mmTed_samples_14[27:16];
      12'd15: x__h53855 = mmTed_samples_15[27:16];
      12'd16: x__h53855 = mmTed_samples_16[27:16];
      12'd17: x__h53855 = mmTed_samples_17[27:16];
      12'd18: x__h53855 = mmTed_samples_18[27:16];
      12'd19: x__h53855 = mmTed_samples_19[27:16];
      12'd20: x__h53855 = mmTed_samples_20[27:16];
      12'd21: x__h53855 = mmTed_samples_21[27:16];
      12'd22: x__h53855 = mmTed_samples_22[27:16];
      12'd23: x__h53855 = mmTed_samples_23[27:16];
      12'd24: x__h53855 = mmTed_samples_24[27:16];
      default: x__h53855 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: x__h53900 = mmTed_samples_0[11:0];
      12'd1: x__h53900 = mmTed_samples_1[11:0];
      12'd2: x__h53900 = mmTed_samples_2[11:0];
      12'd3: x__h53900 = mmTed_samples_3[11:0];
      12'd4: x__h53900 = mmTed_samples_4[11:0];
      12'd5: x__h53900 = mmTed_samples_5[11:0];
      12'd6: x__h53900 = mmTed_samples_6[11:0];
      12'd7: x__h53900 = mmTed_samples_7[11:0];
      12'd8: x__h53900 = mmTed_samples_8[11:0];
      12'd9: x__h53900 = mmTed_samples_9[11:0];
      12'd10: x__h53900 = mmTed_samples_10[11:0];
      12'd11: x__h53900 = mmTed_samples_11[11:0];
      12'd12: x__h53900 = mmTed_samples_12[11:0];
      12'd13: x__h53900 = mmTed_samples_13[11:0];
      12'd14: x__h53900 = mmTed_samples_14[11:0];
      12'd15: x__h53900 = mmTed_samples_15[11:0];
      12'd16: x__h53900 = mmTed_samples_16[11:0];
      12'd17: x__h53900 = mmTed_samples_17[11:0];
      12'd18: x__h53900 = mmTed_samples_18[11:0];
      12'd19: x__h53900 = mmTed_samples_19[11:0];
      12'd20: x__h53900 = mmTed_samples_20[11:0];
      12'd21: x__h53900 = mmTed_samples_21[11:0];
      12'd22: x__h53900 = mmTed_samples_22[11:0];
      12'd23: x__h53900 = mmTed_samples_23[11:0];
      12'd24: x__h53900 = mmTed_samples_24[11:0];
      default: x__h53900 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_0[9:6];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_1[9:6];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_2[9:6];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_3[9:6];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_4[9:6];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_5[9:6];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_6[9:6];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_7[9:6];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_8[9:6];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_9[9:6];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_10[9:6];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_11[9:6];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_12[9:6];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_13[9:6];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_14[9:6];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_15[9:6];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_16[9:6];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_17[9:6];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_18[9:6];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_19[9:6];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_20[9:6];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_21[9:6];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_22[9:6];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_23[9:6];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
	      mmTed_out_24[9:6];
      default: SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d374 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_0[19:16];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_1[19:16];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_2[19:16];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_3[19:16];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_4[19:16];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_5[19:16];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_6[19:16];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_7[19:16];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_8[19:16];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_9[19:16];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_10[19:16];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_11[19:16];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_12[19:16];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_13[19:16];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_14[19:16];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_15[19:16];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_16[19:16];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_17[19:16];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_18[19:16];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_19[19:16];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_20[19:16];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_21[19:16];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_22[19:16];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_23[19:16];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
	      mmTed_out_24[19:16];
      default: SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d317 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_0[5:0];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_1[5:0];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_2[5:0];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_3[5:0];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_4[5:0];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_5[5:0];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_6[5:0];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_7[5:0];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_8[5:0];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_9[5:0];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_10[5:0];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_11[5:0];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_12[5:0];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_13[5:0];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_14[5:0];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_15[5:0];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_16[5:0];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_17[5:0];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_18[5:0];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_19[5:0];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_20[5:0];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_21[5:0];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_22[5:0];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_23[5:0];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
	      mmTed_out_24[5:0];
      default: SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d401 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_0[15:10];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_1[15:10];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_2[15:10];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_3[15:10];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_4[15:10];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_5[15:10];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_6[15:10];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_7[15:10];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_8[15:10];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_9[15:10];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_10[15:10];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_11[15:10];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_12[15:10];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_13[15:10];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_14[15:10];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_15[15:10];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_16[15:10];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_17[15:10];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_18[15:10];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_19[15:10];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_20[15:10];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_21[15:10];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_22[15:10];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_23[15:10];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
	      mmTed_out_24[15:10];
      default: SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d344 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d489 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d459 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67896 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67896)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_31_TO_28_09_mm_ETC___d495 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67896 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67896)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d497 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67896 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67896)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d562 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67896 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67896)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d590 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d486 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_27_TO_16_60_mm_ETC___d490 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d675 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_15_TO_12_36_mm_ETC___d678 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d676 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_08_BITS_11_TO_0_64_mmT_ETC___d679 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_0[19:16];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_1[19:16];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_2[19:16];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_3[19:16];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_4[19:16];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_5[19:16];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_6[19:16];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_7[19:16];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_8[19:16];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_9[19:16];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_10[19:16];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_11[19:16];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_12[19:16];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_13[19:16];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_14[19:16];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_15[19:16];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_16[19:16];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_17[19:16];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_18[19:16];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_19[19:16];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_20[19:16];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_21[19:16];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_22[19:16];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_23[19:16];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
	      mmTed_out_24[19:16];
      default: SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d885 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_0[15:10];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_1[15:10];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_2[15:10];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_3[15:10];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_4[15:10];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_5[15:10];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_6[15:10];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_7[15:10];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_8[15:10];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_9[15:10];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_10[15:10];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_11[15:10];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_12[15:10];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_13[15:10];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_14[15:10];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_15[15:10];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_16[15:10];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_17[15:10];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_18[15:10];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_19[15:10];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_20[15:10];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_21[15:10];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_22[15:10];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_23[15:10];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
	      mmTed_out_24[15:10];
      default: SEL_ARR_mmTed_out_0_66_BITS_15_TO_10_18_mmTed__ETC___d886 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_0[9:6];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_1[9:6];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_2[9:6];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_3[9:6];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_4[9:6];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_5[9:6];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_6[9:6];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_7[9:6];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_8[9:6];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_9[9:6];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_10[9:6];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_11[9:6];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_12[9:6];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_13[9:6];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_14[9:6];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_15[9:6];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_16[9:6];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_17[9:6];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_18[9:6];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_19[9:6];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_20[9:6];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_21[9:6];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_22[9:6];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_23[9:6];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
	      mmTed_out_24[9:6];
      default: SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d937 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67385 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67385)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_0[5:0];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_1[5:0];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_2[5:0];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_3[5:0];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_4[5:0];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_5[5:0];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_6[5:0];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_7[5:0];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_8[5:0];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_9[5:0];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_10[5:0];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_11[5:0];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_12[5:0];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_13[5:0];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_14[5:0];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_15[5:0];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_16[5:0];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_17[5:0];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_18[5:0];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_19[5:0];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_20[5:0];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_21[5:0];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_22[5:0];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_23[5:0];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
	      mmTed_out_24[5:0];
      default: SEL_ARR_mmTed_out_0_66_BITS_5_TO_0_75_mmTed_ou_ETC___d938 =
		   6'bxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_0[19:16];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_1[19:16];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_2[19:16];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_3[19:16];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_4[19:16];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_5[19:16];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_6[19:16];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_7[19:16];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_8[19:16];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_9[19:16];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_10[19:16];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_11[19:16];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_12[19:16];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_13[19:16];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_14[19:16];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_15[19:16];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_16[19:16];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_17[19:16];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_18[19:16];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_19[19:16];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_20[19:16];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_21[19:16];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_22[19:16];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_23[19:16];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
	      mmTed_out_24[19:16];
      default: SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_mmTed__ETC___d1146 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_0[9:6];
      12'd1:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_1[9:6];
      12'd2:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_2[9:6];
      12'd3:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_3[9:6];
      12'd4:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_4[9:6];
      12'd5:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_5[9:6];
      12'd6:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_6[9:6];
      12'd7:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_7[9:6];
      12'd8:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_8[9:6];
      12'd9:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_9[9:6];
      12'd10:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_10[9:6];
      12'd11:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_11[9:6];
      12'd12:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_12[9:6];
      12'd13:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_13[9:6];
      12'd14:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_14[9:6];
      12'd15:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_15[9:6];
      12'd16:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_16[9:6];
      12'd17:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_17[9:6];
      12'd18:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_18[9:6];
      12'd19:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_19[9:6];
      12'd20:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_20[9:6];
      12'd21:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_21[9:6];
      12'd22:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_22[9:6];
      12'd23:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_23[9:6];
      12'd24:
	  SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
	      mmTed_out_24[9:6];
      default: SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmTed_ou_ETC___d1212 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fV <= `BSV_ASSIGNMENT_DELAY 16'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_iIn <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_iOut <= `BSV_ASSIGNMENT_DELAY 12'd2;
	mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY 10'd0;
	mmTed_mu <= `BSV_ASSIGNMENT_DELAY 21'd0;
	mmTed_n <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_outRail_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_0 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_samples_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_tedErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mmTed_tedErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	mmTed_x <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_xx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_y <= `BSV_ASSIGNMENT_DELAY 20'd0;
	mmTed_yy <= `BSV_ASSIGNMENT_DELAY 32'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 21'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (mmTed_iIn$EN) mmTed_iIn <= `BSV_ASSIGNMENT_DELAY mmTed_iIn$D_IN;
	if (mmTed_iOut$EN)
	  mmTed_iOut <= `BSV_ASSIGNMENT_DELAY mmTed_iOut$D_IN;
	if (mmTed_mmVal$EN)
	  mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY mmTed_mmVal$D_IN;
	if (mmTed_mu$EN) mmTed_mu <= `BSV_ASSIGNMENT_DELAY mmTed_mu$D_IN;
	if (mmTed_n$EN) mmTed_n <= `BSV_ASSIGNMENT_DELAY mmTed_n$D_IN;
	if (mmTed_outRail_0$EN)
	  mmTed_outRail_0 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_0$D_IN;
	if (mmTed_outRail_1$EN)
	  mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_1$D_IN;
	if (mmTed_outRail_10$EN)
	  mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_10$D_IN;
	if (mmTed_outRail_11$EN)
	  mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_11$D_IN;
	if (mmTed_outRail_12$EN)
	  mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_12$D_IN;
	if (mmTed_outRail_13$EN)
	  mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_13$D_IN;
	if (mmTed_outRail_14$EN)
	  mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_14$D_IN;
	if (mmTed_outRail_15$EN)
	  mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_15$D_IN;
	if (mmTed_outRail_16$EN)
	  mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_16$D_IN;
	if (mmTed_outRail_17$EN)
	  mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_17$D_IN;
	if (mmTed_outRail_18$EN)
	  mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_18$D_IN;
	if (mmTed_outRail_19$EN)
	  mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_19$D_IN;
	if (mmTed_outRail_2$EN)
	  mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_2$D_IN;
	if (mmTed_outRail_20$EN)
	  mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_20$D_IN;
	if (mmTed_outRail_21$EN)
	  mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_21$D_IN;
	if (mmTed_outRail_22$EN)
	  mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_22$D_IN;
	if (mmTed_outRail_23$EN)
	  mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_23$D_IN;
	if (mmTed_outRail_24$EN)
	  mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_24$D_IN;
	if (mmTed_outRail_3$EN)
	  mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_3$D_IN;
	if (mmTed_outRail_4$EN)
	  mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_4$D_IN;
	if (mmTed_outRail_5$EN)
	  mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_5$D_IN;
	if (mmTed_outRail_6$EN)
	  mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_6$D_IN;
	if (mmTed_outRail_7$EN)
	  mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_7$D_IN;
	if (mmTed_outRail_8$EN)
	  mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_8$D_IN;
	if (mmTed_outRail_9$EN)
	  mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_9$D_IN;
	if (mmTed_out_0$EN)
	  mmTed_out_0 <= `BSV_ASSIGNMENT_DELAY mmTed_out_0$D_IN;
	if (mmTed_out_1$EN)
	  mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY mmTed_out_1$D_IN;
	if (mmTed_out_10$EN)
	  mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY mmTed_out_10$D_IN;
	if (mmTed_out_11$EN)
	  mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY mmTed_out_11$D_IN;
	if (mmTed_out_12$EN)
	  mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY mmTed_out_12$D_IN;
	if (mmTed_out_13$EN)
	  mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY mmTed_out_13$D_IN;
	if (mmTed_out_14$EN)
	  mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY mmTed_out_14$D_IN;
	if (mmTed_out_15$EN)
	  mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY mmTed_out_15$D_IN;
	if (mmTed_out_16$EN)
	  mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY mmTed_out_16$D_IN;
	if (mmTed_out_17$EN)
	  mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY mmTed_out_17$D_IN;
	if (mmTed_out_18$EN)
	  mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY mmTed_out_18$D_IN;
	if (mmTed_out_19$EN)
	  mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY mmTed_out_19$D_IN;
	if (mmTed_out_2$EN)
	  mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY mmTed_out_2$D_IN;
	if (mmTed_out_20$EN)
	  mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY mmTed_out_20$D_IN;
	if (mmTed_out_21$EN)
	  mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY mmTed_out_21$D_IN;
	if (mmTed_out_22$EN)
	  mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY mmTed_out_22$D_IN;
	if (mmTed_out_23$EN)
	  mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY mmTed_out_23$D_IN;
	if (mmTed_out_24$EN)
	  mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY mmTed_out_24$D_IN;
	if (mmTed_out_3$EN)
	  mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY mmTed_out_3$D_IN;
	if (mmTed_out_4$EN)
	  mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY mmTed_out_4$D_IN;
	if (mmTed_out_5$EN)
	  mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY mmTed_out_5$D_IN;
	if (mmTed_out_6$EN)
	  mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY mmTed_out_6$D_IN;
	if (mmTed_out_7$EN)
	  mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY mmTed_out_7$D_IN;
	if (mmTed_out_8$EN)
	  mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY mmTed_out_8$D_IN;
	if (mmTed_out_9$EN)
	  mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY mmTed_out_9$D_IN;
	if (mmTed_samples_0$EN)
	  mmTed_samples_0 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_0$D_IN;
	if (mmTed_samples_1$EN)
	  mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_1$D_IN;
	if (mmTed_samples_10$EN)
	  mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_10$D_IN;
	if (mmTed_samples_11$EN)
	  mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_11$D_IN;
	if (mmTed_samples_12$EN)
	  mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_12$D_IN;
	if (mmTed_samples_13$EN)
	  mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_13$D_IN;
	if (mmTed_samples_14$EN)
	  mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_14$D_IN;
	if (mmTed_samples_15$EN)
	  mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_15$D_IN;
	if (mmTed_samples_16$EN)
	  mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_16$D_IN;
	if (mmTed_samples_17$EN)
	  mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_17$D_IN;
	if (mmTed_samples_18$EN)
	  mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_18$D_IN;
	if (mmTed_samples_19$EN)
	  mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_19$D_IN;
	if (mmTed_samples_2$EN)
	  mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_2$D_IN;
	if (mmTed_samples_20$EN)
	  mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_20$D_IN;
	if (mmTed_samples_21$EN)
	  mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_21$D_IN;
	if (mmTed_samples_22$EN)
	  mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_22$D_IN;
	if (mmTed_samples_23$EN)
	  mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_23$D_IN;
	if (mmTed_samples_24$EN)
	  mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_24$D_IN;
	if (mmTed_samples_3$EN)
	  mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_3$D_IN;
	if (mmTed_samples_4$EN)
	  mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_4$D_IN;
	if (mmTed_samples_5$EN)
	  mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_5$D_IN;
	if (mmTed_samples_6$EN)
	  mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_6$D_IN;
	if (mmTed_samples_7$EN)
	  mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_7$D_IN;
	if (mmTed_samples_8$EN)
	  mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_8$D_IN;
	if (mmTed_samples_9$EN)
	  mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_9$D_IN;
	if (mmTed_tedErrorCalc_start_reg$EN)
	  mmTed_tedErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_start_reg$D_IN;
	if (mmTed_tedErrorCalc_start_reg_1$EN)
	  mmTed_tedErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_start_reg_1$D_IN;
	if (mmTed_tedErrorCalc_state_can_overlap$EN)
	  mmTed_tedErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_can_overlap$D_IN;
	if (mmTed_tedErrorCalc_state_fired$EN)
	  mmTed_tedErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_fired$D_IN;
	if (mmTed_tedErrorCalc_state_mkFSMstate$EN)
	  mmTed_tedErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_mkFSMstate$D_IN;
	if (mmTed_x$EN) mmTed_x <= `BSV_ASSIGNMENT_DELAY mmTed_x$D_IN;
	if (mmTed_xx$EN) mmTed_xx <= `BSV_ASSIGNMENT_DELAY mmTed_xx$D_IN;
	if (mmTed_y$EN) mmTed_y <= `BSV_ASSIGNMENT_DELAY mmTed_y$D_IN;
	if (mmTed_yy$EN) mmTed_yy <= `BSV_ASSIGNMENT_DELAY mmTed_yy$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fV = 16'hAAAA;
    inV = 12'hAAA;
    mmTed_iIn = 12'hAAA;
    mmTed_iOut = 12'hAAA;
    mmTed_mmVal = 10'h2AA;
    mmTed_mu = 21'h0AAAAA;
    mmTed_n = 12'hAAA;
    mmTed_outRail_0 = 32'hAAAAAAAA;
    mmTed_outRail_1 = 32'hAAAAAAAA;
    mmTed_outRail_10 = 32'hAAAAAAAA;
    mmTed_outRail_11 = 32'hAAAAAAAA;
    mmTed_outRail_12 = 32'hAAAAAAAA;
    mmTed_outRail_13 = 32'hAAAAAAAA;
    mmTed_outRail_14 = 32'hAAAAAAAA;
    mmTed_outRail_15 = 32'hAAAAAAAA;
    mmTed_outRail_16 = 32'hAAAAAAAA;
    mmTed_outRail_17 = 32'hAAAAAAAA;
    mmTed_outRail_18 = 32'hAAAAAAAA;
    mmTed_outRail_19 = 32'hAAAAAAAA;
    mmTed_outRail_2 = 32'hAAAAAAAA;
    mmTed_outRail_20 = 32'hAAAAAAAA;
    mmTed_outRail_21 = 32'hAAAAAAAA;
    mmTed_outRail_22 = 32'hAAAAAAAA;
    mmTed_outRail_23 = 32'hAAAAAAAA;
    mmTed_outRail_24 = 32'hAAAAAAAA;
    mmTed_outRail_3 = 32'hAAAAAAAA;
    mmTed_outRail_4 = 32'hAAAAAAAA;
    mmTed_outRail_5 = 32'hAAAAAAAA;
    mmTed_outRail_6 = 32'hAAAAAAAA;
    mmTed_outRail_7 = 32'hAAAAAAAA;
    mmTed_outRail_8 = 32'hAAAAAAAA;
    mmTed_outRail_9 = 32'hAAAAAAAA;
    mmTed_out_0 = 20'hAAAAA;
    mmTed_out_1 = 20'hAAAAA;
    mmTed_out_10 = 20'hAAAAA;
    mmTed_out_11 = 20'hAAAAA;
    mmTed_out_12 = 20'hAAAAA;
    mmTed_out_13 = 20'hAAAAA;
    mmTed_out_14 = 20'hAAAAA;
    mmTed_out_15 = 20'hAAAAA;
    mmTed_out_16 = 20'hAAAAA;
    mmTed_out_17 = 20'hAAAAA;
    mmTed_out_18 = 20'hAAAAA;
    mmTed_out_19 = 20'hAAAAA;
    mmTed_out_2 = 20'hAAAAA;
    mmTed_out_20 = 20'hAAAAA;
    mmTed_out_21 = 20'hAAAAA;
    mmTed_out_22 = 20'hAAAAA;
    mmTed_out_23 = 20'hAAAAA;
    mmTed_out_24 = 20'hAAAAA;
    mmTed_out_3 = 20'hAAAAA;
    mmTed_out_4 = 20'hAAAAA;
    mmTed_out_5 = 20'hAAAAA;
    mmTed_out_6 = 20'hAAAAA;
    mmTed_out_7 = 20'hAAAAA;
    mmTed_out_8 = 20'hAAAAA;
    mmTed_out_9 = 20'hAAAAA;
    mmTed_samples_0 = 32'hAAAAAAAA;
    mmTed_samples_1 = 32'hAAAAAAAA;
    mmTed_samples_10 = 32'hAAAAAAAA;
    mmTed_samples_11 = 32'hAAAAAAAA;
    mmTed_samples_12 = 32'hAAAAAAAA;
    mmTed_samples_13 = 32'hAAAAAAAA;
    mmTed_samples_14 = 32'hAAAAAAAA;
    mmTed_samples_15 = 32'hAAAAAAAA;
    mmTed_samples_16 = 32'hAAAAAAAA;
    mmTed_samples_17 = 32'hAAAAAAAA;
    mmTed_samples_18 = 32'hAAAAAAAA;
    mmTed_samples_19 = 32'hAAAAAAAA;
    mmTed_samples_2 = 32'hAAAAAAAA;
    mmTed_samples_20 = 32'hAAAAAAAA;
    mmTed_samples_21 = 32'hAAAAAAAA;
    mmTed_samples_22 = 32'hAAAAAAAA;
    mmTed_samples_23 = 32'hAAAAAAAA;
    mmTed_samples_24 = 32'hAAAAAAAA;
    mmTed_samples_3 = 32'hAAAAAAAA;
    mmTed_samples_4 = 32'hAAAAAAAA;
    mmTed_samples_5 = 32'hAAAAAAAA;
    mmTed_samples_6 = 32'hAAAAAAAA;
    mmTed_samples_7 = 32'hAAAAAAAA;
    mmTed_samples_8 = 32'hAAAAAAAA;
    mmTed_samples_9 = 32'hAAAAAAAA;
    mmTed_tedErrorCalc_start_reg = 1'h0;
    mmTed_tedErrorCalc_start_reg_1 = 1'h0;
    mmTed_tedErrorCalc_state_can_overlap = 1'h0;
    mmTed_tedErrorCalc_state_fired = 1'h0;
    mmTed_tedErrorCalc_state_mkFSMstate = 5'h0A;
    mmTed_x = 20'hAAAAA;
    mmTed_xx = 32'hAAAAAAAA;
    mmTed_y = 20'hAAAAA;
    mmTed_yy = 32'hAAAAAAAA;
    n = 10'h2AA;
    outV = 21'h0AAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_action_l38c18 || WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 36, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l36c9] and\n  [RL_action_l38c18, RL_action_l39c13, RL_action_f_update_l36c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c18 &&
	  (WILL_FIRE_RL_action_l39c13 || state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 38, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l38c18] and\n  [RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l39c13 && state_mkFSMstate == 3'd4)
	$display("Error: \"Tb_tang.bsv\", line 39, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l39c13] and\n  [RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 3'd1 || WILL_FIRE_RL_action_l38c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_f_init_l36c9, RL_action_l38c18, RL_action_l39c13,\n  RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__297_AND_abort_wget__298_299_OR_sta_ETC___d1369 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147[4] &&
	  fpart__h101513 != 6'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147 == 5'd31)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147[4] &&
	  fpart__h101513 != 6'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147 != 5'd31)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147 +
		       5'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147[4] ||
	   fpart__h101513 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_66_BITS_19_TO_16_67_m_ETC___d1147));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h101744);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h101811);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h101900);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h101989);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102078);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102167);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213[4] &&
	  fpart__h102304 != 6'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213 == 5'd31)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213[4] &&
	  fpart__h102304 != 6'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213 != 5'd31)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213 +
		       5'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213[4] ||
	   fpart__h102304 == 6'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_66_BITS_9_TO_6_48_mmT_ETC___d1213));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102529);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102596);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102685);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102774);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102863);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h102952);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  mmTed_tedErrorCalc_state_mkFSMstate == 5'd17)
	$display("Error: \"MMTED_optimal.bsv\", line 57, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l57c44] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 37, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l37c9] and\n  [RL_mmTed_tedErrorCalc_action_l38c20, RL_mmTed_tedErrorCalc_action_l39c22,\n  RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 38, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l38c20] and\n  [RL_mmTed_tedErrorCalc_action_l39c22,\n  RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 39, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l39c22] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 37, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_update_l37c9] and\n  [RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 42, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l42c16] and\n  [RL_mmTed_tedErrorCalc_action_l43c20, RL_mmTed_tedErrorCalc_action_l45c16,\n  RL_mmTed_tedErrorCalc_action_l46c15, RL_mmTed_tedErrorCalc_action_l47c16,\n  RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 43, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l43c20] and\n  [RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 46, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l46c15] and\n  [RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 45, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l45c16] and\n  [RL_mmTed_tedErrorCalc_action_l46c15, RL_mmTed_tedErrorCalc_action_l47c16,\n  RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 47, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l47c16] and\n  [RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 48, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l48c15] and\n  [RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 50, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l50c19] and\n  [RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 51, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l51c16] and\n  [RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 52, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l52c17] and\n  [RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 53, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l53c15] and\n  [RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 54, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l54c18] and\n  [RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 57, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l57c9] and\n  [RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

