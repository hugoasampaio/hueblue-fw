//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 00:01:42 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire cc_costasL_1$whas,
       cc_costasL_3$whas,
       cc_fixFxError_atanCalc_1$whas,
       cc_fixFxError_atanCalc_3$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register cc_costasL
  reg cc_costasL;
  wire cc_costasL$D_IN, cc_costasL$EN;

  // register cc_costasL_1_1
  reg cc_costasL_1_1;
  wire cc_costasL_1_1$D_IN, cc_costasL_1_1$EN;

  // register cc_costasL_2_1
  reg [3 : 0] cc_costasL_2_1;
  reg [3 : 0] cc_costasL_2_1$D_IN;
  wire cc_costasL_2_1$EN;

  // register cc_costasL_3_1
  reg cc_costasL_3_1;
  wire cc_costasL_3_1$D_IN, cc_costasL_3_1$EN;

  // register cc_costasL_4
  reg cc_costasL_4;
  wire cc_costasL_4$D_IN, cc_costasL_4$EN;

  // register cc_dummy
  reg cc_dummy;
  wire cc_dummy$D_IN, cc_dummy$EN;

  // register cc_error
  reg [23 : 0] cc_error;
  wire [23 : 0] cc_error$D_IN;
  wire cc_error$EN;

  // register cc_fixFxError_atanCalc
  reg cc_fixFxError_atanCalc;
  wire cc_fixFxError_atanCalc$D_IN, cc_fixFxError_atanCalc$EN;

  // register cc_fixFxError_atanCalc_1_1
  reg cc_fixFxError_atanCalc_1_1;
  wire cc_fixFxError_atanCalc_1_1$D_IN, cc_fixFxError_atanCalc_1_1$EN;

  // register cc_fixFxError_atanCalc_2_1
  reg [3 : 0] cc_fixFxError_atanCalc_2_1;
  reg [3 : 0] cc_fixFxError_atanCalc_2_1$D_IN;
  wire cc_fixFxError_atanCalc_2_1$EN;

  // register cc_fixFxError_atanCalc_3_1
  reg cc_fixFxError_atanCalc_3_1;
  wire cc_fixFxError_atanCalc_3_1$D_IN, cc_fixFxError_atanCalc_3_1$EN;

  // register cc_fixFxError_atanCalc_4
  reg cc_fixFxError_atanCalc_4;
  wire cc_fixFxError_atanCalc_4$D_IN, cc_fixFxError_atanCalc_4$EN;

  // register cc_fixFxError_limitX_inner_reg
  reg [11 : 0] cc_fixFxError_limitX_inner_reg;
  wire [11 : 0] cc_fixFxError_limitX_inner_reg$D_IN;
  wire cc_fixFxError_limitX_inner_reg$EN;

  // register cc_fixFxError_limitY_inner_reg
  reg [11 : 0] cc_fixFxError_limitY_inner_reg;
  wire [11 : 0] cc_fixFxError_limitY_inner_reg$D_IN;
  wire cc_fixFxError_limitY_inner_reg$EN;

  // register cc_fixFxError_limitZ_inner_reg
  reg [11 : 0] cc_fixFxError_limitZ_inner_reg;
  wire [11 : 0] cc_fixFxError_limitZ_inner_reg$D_IN;
  wire cc_fixFxError_limitZ_inner_reg$EN;

  // register cc_fixFxError_n
  reg [3 : 0] cc_fixFxError_n;
  wire [3 : 0] cc_fixFxError_n$D_IN;
  wire cc_fixFxError_n$EN;

  // register cc_fixFxError_x_
  reg [23 : 0] cc_fixFxError_x_;
  reg [23 : 0] cc_fixFxError_x_$D_IN;
  wire cc_fixFxError_x_$EN;

  // register cc_fixFxError_y_
  reg [23 : 0] cc_fixFxError_y_;
  reg [23 : 0] cc_fixFxError_y_$D_IN;
  wire cc_fixFxError_y_$EN;

  // register cc_fixFxError_z_
  reg [23 : 0] cc_fixFxError_z_;
  reg [23 : 0] cc_fixFxError_z_$D_IN;
  wire cc_fixFxError_z_$EN;

  // register cc_freq
  reg [23 : 0] cc_freq;
  wire [23 : 0] cc_freq$D_IN;
  wire cc_freq$EN;

  // register cc_limitError_inner_reg
  reg [11 : 0] cc_limitError_inner_reg;
  wire [11 : 0] cc_limitError_inner_reg$D_IN;
  wire cc_limitError_inner_reg$EN;

  // register cc_limitFreqs_inner_reg
  reg [11 : 0] cc_limitFreqs_inner_reg;
  wire [11 : 0] cc_limitFreqs_inner_reg$D_IN;
  wire cc_limitFreqs_inner_reg$EN;

  // register cc_limitPhase_inner_reg
  reg [11 : 0] cc_limitPhase_inner_reg;
  wire [11 : 0] cc_limitPhase_inner_reg$D_IN;
  wire cc_limitPhase_inner_reg$EN;

  // register cc_phase
  reg [23 : 0] cc_phase;
  reg [23 : 0] cc_phase$D_IN;
  wire cc_phase$EN;

  // register cc_sample
  reg [47 : 0] cc_sample;
  wire [47 : 0] cc_sample$D_IN;
  wire cc_sample$EN;

  // register fV
  reg [23 : 0] fV;
  wire [23 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule cc_fixFxError_ix
  wire [23 : 0] cc_fixFxError_ix$D_IN, cc_fixFxError_ix$D_OUT;
  wire cc_fixFxError_ix$CLR,
       cc_fixFxError_ix$DEQ,
       cc_fixFxError_ix$EMPTY_N,
       cc_fixFxError_ix$ENQ,
       cc_fixFxError_ix$FULL_N;

  // ports of submodule cc_fixFxError_iy
  wire [23 : 0] cc_fixFxError_iy$D_IN, cc_fixFxError_iy$D_OUT;
  wire cc_fixFxError_iy$CLR,
       cc_fixFxError_iy$DEQ,
       cc_fixFxError_iy$EMPTY_N,
       cc_fixFxError_iy$ENQ,
       cc_fixFxError_iy$FULL_N;

  // ports of submodule cc_fixFxError_iz
  wire [23 : 0] cc_fixFxError_iz$D_IN, cc_fixFxError_iz$D_OUT;
  wire cc_fixFxError_iz$CLR,
       cc_fixFxError_iz$DEQ,
       cc_fixFxError_iz$EMPTY_N,
       cc_fixFxError_iz$ENQ,
       cc_fixFxError_iz$FULL_N;

  // ports of submodule cc_inSample
  wire [47 : 0] cc_inSample$D_IN, cc_inSample$D_OUT;
  wire cc_inSample$CLR,
       cc_inSample$DEQ,
       cc_inSample$EMPTY_N,
       cc_inSample$ENQ,
       cc_inSample$FULL_N;

  // ports of submodule cc_outSample
  wire [47 : 0] cc_outSample$D_IN, cc_outSample$D_OUT;
  wire cc_outSample$CLR,
       cc_outSample$DEQ,
       cc_outSample$EMPTY_N,
       cc_outSample$ENQ,
       cc_outSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l33c15,
       WILL_FIRE_RL_action_l35c13,
       WILL_FIRE_RL_cc_costasL_action_l43c19,
       WILL_FIRE_RL_cc_costasL_action_l44c17,
       WILL_FIRE_RL_cc_costasL_action_l45c9,
       WILL_FIRE_RL_cc_costasL_action_l49c9,
       WILL_FIRE_RL_cc_costasL_action_l53c18,
       WILL_FIRE_RL_cc_costasL_action_l63c19,
       WILL_FIRE_RL_cc_costasL_action_l67c19,
       WILL_FIRE_RL_cc_costasL_fsm_start,
       WILL_FIRE_RL_cc_costasL_idle_l41c22,
       WILL_FIRE_RL_cc_costasL_idle_l41c22_1,
       WILL_FIRE_RL_cc_costasL_idle_l41c22_2,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_fsm_start,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22,
       WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_cc_sample$write_1__VAL_1, MUX_cc_sample$write_1__VAL_2;
  wire [23 : 0] MUX_cc_error$write_1__VAL_1,
		MUX_cc_error$write_1__VAL_2,
		MUX_cc_fixFxError_x_$write_1__VAL_2,
		MUX_cc_fixFxError_x_$write_1__VAL_3,
		MUX_cc_fixFxError_x_$write_1__VAL_4,
		MUX_cc_fixFxError_x_$write_1__VAL_5,
		MUX_cc_fixFxError_y_$write_1__VAL_2,
		MUX_cc_fixFxError_y_$write_1__VAL_3,
		MUX_cc_fixFxError_y_$write_1__VAL_4,
		MUX_cc_fixFxError_y_$write_1__VAL_5,
		MUX_cc_fixFxError_z_$write_1__VAL_1,
		MUX_cc_fixFxError_z_$write_1__VAL_2,
		MUX_cc_fixFxError_z_$write_1__VAL_4,
		MUX_cc_fixFxError_z_$write_1__VAL_5,
		MUX_cc_freq$write_1__VAL_1,
		MUX_cc_freq$write_1__VAL_2,
		MUX_cc_phase$write_1__VAL_1,
		MUX_cc_phase$write_1__VAL_2,
		MUX_cc_phase$write_1__VAL_3,
		MUX_cc_phase$write_1__VAL_4;
  wire [9 : 0] MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_cc_fixFxError_n$write_1__VAL_1;
  wire MUX_cc_costasL_2_1$write_1__SEL_1,
       MUX_cc_fixFxError_atanCalc_2_1$write_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1;
  wire [47 : 0] IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531,
		IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577,
		IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d529,
		IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d575,
		IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384,
		IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_cc_fi_ETC___d382,
		IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d85,
		IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87,
		IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d172,
		IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429,
		IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_cc_fi_ETC___d427,
		IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d211,
		IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d124,
		IF_cc_sample_17_BIT_47_69_THEN_NEG_cc_sample_1_ETC___d480,
		x__h126311,
		x__h57112,
		x__h60296,
		x__h63041;
  wire [35 : 0] IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546,
		IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592,
		IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399,
		IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102,
		IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444,
		IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d543,
		IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d589,
		IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d396,
		IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d99,
		IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d186,
		IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d441,
		IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d225,
		IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d138,
		IF_cc_sample_17_BIT_47_69_AND_NOT_cc_sample_17_ETC___d494,
		x__h125982,
		x__h56783,
		x__h59967,
		x__h62712;
  wire [23 : 0] _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81,
		cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168,
		cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207,
		cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120,
		x__h120133,
		x__h123166,
		x__h126356,
		x__h126375,
		x__h132205,
		x__h132970,
		x__h54419,
		x__h57167,
		x__h60351,
		x__h63096,
		x__h66166,
		x__h66266,
		x__h66337,
		x__h67228,
		x__h67243,
		x__h67299,
		x__h67314,
		x__h67370;
  wire [11 : 0] x_f__h128603,
		x_f__h131906,
		x_f__h135244,
		x_f__h67876,
		x_f__h67914,
		x_f__h67928,
		y_f__h120975,
		y_f__h124008,
		y_f__h127204,
		y_f__h130490,
		y_f__h133812,
		y_f__h55264,
		y_f__h58009,
		y_f__h61193,
		y_f__h63938;
  wire NOT_cc_costasL_2_whas__06_28_OR_NOT_cc_costasL_ETC___d344,
       abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732,
       cc_costasL_2_whas__06_AND_cc_costasL_2_wget__0_ETC___d639,
       cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300,
       cc_fixFxError_n_8_ULT_14___d39,
       cc_fixFxError_z__1_SLE_0___d256,
       cc_fixFxError_z__1_SLE_3216___d72,
       cc_fixFxError_z__1_SLT_3216___d160,
       cc_phase_49_SLE_6433___d350,
       cc_phase_49_SLT_16770783___d351,
       n_82_ULT_106___d683;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule cc_fixFxError_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) cc_fixFxError_ix(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cc_fixFxError_ix$D_IN),
							   .ENQ(cc_fixFxError_ix$ENQ),
							   .DEQ(cc_fixFxError_ix$DEQ),
							   .CLR(cc_fixFxError_ix$CLR),
							   .D_OUT(cc_fixFxError_ix$D_OUT),
							   .FULL_N(cc_fixFxError_ix$FULL_N),
							   .EMPTY_N(cc_fixFxError_ix$EMPTY_N));

  // submodule cc_fixFxError_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) cc_fixFxError_iy(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cc_fixFxError_iy$D_IN),
							   .ENQ(cc_fixFxError_iy$ENQ),
							   .DEQ(cc_fixFxError_iy$DEQ),
							   .CLR(cc_fixFxError_iy$CLR),
							   .D_OUT(cc_fixFxError_iy$D_OUT),
							   .FULL_N(cc_fixFxError_iy$FULL_N),
							   .EMPTY_N(cc_fixFxError_iy$EMPTY_N));

  // submodule cc_fixFxError_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) cc_fixFxError_iz(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(cc_fixFxError_iz$D_IN),
							   .ENQ(cc_fixFxError_iz$ENQ),
							   .DEQ(cc_fixFxError_iz$DEQ),
							   .CLR(cc_fixFxError_iz$CLR),
							   .D_OUT(cc_fixFxError_iz$D_OUT),
							   .FULL_N(cc_fixFxError_iz$FULL_N),
							   .EMPTY_N(cc_fixFxError_iz$EMPTY_N));

  // submodule cc_inSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) cc_inSample(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(cc_inSample$D_IN),
						      .ENQ(cc_inSample$ENQ),
						      .DEQ(cc_inSample$DEQ),
						      .CLR(cc_inSample$CLR),
						      .D_OUT(cc_inSample$D_OUT),
						      .FULL_N(cc_inSample$FULL_N),
						      .EMPTY_N(cc_inSample$EMPTY_N));

  // submodule cc_outSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) cc_outSample(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(cc_outSample$D_IN),
						       .ENQ(cc_outSample$ENQ),
						       .DEQ(cc_outSample$DEQ),
						       .CLR(cc_outSample$CLR),
						       .D_OUT(cc_outSample$D_OUT),
						       .FULL_N(cc_outSample$FULL_N),
						       .EMPTY_N(cc_outSample$EMPTY_N));

  // rule RL_action_l33c15
  assign WILL_FIRE_RL_action_l33c15 =
	     cc_inSample$FULL_N && n_82_ULT_106___d683 &&
	     (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd8) ;

  // rule RL_action_l35c13
  assign WILL_FIRE_RL_action_l35c13 =
	     cc_outSample$EMPTY_N && state_mkFSMstate == 4'd6 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !n_82_ULT_106___d683 && start_wire$whas &&
	     state_mkFSMstate == 4'd5 ||
	     !n_82_ULT_106___d683 && start_wire$whas &&
	     state_mkFSMstate == 4'd8 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_82_ULT_106___d683 && !start_wire$whas &&
	     state_mkFSMstate == 4'd5 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_82_ULT_106___d683 && !start_wire$whas &&
	     state_mkFSMstate == 4'd8 ;

  // rule RL_cc_fixFxError_atanCalc_action_l55c11
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 =
	     cc_fixFxError_ix$EMPTY_N && cc_fixFxError_atanCalc_2_1 == 4'd1 ;

  // rule RL_cc_fixFxError_atanCalc_action_l56c12
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 =
	     cc_fixFxError_iy$EMPTY_N && cc_fixFxError_atanCalc_2_1 == 4'd2 ;

  // rule RL_cc_fixFxError_atanCalc_action_l57c11
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 =
	     cc_fixFxError_iy$EMPTY_N && cc_fixFxError_atanCalc_2_1 == 4'd3 ;

  // rule RL_cc_fixFxError_atanCalc_action_l58c12
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 =
	     cc_fixFxError_iz$EMPTY_N && cc_fixFxError_atanCalc_2_1 == 4'd4 ;

  // rule RL_cc_fixFxError_atanCalc_action_l59c11
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 =
	     cc_fixFxError_iz$EMPTY_N && cc_fixFxError_atanCalc_2_1 == 4'd5 ;

  // rule RL_cc_fixFxError_atanCalc_action_l61c32
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 =
	     !cc_fixFxError_z__1_SLE_3216___d72 &&
	     (cc_fixFxError_atanCalc_2_1 == 4'd6 ||
	      cc_fixFxError_atanCalc_2_1 == 4'd7) ;

  // rule RL_cc_fixFxError_atanCalc_action_l74c13
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 =
	     cc_fixFxError_n_8_ULT_14___d39 &&
	     (cc_fixFxError_atanCalc_2_1 == 4'd9 ||
	      cc_fixFxError_atanCalc_2_1 == 4'd12) ;

  // rule RL_cc_fixFxError_atanCalc_fsm_start
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_fsm_start =
	     cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300 &&
	     cc_fixFxError_atanCalc ;

  // rule RL_cc_fixFxError_atanCalc_action_l67c32
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 =
	     cc_fixFxError_z__1_SLE_3216___d72 &&
	     cc_fixFxError_z__1_SLT_3216___d160 &&
	     (cc_fixFxError_atanCalc_2_1 == 4'd6 ||
	      cc_fixFxError_atanCalc_2_1 == 4'd7) ||
	     cc_fixFxError_z__1_SLT_3216___d160 &&
	     cc_fixFxError_atanCalc_2_1 == 4'd8 ;

  // rule RL_cc_fixFxError_atanCalc_action_f_init_l73c9
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 =
	     cc_fixFxError_z__1_SLE_3216___d72 &&
	     !cc_fixFxError_z__1_SLT_3216___d160 &&
	     (cc_fixFxError_atanCalc_2_1 == 4'd6 ||
	      cc_fixFxError_atanCalc_2_1 == 4'd7) ||
	     !cc_fixFxError_z__1_SLT_3216___d160 &&
	     cc_fixFxError_atanCalc_2_1 == 4'd8 ;

  // rule RL_cc_fixFxError_atanCalc_idle_l53c22
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22 =
	     !cc_fixFxError_n_8_ULT_14___d39 &&
	     !cc_fixFxError_atanCalc_1$whas &&
	     cc_fixFxError_atanCalc_2_1 == 4'd9 ;

  // rule RL_cc_fixFxError_atanCalc_idle_l53c22_1
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22_1 =
	     !cc_fixFxError_n_8_ULT_14___d39 &&
	     !cc_fixFxError_atanCalc_1$whas &&
	     cc_fixFxError_atanCalc_2_1 == 4'd12 ;

  // rule RL_cc_costasL_action_l44c17
  assign WILL_FIRE_RL_cc_costasL_action_l44c17 =
	     cc_inSample$EMPTY_N && cc_costasL_2_1 == 4'd1 ;

  // rule RL_cc_costasL_action_l45c9
  assign WILL_FIRE_RL_cc_costasL_action_l45c9 =
	     cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300 &&
	     !cc_fixFxError_atanCalc &&
	     cc_costasL_2_1 == 4'd2 ;

  // rule RL_cc_fixFxError_atanCalc_action_l54c12
  assign WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 =
	     cc_fixFxError_ix$EMPTY_N &&
	     (cc_fixFxError_atanCalc_1$whas &&
	      cc_fixFxError_atanCalc_2_1 == 4'd0 ||
	      !cc_fixFxError_n_8_ULT_14___d39 &&
	      cc_fixFxError_atanCalc_1$whas &&
	      cc_fixFxError_atanCalc_2_1 == 4'd9 ||
	      !cc_fixFxError_n_8_ULT_14___d39 &&
	      cc_fixFxError_atanCalc_1$whas &&
	      cc_fixFxError_atanCalc_2_1 == 4'd12) ;

  // rule RL_cc_costasL_action_l49c9
  assign WILL_FIRE_RL_cc_costasL_action_l49c9 =
	     cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300 &&
	     !cc_fixFxError_atanCalc &&
	     cc_costasL_2_1 == 4'd3 ;

  // rule RL_cc_costasL_action_l53c18
  assign WILL_FIRE_RL_cc_costasL_action_l53c18 =
	     cc_outSample$FULL_N && cc_costasL_2_1 == 4'd4 ;

  // rule RL_cc_costasL_action_l63c19
  assign WILL_FIRE_RL_cc_costasL_action_l63c19 =
	     !cc_phase_49_SLE_6433___d350 &&
	     (cc_costasL_2_1 == 4'd11 || cc_costasL_2_1 == 4'd12) ;

  // rule RL_cc_costasL_fsm_start
  assign WILL_FIRE_RL_cc_costasL_fsm_start =
	     cc_costasL_2_whas__06_AND_cc_costasL_2_wget__0_ETC___d639 &&
	     (!cc_costasL_1_1 || cc_costasL_3_1) &&
	     cc_costasL ;

  // rule RL_cc_costasL_action_l43c19
  assign WILL_FIRE_RL_cc_costasL_action_l43c19 =
	     NOT_cc_costasL_2_whas__06_28_OR_NOT_cc_costasL_ETC___d344 &&
	     (cc_costasL_1$whas && cc_costasL_2_1 == 4'd0 ||
	      cc_phase_49_SLE_6433___d350 &&
	      !cc_phase_49_SLT_16770783___d351 &&
	      cc_costasL_1$whas &&
	      cc_costasL_2_1 == 4'd11 ||
	      cc_phase_49_SLE_6433___d350 &&
	      !cc_phase_49_SLT_16770783___d351 &&
	      cc_costasL_1$whas &&
	      cc_costasL_2_1 == 4'd12 ||
	      !cc_phase_49_SLT_16770783___d351 && cc_costasL_1$whas &&
	      cc_costasL_2_1 == 4'd13) ;

  // rule RL_cc_costasL_action_l67c19
  assign WILL_FIRE_RL_cc_costasL_action_l67c19 =
	     cc_phase_49_SLE_6433___d350 && cc_phase_49_SLT_16770783___d351 &&
	     (cc_costasL_2_1 == 4'd11 || cc_costasL_2_1 == 4'd12) ||
	     cc_phase_49_SLT_16770783___d351 && cc_costasL_2_1 == 4'd13 ;

  // rule RL_cc_costasL_idle_l41c22
  assign WILL_FIRE_RL_cc_costasL_idle_l41c22 =
	     cc_phase_49_SLE_6433___d350 &&
	     !cc_phase_49_SLT_16770783___d351 &&
	     !cc_costasL_1$whas &&
	     cc_costasL_2_1 == 4'd11 ;

  // rule RL_cc_costasL_idle_l41c22_1
  assign WILL_FIRE_RL_cc_costasL_idle_l41c22_1 =
	     cc_phase_49_SLE_6433___d350 &&
	     !cc_phase_49_SLT_16770783___d351 &&
	     !cc_costasL_1$whas &&
	     cc_costasL_2_1 == 4'd12 ;

  // rule RL_cc_costasL_idle_l41c22_2
  assign WILL_FIRE_RL_cc_costasL_idle_l41c22_2 =
	     !cc_phase_49_SLT_16770783___d351 && !cc_costasL_1$whas &&
	     cc_costasL_2_1 == 4'd13 ;

  // inputs to muxes for submodule ports
  assign MUX_cc_costasL_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_2 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_1 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22 ;
  assign MUX_cc_fixFxError_atanCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_cc_error$write_1__VAL_1 =
	     (!x__h125982[35] &&
	      (x__h125982[23] || x__h125982[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h125982[35] &&
		 (!x__h125982[23] || ~x__h125982[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h125982[23:0]) ;
  assign MUX_cc_error$write_1__VAL_2 = { cc_error[23:12], x_f__h128603 } ;
  assign MUX_cc_fixFxError_n$write_1__VAL_1 = cc_fixFxError_n + 4'd1 ;
  assign MUX_cc_fixFxError_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[35] &&
	      (IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[23] ||
	       IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[35] &&
		 (!IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[23] ||
		  ~IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102[23:0]) ;
  assign MUX_cc_fixFxError_x_$write_1__VAL_3 =
	     (!x__h59967[35] &&
	      (x__h59967[23] || x__h59967[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h59967[35] &&
		 (!x__h59967[23] || ~x__h59967[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h59967[23:0]) ;
  assign MUX_cc_fixFxError_x_$write_1__VAL_4 =
	     cc_fixFxError_z__1_SLE_0___d256 ? x__h67228 : x__h66166 ;
  assign MUX_cc_fixFxError_x_$write_1__VAL_5 =
	     { cc_fixFxError_x_[23:12], x_f__h67876 } ;
  assign MUX_cc_fixFxError_y_$write_1__VAL_2 =
	     (!x__h56783[35] &&
	      (x__h56783[23] || x__h56783[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h56783[35] &&
		 (!x__h56783[23] || ~x__h56783[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h56783[23:0]) ;
  assign MUX_cc_fixFxError_y_$write_1__VAL_3 =
	     (!x__h62712[35] &&
	      (x__h62712[23] || x__h62712[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h62712[35] &&
		 (!x__h62712[23] || ~x__h62712[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h62712[23:0]) ;
  assign MUX_cc_fixFxError_y_$write_1__VAL_4 =
	     cc_fixFxError_z__1_SLE_0___d256 ? x__h67299 : x__h66266 ;
  assign MUX_cc_fixFxError_y_$write_1__VAL_5 =
	     { cc_fixFxError_y_[23:12], x_f__h67914 } ;
  assign MUX_cc_fixFxError_z_$write_1__VAL_1 = cc_fixFxError_z_ + 24'd3216 ;
  assign MUX_cc_fixFxError_z_$write_1__VAL_2 = cc_fixFxError_z_ - 24'd3216 ;
  assign MUX_cc_fixFxError_z_$write_1__VAL_4 =
	     cc_fixFxError_z__1_SLE_0___d256 ? x__h67370 : x__h66337 ;
  assign MUX_cc_fixFxError_z_$write_1__VAL_5 =
	     { cc_fixFxError_z_[23:12], x_f__h67928 } ;
  assign MUX_cc_freq$write_1__VAL_1 =
	     cc_freq +
	     ((!IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[35] &&
	       (IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[23] ||
		IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[35] &&
		  (!IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[23] ||
		   ~IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546[23:0])) ;
  assign MUX_cc_freq$write_1__VAL_2 = { cc_freq[23:12], x_f__h131906 } ;
  assign MUX_cc_phase$write_1__VAL_1 = cc_phase + 24'd6433 ;
  assign MUX_cc_phase$write_1__VAL_2 =
	     x__h132205 +
	     ((!IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[35] &&
	       (IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[23] ||
		IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[35] &&
		  (!IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[23] ||
		   ~IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592[23:0])) ;
  assign MUX_cc_phase$write_1__VAL_3 = cc_phase - 24'd6433 ;
  assign MUX_cc_phase$write_1__VAL_4 = { cc_phase[23:12], x_f__h135244 } ;
  assign MUX_cc_sample$write_1__VAL_1 =
	     { (!IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[35] &&
		(IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[23] ||
		 IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[35:24] !=
		 12'd0)) ?
		 24'd8388607 :
		 ((IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[35] &&
		   (!IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[23] ||
		    ~IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[35:24] !=
		    12'd0)) ?
		    24'd8388608 :
		    IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399[23:0]),
	       cc_sample[23:0] } ;
  assign MUX_cc_sample$write_1__VAL_2 =
	     { cc_sample[47:24],
	       (!IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[35] &&
		(IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[23] ||
		 IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[35:24] !=
		 12'd0)) ?
		 24'd8388607 :
		 ((IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[35] &&
		   (!IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[23] ||
		    ~IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[35:24] !=
		    12'd0)) ?
		    24'd8388608 :
		    IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444[23:0]) } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign cc_fixFxError_atanCalc_1$whas =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_fsm_start ||
	     cc_fixFxError_atanCalc_1_1 && !cc_fixFxError_atanCalc_3_1 ;
  assign cc_costasL_1$whas =
	     WILL_FIRE_RL_cc_costasL_fsm_start ||
	     cc_costasL_1_1 && !cc_costasL_3_1 ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign cc_fixFxError_atanCalc_3$whas =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd11 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 ;
  assign cc_costasL_3$whas =
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_2 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_1 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22 ||
	     WILL_FIRE_RL_cc_costasL_action_l67c19 ||
	     WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	     cc_costasL_2_1 == 4'd10 ||
	     cc_costasL_2_1 == 4'd9 ||
	     cc_costasL_2_1 == 4'd8 ||
	     cc_costasL_2_1 == 4'd7 ||
	     cc_costasL_2_1 == 4'd6 ||
	     cc_costasL_2_1 == 4'd5 ||
	     WILL_FIRE_RL_cc_costasL_action_l53c18 ||
	     WILL_FIRE_RL_cc_costasL_action_l49c9 ||
	     WILL_FIRE_RL_cc_costasL_action_l45c9 ||
	     WILL_FIRE_RL_cc_costasL_action_l44c17 ||
	     WILL_FIRE_RL_cc_costasL_action_l43c19 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 4'd7 ||
	     WILL_FIRE_RL_action_l35c13 ||
	     WILL_FIRE_RL_action_l33c15 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register cc_costasL
  assign cc_costasL$D_IN = !WILL_FIRE_RL_cc_costasL_fsm_start ;
  assign cc_costasL$EN =
	     WILL_FIRE_RL_cc_costasL_fsm_start ||
	     cc_costasL_2_whas__06_AND_cc_costasL_2_wget__0_ETC___d639 &&
	     (!cc_costasL_1_1 || cc_costasL_3_1) &&
	     !cc_costasL ;

  // register cc_costasL_1_1
  assign cc_costasL_1_1$D_IN = cc_costasL_1$whas ;
  assign cc_costasL_1_1$EN = 1'd1 ;

  // register cc_costasL_2_1
  always@(MUX_cc_costasL_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_cc_costasL_action_l43c19 or
	  WILL_FIRE_RL_cc_costasL_action_l44c17 or
	  WILL_FIRE_RL_cc_costasL_action_l45c9 or
	  WILL_FIRE_RL_cc_costasL_action_l49c9 or
	  WILL_FIRE_RL_cc_costasL_action_l53c18 or
	  cc_costasL_2_1 or
	  WILL_FIRE_RL_cc_costasL_action_l63c19 or
	  WILL_FIRE_RL_cc_costasL_action_l67c19)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cc_costasL_2_1$write_1__SEL_1: cc_costasL_2_1$D_IN = 4'd0;
      WILL_FIRE_RL_cc_costasL_action_l43c19: cc_costasL_2_1$D_IN = 4'd1;
      WILL_FIRE_RL_cc_costasL_action_l44c17: cc_costasL_2_1$D_IN = 4'd2;
      WILL_FIRE_RL_cc_costasL_action_l45c9: cc_costasL_2_1$D_IN = 4'd3;
      WILL_FIRE_RL_cc_costasL_action_l49c9: cc_costasL_2_1$D_IN = 4'd4;
      WILL_FIRE_RL_cc_costasL_action_l53c18: cc_costasL_2_1$D_IN = 4'd5;
      cc_costasL_2_1 == 4'd5: cc_costasL_2_1$D_IN = 4'd6;
      cc_costasL_2_1 == 4'd6: cc_costasL_2_1$D_IN = 4'd7;
      cc_costasL_2_1 == 4'd7: cc_costasL_2_1$D_IN = 4'd8;
      cc_costasL_2_1 == 4'd8: cc_costasL_2_1$D_IN = 4'd9;
      cc_costasL_2_1 == 4'd9: cc_costasL_2_1$D_IN = 4'd10;
      cc_costasL_2_1 == 4'd10: cc_costasL_2_1$D_IN = 4'd11;
      WILL_FIRE_RL_cc_costasL_action_l63c19: cc_costasL_2_1$D_IN = 4'd12;
      WILL_FIRE_RL_cc_costasL_action_l67c19: cc_costasL_2_1$D_IN = 4'd13;
      default: cc_costasL_2_1$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_costasL_2_1$EN =
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_2 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22_1 ||
	     WILL_FIRE_RL_cc_costasL_idle_l41c22 ||
	     WILL_FIRE_RL_cc_costasL_action_l43c19 ||
	     WILL_FIRE_RL_cc_costasL_action_l44c17 ||
	     WILL_FIRE_RL_cc_costasL_action_l45c9 ||
	     WILL_FIRE_RL_cc_costasL_action_l49c9 ||
	     WILL_FIRE_RL_cc_costasL_action_l53c18 ||
	     cc_costasL_2_1 == 4'd5 ||
	     cc_costasL_2_1 == 4'd6 ||
	     cc_costasL_2_1 == 4'd7 ||
	     cc_costasL_2_1 == 4'd8 ||
	     cc_costasL_2_1 == 4'd9 ||
	     cc_costasL_2_1 == 4'd10 ||
	     WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	     WILL_FIRE_RL_cc_costasL_action_l67c19 ;

  // register cc_costasL_3_1
  assign cc_costasL_3_1$D_IN = cc_costasL_3$whas ;
  assign cc_costasL_3_1$EN = 1'd1 ;

  // register cc_costasL_4
  assign cc_costasL_4$D_IN = cc_costasL_3$whas || cc_costasL_4 ;
  assign cc_costasL_4$EN = 1'd1 ;

  // register cc_dummy
  assign cc_dummy$D_IN = 1'b0 ;
  assign cc_dummy$EN = 1'b0 ;

  // register cc_error
  assign cc_error$D_IN =
	     (cc_costasL_2_1 == 4'd5) ?
	       MUX_cc_error$write_1__VAL_1 :
	       MUX_cc_error$write_1__VAL_2 ;
  assign cc_error$EN = cc_costasL_2_1 == 4'd5 || cc_costasL_2_1 == 4'd6 ;

  // register cc_fixFxError_atanCalc
  assign cc_fixFxError_atanCalc$D_IN =
	     !WILL_FIRE_RL_cc_fixFxError_atanCalc_fsm_start ;
  assign cc_fixFxError_atanCalc$EN =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_fsm_start ||
	     WILL_FIRE_RL_cc_costasL_action_l43c19 ;

  // register cc_fixFxError_atanCalc_1_1
  assign cc_fixFxError_atanCalc_1_1$D_IN = cc_fixFxError_atanCalc_1$whas ;
  assign cc_fixFxError_atanCalc_1_1$EN = 1'd1 ;

  // register cc_fixFxError_atanCalc_2_1
  always@(MUX_cc_fixFxError_atanCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 or
	  cc_fixFxError_atanCalc_2_1)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_cc_fixFxError_atanCalc_2_1$write_1__SEL_1:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd0;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd1;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd2;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd3;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd4;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd5;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd6;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd7;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd8;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd9;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd10;
      cc_fixFxError_atanCalc_2_1 == 4'd10:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd11;
      cc_fixFxError_atanCalc_2_1 == 4'd11:
	  cc_fixFxError_atanCalc_2_1$D_IN = 4'd12;
      default: cc_fixFxError_atanCalc_2_1$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_fixFxError_atanCalc_2_1$EN =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22_1 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_idle_l53c22 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd11 ;

  // register cc_fixFxError_atanCalc_3_1
  assign cc_fixFxError_atanCalc_3_1$D_IN = cc_fixFxError_atanCalc_3$whas ;
  assign cc_fixFxError_atanCalc_3_1$EN = 1'd1 ;

  // register cc_fixFxError_atanCalc_4
  assign cc_fixFxError_atanCalc_4$D_IN =
	     cc_fixFxError_atanCalc_3$whas || cc_fixFxError_atanCalc_4 ;
  assign cc_fixFxError_atanCalc_4$EN = 1'd1 ;

  // register cc_fixFxError_limitX_inner_reg
  assign cc_fixFxError_limitX_inner_reg$D_IN = 12'h0 ;
  assign cc_fixFxError_limitX_inner_reg$EN = 1'b0 ;

  // register cc_fixFxError_limitY_inner_reg
  assign cc_fixFxError_limitY_inner_reg$D_IN = 12'h0 ;
  assign cc_fixFxError_limitY_inner_reg$EN = 1'b0 ;

  // register cc_fixFxError_limitZ_inner_reg
  assign cc_fixFxError_limitZ_inner_reg$D_IN = 12'h0 ;
  assign cc_fixFxError_limitZ_inner_reg$EN = 1'b0 ;

  // register cc_fixFxError_n
  assign cc_fixFxError_n$D_IN =
	     (cc_fixFxError_atanCalc_2_1 == 4'd11) ?
	       MUX_cc_fixFxError_n$write_1__VAL_1 :
	       4'd0 ;
  assign cc_fixFxError_n$EN =
	     cc_fixFxError_atanCalc_2_1 == 4'd11 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ;

  // register cc_fixFxError_x_
  always@(WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 or
	  cc_fixFxError_ix$D_OUT or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 or
	  MUX_cc_fixFxError_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 or
	  MUX_cc_fixFxError_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 or
	  MUX_cc_fixFxError_x_$write_1__VAL_4 or
	  cc_fixFxError_atanCalc_2_1 or MUX_cc_fixFxError_x_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12:
	  cc_fixFxError_x_$D_IN = cc_fixFxError_ix$D_OUT;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32:
	  cc_fixFxError_x_$D_IN = MUX_cc_fixFxError_x_$write_1__VAL_2;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32:
	  cc_fixFxError_x_$D_IN = MUX_cc_fixFxError_x_$write_1__VAL_3;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13:
	  cc_fixFxError_x_$D_IN = MUX_cc_fixFxError_x_$write_1__VAL_4;
      cc_fixFxError_atanCalc_2_1 == 4'd10:
	  cc_fixFxError_x_$D_IN = MUX_cc_fixFxError_x_$write_1__VAL_5;
      default: cc_fixFxError_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_fixFxError_x_$EN =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd10 ;

  // register cc_fixFxError_y_
  always@(WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 or
	  cc_fixFxError_iy$D_OUT or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 or
	  MUX_cc_fixFxError_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 or
	  MUX_cc_fixFxError_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 or
	  MUX_cc_fixFxError_y_$write_1__VAL_4 or
	  cc_fixFxError_atanCalc_2_1 or MUX_cc_fixFxError_y_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12:
	  cc_fixFxError_y_$D_IN = cc_fixFxError_iy$D_OUT;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32:
	  cc_fixFxError_y_$D_IN = MUX_cc_fixFxError_y_$write_1__VAL_2;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32:
	  cc_fixFxError_y_$D_IN = MUX_cc_fixFxError_y_$write_1__VAL_3;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13:
	  cc_fixFxError_y_$D_IN = MUX_cc_fixFxError_y_$write_1__VAL_4;
      cc_fixFxError_atanCalc_2_1 == 4'd10:
	  cc_fixFxError_y_$D_IN = MUX_cc_fixFxError_y_$write_1__VAL_5;
      default: cc_fixFxError_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_fixFxError_y_$EN =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd10 ;

  // register cc_fixFxError_z_
  always@(WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 or
	  MUX_cc_fixFxError_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 or
	  MUX_cc_fixFxError_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 or
	  cc_fixFxError_iz$D_OUT or
	  WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 or
	  MUX_cc_fixFxError_z_$write_1__VAL_4 or
	  cc_fixFxError_atanCalc_2_1 or MUX_cc_fixFxError_z_$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32:
	  cc_fixFxError_z_$D_IN = MUX_cc_fixFxError_z_$write_1__VAL_1;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32:
	  cc_fixFxError_z_$D_IN = MUX_cc_fixFxError_z_$write_1__VAL_2;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12:
	  cc_fixFxError_z_$D_IN = cc_fixFxError_iz$D_OUT;
      WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13:
	  cc_fixFxError_z_$D_IN = MUX_cc_fixFxError_z_$write_1__VAL_4;
      cc_fixFxError_atanCalc_2_1 == 4'd10:
	  cc_fixFxError_z_$D_IN = MUX_cc_fixFxError_z_$write_1__VAL_5;
      default: cc_fixFxError_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_fixFxError_z_$EN =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	     cc_fixFxError_atanCalc_2_1 == 4'd10 ;

  // register cc_freq
  assign cc_freq$D_IN =
	     (cc_costasL_2_1 == 4'd7) ?
	       MUX_cc_freq$write_1__VAL_1 :
	       MUX_cc_freq$write_1__VAL_2 ;
  assign cc_freq$EN = cc_costasL_2_1 == 4'd7 || cc_costasL_2_1 == 4'd8 ;

  // register cc_limitError_inner_reg
  assign cc_limitError_inner_reg$D_IN = 12'hFFF << inV ;
  assign cc_limitError_inner_reg$EN = state_mkFSMstate == 4'd2 ;

  // register cc_limitFreqs_inner_reg
  assign cc_limitFreqs_inner_reg$D_IN = cc_limitError_inner_reg$D_IN ;
  assign cc_limitFreqs_inner_reg$EN = state_mkFSMstate == 4'd3 ;

  // register cc_limitPhase_inner_reg
  assign cc_limitPhase_inner_reg$D_IN = cc_limitError_inner_reg$D_IN ;
  assign cc_limitPhase_inner_reg$EN = state_mkFSMstate == 4'd1 ;

  // register cc_phase
  always@(WILL_FIRE_RL_cc_costasL_action_l67c19 or
	  MUX_cc_phase$write_1__VAL_1 or
	  cc_costasL_2_1 or
	  MUX_cc_phase$write_1__VAL_2 or
	  WILL_FIRE_RL_cc_costasL_action_l63c19 or
	  MUX_cc_phase$write_1__VAL_3 or MUX_cc_phase$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_cc_costasL_action_l67c19:
	  cc_phase$D_IN = MUX_cc_phase$write_1__VAL_1;
      cc_costasL_2_1 == 4'd9: cc_phase$D_IN = MUX_cc_phase$write_1__VAL_2;
      WILL_FIRE_RL_cc_costasL_action_l63c19:
	  cc_phase$D_IN = MUX_cc_phase$write_1__VAL_3;
      cc_costasL_2_1 == 4'd10: cc_phase$D_IN = MUX_cc_phase$write_1__VAL_4;
      default: cc_phase$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign cc_phase$EN =
	     WILL_FIRE_RL_cc_costasL_action_l67c19 ||
	     cc_costasL_2_1 == 4'd9 ||
	     WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	     cc_costasL_2_1 == 4'd10 ;

  // register cc_sample
  assign cc_sample$D_IN =
	     WILL_FIRE_RL_cc_costasL_action_l45c9 ?
	       MUX_cc_sample$write_1__VAL_1 :
	       MUX_cc_sample$write_1__VAL_2 ;
  assign cc_sample$EN =
	     WILL_FIRE_RL_cc_costasL_action_l45c9 ||
	     WILL_FIRE_RL_cc_costasL_action_l49c9 ;

  // register fV
  assign fV$D_IN = { fV[23:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 4'd7) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 4'd7 || state_mkFSMstate == 4'd4 ;

  // register outV
  assign outV$D_IN = cc_outSample$D_OUT[47:24] ;
  assign outV$EN = WILL_FIRE_RL_action_l35c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l33c15 or WILL_FIRE_RL_action_l35c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 4'd1;
      state_mkFSMstate == 4'd1: state_mkFSMstate$D_IN = 4'd2;
      state_mkFSMstate == 4'd2: state_mkFSMstate$D_IN = 4'd3;
      state_mkFSMstate == 4'd3: state_mkFSMstate$D_IN = 4'd4;
      state_mkFSMstate == 4'd4: state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_action_l33c15: state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_action_l35c13: state_mkFSMstate$D_IN = 4'd7;
      state_mkFSMstate == 4'd7: state_mkFSMstate$D_IN = 4'd8;
      default: state_mkFSMstate$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 4'd1 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd4 ||
	     WILL_FIRE_RL_action_l33c15 ||
	     WILL_FIRE_RL_action_l35c13 ||
	     state_mkFSMstate == 4'd7 ;

  // submodule cc_fixFxError_ix
  assign cc_fixFxError_ix$D_IN = cc_inSample$D_OUT[47:24] ;
  assign cc_fixFxError_ix$ENQ = WILL_FIRE_RL_cc_costasL_action_l43c19 ;
  assign cc_fixFxError_ix$DEQ =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 ;
  assign cc_fixFxError_ix$CLR = 1'b0 ;

  // submodule cc_fixFxError_iy
  assign cc_fixFxError_iy$D_IN = cc_inSample$D_OUT[23:0] ;
  assign cc_fixFxError_iy$ENQ = WILL_FIRE_RL_cc_costasL_action_l43c19 ;
  assign cc_fixFxError_iy$DEQ =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ;
  assign cc_fixFxError_iy$CLR = 1'b0 ;

  // submodule cc_fixFxError_iz
  assign cc_fixFxError_iz$D_IN = 24'd0 - cc_phase ;
  assign cc_fixFxError_iz$ENQ = WILL_FIRE_RL_cc_costasL_action_l43c19 ;
  assign cc_fixFxError_iz$DEQ =
	     WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ;
  assign cc_fixFxError_iz$CLR = 1'b0 ;

  // submodule cc_inSample
  assign cc_inSample$D_IN = {2{fV}} ;
  assign cc_inSample$ENQ = WILL_FIRE_RL_action_l33c15 ;
  assign cc_inSample$DEQ = WILL_FIRE_RL_cc_costasL_action_l44c17 ;
  assign cc_inSample$CLR = 1'b0 ;

  // submodule cc_outSample
  assign cc_outSample$D_IN = cc_sample ;
  assign cc_outSample$ENQ = WILL_FIRE_RL_cc_costasL_action_l53c18 ;
  assign cc_outSample$DEQ = WILL_FIRE_RL_action_l35c13 ;
  assign cc_outSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d546 =
	     (!IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531[47] &&
	      IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d543[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d543 ;
  assign IF_NOT_IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_ETC___d592 =
	     (!IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577[47] &&
	      IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d589[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d589 ;
  assign IF_NOT_IF_cc_fixFxError_x__9_BIT_23_79_THEN_NE_ETC___d399 =
	     (!IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384[47] &&
	      IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d396[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d396 ;
  assign IF_NOT_IF_cc_fixFxError_x__9_MINUS_cc_fixFxErr_ETC___d102 =
	     (!IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87[47] &&
	      IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d99 ;
  assign IF_NOT_IF_cc_fixFxError_y__0_BIT_23_24_THEN_NE_ETC___d444 =
	     (!IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429[47] &&
	      IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d441[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d441 ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531 =
	     cc_error[23] ?
	       -IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d529 :
	       IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d529 ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d543 =
	     IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531[47:12] +
	     { 24'd0, y_f__h130490 } ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577 =
	     cc_error[23] ?
	       -IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d575 :
	       IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d575 ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d589 =
	     IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577[47:12] +
	     { 24'd0, y_f__h133812 } ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d529 =
	     x__h132970 * 24'd38 ;
  assign IF_cc_error_17_BIT_23_26_THEN_NEG_cc_error_17__ETC___d575 =
	     x__h132970 * 24'd540 ;
  assign IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384 =
	     cc_fixFxError_x_[23] ?
	       -IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_cc_fi_ETC___d382 :
	       IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_cc_fi_ETC___d382 ;
  assign IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d396 =
	     IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384[47:12] +
	     { 24'd0, y_f__h120975 } ;
  assign IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_cc_fi_ETC___d382 =
	     x__h120133 * 24'd2487 ;
  assign IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d85 =
	     x__h54419 * 24'd2896 ;
  assign IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87 =
	     cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81[23] ?
	       -IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d85 :
	       IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d85 ;
  assign IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d99 =
	     IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87[47:12] +
	     { 24'd0, y_f__h55264 } ;
  assign IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d172 =
	     x__h60351 * 24'd2896 ;
  assign IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d186 =
	     x__h60296[47:12] + { 24'd0, y_f__h61193 } ;
  assign IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429 =
	     cc_fixFxError_y_[23] ?
	       -IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_cc_fi_ETC___d427 :
	       IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_cc_fi_ETC___d427 ;
  assign IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d441 =
	     IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429[47:12] +
	     { 24'd0, y_f__h124008 } ;
  assign IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_cc_fi_ETC___d427 =
	     x__h123166 * 24'd2487 ;
  assign IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d211 =
	     x__h63096 * 24'd2896 ;
  assign IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d225 =
	     x__h63041[47:12] + { 24'd0, y_f__h63938 } ;
  assign IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d124 =
	     x__h57167 * 24'd2896 ;
  assign IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d138 =
	     x__h57112[47:12] + { 24'd0, y_f__h58009 } ;
  assign IF_cc_sample_17_BIT_47_69_AND_NOT_cc_sample_17_ETC___d494 =
	     x__h126311[47:12] + { 24'd0, y_f__h127204 } ;
  assign IF_cc_sample_17_BIT_47_69_THEN_NEG_cc_sample_1_ETC___d480 =
	     x__h126356 * x__h126375 ;
  assign NOT_cc_costasL_2_whas__06_28_OR_NOT_cc_costasL_ETC___d344 =
	     cc_fixFxError_ix$FULL_N && cc_inSample$EMPTY_N &&
	     cc_fixFxError_iy$FULL_N &&
	     cc_fixFxError_iz$FULL_N &&
	     cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300 &&
	     !cc_fixFxError_atanCalc ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 } ;
  assign abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732 =
	     (state_mkFSMstate == 4'd0 ||
	      !n_82_ULT_106___d683 && state_mkFSMstate == 4'd5 ||
	      !n_82_ULT_106___d683 && state_mkFSMstate == 4'd8) &&
	     (!start_reg_1 || state_fired) ;
  assign cc_costasL_2_whas__06_AND_cc_costasL_2_wget__0_ETC___d639 =
	     cc_costasL_2_1 == 4'd0 ||
	     cc_phase_49_SLE_6433___d350 &&
	     !cc_phase_49_SLT_16770783___d351 &&
	     cc_costasL_2_1 == 4'd11 ||
	     cc_phase_49_SLE_6433___d350 &&
	     !cc_phase_49_SLT_16770783___d351 &&
	     cc_costasL_2_1 == 4'd12 ||
	     !cc_phase_49_SLT_16770783___d351 && cc_costasL_2_1 == 4'd13 ;
  assign cc_fixFxError_atanCalc_2_whas_AND_cc_fixFxErro_ETC___d300 =
	     (cc_fixFxError_atanCalc_2_1 == 4'd0 ||
	      !cc_fixFxError_n_8_ULT_14___d39 &&
	      cc_fixFxError_atanCalc_2_1 == 4'd9 ||
	      !cc_fixFxError_n_8_ULT_14___d39 &&
	      cc_fixFxError_atanCalc_2_1 == 4'd12) &&
	     (!cc_fixFxError_atanCalc_1_1 || cc_fixFxError_atanCalc_3_1) ;
  assign cc_fixFxError_n_8_ULT_14___d39 = cc_fixFxError_n < 4'd14 ;
  assign cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81 =
	     cc_fixFxError_x_ - cc_fixFxError_y_ ;
  assign cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168 =
	     cc_fixFxError_x_ + cc_fixFxError_y_ ;
  assign cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207 =
	     cc_fixFxError_y_ - cc_fixFxError_x_ ;
  assign cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120 =
	     cc_fixFxError_y_ + cc_fixFxError_x_ ;
  assign cc_fixFxError_z__1_SLE_0___d256 =
	     (cc_fixFxError_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign cc_fixFxError_z__1_SLE_3216___d72 =
	     (cc_fixFxError_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign cc_fixFxError_z__1_SLT_3216___d160 =
	     (cc_fixFxError_z_ ^ 24'h800000) < 24'd8391824 ;
  assign cc_phase_49_SLE_6433___d350 =
	     (cc_phase ^ 24'h800000) <= 24'd8395041 ;
  assign cc_phase_49_SLT_16770783___d351 =
	     (cc_phase ^ 24'h800000) < 24'd8382175 ;
  assign n_82_ULT_106___d683 = n < 10'd106 ;
  assign x__h120133 =
	     cc_fixFxError_x_[23] ? -cc_fixFxError_x_ : cc_fixFxError_x_ ;
  assign x__h123166 =
	     cc_fixFxError_y_[23] ? -cc_fixFxError_y_ : cc_fixFxError_y_ ;
  assign x__h125982 =
	     (!x__h126311[47] &&
	      IF_cc_sample_17_BIT_47_69_AND_NOT_cc_sample_17_ETC___d494[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_sample_17_BIT_47_69_AND_NOT_cc_sample_17_ETC___d494 ;
  assign x__h126311 =
	     (cc_sample[47] && !cc_sample[23] ||
	      cc_sample[23] && !cc_sample[47]) ?
	       -IF_cc_sample_17_BIT_47_69_THEN_NEG_cc_sample_1_ETC___d480 :
	       IF_cc_sample_17_BIT_47_69_THEN_NEG_cc_sample_1_ETC___d480 ;
  assign x__h126356 = cc_sample[47] ? -cc_sample[47:24] : cc_sample[47:24] ;
  assign x__h126375 = cc_sample[23] ? -cc_sample[23:0] : cc_sample[23:0] ;
  assign x__h132205 = cc_phase + cc_freq ;
  assign x__h132970 = cc_error[23] ? -cc_error : cc_error ;
  assign x__h54419 =
	     cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81[23] ?
	       -cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81 :
	       cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0___d81 ;
  assign x__h56783 =
	     (!x__h57112[47] &&
	      IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d138 ;
  assign x__h57112 =
	     cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120[23] ?
	       -IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d124 :
	       IF_cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9__ETC___d124 ;
  assign x__h57167 =
	     cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120[23] ?
	       -cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120 :
	       cc_fixFxError_y__0_PLUS_cc_fixFxError_x__9___d120 ;
  assign x__h59967 =
	     (!x__h60296[47] &&
	      IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d186 ;
  assign x__h60296 =
	     cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168[23] ?
	       -IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d172 :
	       IF_cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0__ETC___d172 ;
  assign x__h60351 =
	     cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168[23] ?
	       -cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168 :
	       cc_fixFxError_x__9_PLUS_cc_fixFxError_y__0___d168 ;
  assign x__h62712 =
	     (!x__h63041[47] &&
	      IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d225 ;
  assign x__h63041 =
	     cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207[23] ?
	       -IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d211 :
	       IF_cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9_ETC___d211 ;
  assign x__h63096 =
	     cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207[23] ?
	       -cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207 :
	       cc_fixFxError_y__0_MINUS_cc_fixFxError_x__9___d207 ;
  assign x__h66166 = cc_fixFxError_x_ - x__h67243 ;
  assign x__h66266 = cc_fixFxError_y_ + x__h67314 ;
  assign x__h66337 =
	     cc_fixFxError_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h67228 = cc_fixFxError_x_ + x__h67243 ;
  assign x__h67243 =
	     cc_fixFxError_y_ >> cc_fixFxError_n |
	     ~(24'hFFFFFF >> cc_fixFxError_n) & {24{cc_fixFxError_y_[23]}} ;
  assign x__h67299 = cc_fixFxError_y_ - x__h67314 ;
  assign x__h67314 =
	     cc_fixFxError_x_ >> cc_fixFxError_n |
	     ~(24'hFFFFFF >> cc_fixFxError_n) & {24{cc_fixFxError_x_[23]}} ;
  assign x__h67370 =
	     cc_fixFxError_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x_f__h128603 = cc_error[11:0] & cc_limitError_inner_reg ;
  assign x_f__h131906 = cc_freq[11:0] & cc_limitFreqs_inner_reg ;
  assign x_f__h135244 = cc_phase[11:0] & cc_limitPhase_inner_reg ;
  assign x_f__h67876 =
	     cc_fixFxError_x_[11:0] & cc_fixFxError_limitX_inner_reg ;
  assign x_f__h67914 =
	     cc_fixFxError_y_[11:0] & cc_fixFxError_limitY_inner_reg ;
  assign x_f__h67928 =
	     cc_fixFxError_z_[11:0] & cc_fixFxError_limitZ_inner_reg ;
  assign y_f__h120975 =
	     (IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384[11] &&
	      (IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384[47] ||
	       IF_cc_fixFxError_x__9_BIT_23_79_THEN_NEG_IF_cc_ETC___d384[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h124008 =
	     (IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429[11] &&
	      (IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429[47] ||
	       IF_cc_fixFxError_y__0_BIT_23_24_THEN_NEG_IF_cc_ETC___d429[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h127204 =
	     (x__h126311[11] &&
	      (x__h126311[47] || x__h126311[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h130490 =
	     (IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531[11] &&
	      (IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531[47] ||
	       IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d531[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h133812 =
	     (IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577[11] &&
	      (IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577[47] ||
	       IF_cc_error_17_BIT_23_26_THEN_NEG_IF_cc_error__ETC___d577[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h55264 =
	     (IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87[11] &&
	      (IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87[47] ||
	       IF_cc_fixFxError_x__9_MINUS_cc_fixFxError_y__0_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h58009 =
	     (x__h57112[11] && (x__h57112[47] || x__h57112[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h61193 =
	     (x__h60296[11] && (x__h60296[47] || x__h60296[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h63938 =
	     (x__h63041[11] && (x__h63041[47] || x__h63041[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(cc_fixFxError_n)
  begin
    case (cc_fixFxError_n)
      4'd0: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd3216;
      4'd1: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd1899;
      4'd2: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd1003;
      4'd3: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd509;
      4'd4: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd255;
      4'd5: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd127;
      4'd6: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd63;
      4'd7: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd31;
      4'd8: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd15;
      4'd9: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd7;
      4'd10: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd3;
      4'd11: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 = 12'd0;
      default: CASE_cc_fixFxError_n_0_3216_1_1899_2_1003_3_50_ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cc_costasL <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_costasL_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_costasL_2_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cc_costasL_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_costasL_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cc_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_error <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_fixFxError_atanCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_fixFxError_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_fixFxError_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cc_fixFxError_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	cc_fixFxError_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	cc_fixFxError_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_fixFxError_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_fixFxError_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_fixFxError_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	cc_fixFxError_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_fixFxError_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_fixFxError_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_freq <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_limitFreqs_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_limitPhase_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	cc_phase <= `BSV_ASSIGNMENT_DELAY 24'd0;
	cc_sample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (cc_costasL$EN)
	  cc_costasL <= `BSV_ASSIGNMENT_DELAY cc_costasL$D_IN;
	if (cc_costasL_1_1$EN)
	  cc_costasL_1_1 <= `BSV_ASSIGNMENT_DELAY cc_costasL_1_1$D_IN;
	if (cc_costasL_2_1$EN)
	  cc_costasL_2_1 <= `BSV_ASSIGNMENT_DELAY cc_costasL_2_1$D_IN;
	if (cc_costasL_3_1$EN)
	  cc_costasL_3_1 <= `BSV_ASSIGNMENT_DELAY cc_costasL_3_1$D_IN;
	if (cc_costasL_4$EN)
	  cc_costasL_4 <= `BSV_ASSIGNMENT_DELAY cc_costasL_4$D_IN;
	if (cc_dummy$EN) cc_dummy <= `BSV_ASSIGNMENT_DELAY cc_dummy$D_IN;
	if (cc_error$EN) cc_error <= `BSV_ASSIGNMENT_DELAY cc_error$D_IN;
	if (cc_fixFxError_atanCalc$EN)
	  cc_fixFxError_atanCalc <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_atanCalc$D_IN;
	if (cc_fixFxError_atanCalc_1_1$EN)
	  cc_fixFxError_atanCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_atanCalc_1_1$D_IN;
	if (cc_fixFxError_atanCalc_2_1$EN)
	  cc_fixFxError_atanCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_atanCalc_2_1$D_IN;
	if (cc_fixFxError_atanCalc_3_1$EN)
	  cc_fixFxError_atanCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_atanCalc_3_1$D_IN;
	if (cc_fixFxError_atanCalc_4$EN)
	  cc_fixFxError_atanCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_atanCalc_4$D_IN;
	if (cc_fixFxError_limitX_inner_reg$EN)
	  cc_fixFxError_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_limitX_inner_reg$D_IN;
	if (cc_fixFxError_limitY_inner_reg$EN)
	  cc_fixFxError_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_limitY_inner_reg$D_IN;
	if (cc_fixFxError_limitZ_inner_reg$EN)
	  cc_fixFxError_limitZ_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_fixFxError_limitZ_inner_reg$D_IN;
	if (cc_fixFxError_n$EN)
	  cc_fixFxError_n <= `BSV_ASSIGNMENT_DELAY cc_fixFxError_n$D_IN;
	if (cc_fixFxError_x_$EN)
	  cc_fixFxError_x_ <= `BSV_ASSIGNMENT_DELAY cc_fixFxError_x_$D_IN;
	if (cc_fixFxError_y_$EN)
	  cc_fixFxError_y_ <= `BSV_ASSIGNMENT_DELAY cc_fixFxError_y_$D_IN;
	if (cc_fixFxError_z_$EN)
	  cc_fixFxError_z_ <= `BSV_ASSIGNMENT_DELAY cc_fixFxError_z_$D_IN;
	if (cc_freq$EN) cc_freq <= `BSV_ASSIGNMENT_DELAY cc_freq$D_IN;
	if (cc_limitError_inner_reg$EN)
	  cc_limitError_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_limitError_inner_reg$D_IN;
	if (cc_limitFreqs_inner_reg$EN)
	  cc_limitFreqs_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_limitFreqs_inner_reg$D_IN;
	if (cc_limitPhase_inner_reg$EN)
	  cc_limitPhase_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      cc_limitPhase_inner_reg$D_IN;
	if (cc_phase$EN) cc_phase <= `BSV_ASSIGNMENT_DELAY cc_phase$D_IN;
	if (cc_sample$EN) cc_sample <= `BSV_ASSIGNMENT_DELAY cc_sample$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cc_costasL = 1'h0;
    cc_costasL_1_1 = 1'h0;
    cc_costasL_2_1 = 4'hA;
    cc_costasL_3_1 = 1'h0;
    cc_costasL_4 = 1'h0;
    cc_dummy = 1'h0;
    cc_error = 24'hAAAAAA;
    cc_fixFxError_atanCalc = 1'h0;
    cc_fixFxError_atanCalc_1_1 = 1'h0;
    cc_fixFxError_atanCalc_2_1 = 4'hA;
    cc_fixFxError_atanCalc_3_1 = 1'h0;
    cc_fixFxError_atanCalc_4 = 1'h0;
    cc_fixFxError_limitX_inner_reg = 12'hAAA;
    cc_fixFxError_limitY_inner_reg = 12'hAAA;
    cc_fixFxError_limitZ_inner_reg = 12'hAAA;
    cc_fixFxError_n = 4'hA;
    cc_fixFxError_x_ = 24'hAAAAAA;
    cc_fixFxError_y_ = 24'hAAAAAA;
    cc_fixFxError_z_ = 24'hAAAAAA;
    cc_freq = 24'hAAAAAA;
    cc_limitError_inner_reg = 12'hAAA;
    cc_limitFreqs_inner_reg = 12'hAAA;
    cc_limitPhase_inner_reg = 12'hAAA;
    cc_phase = 24'hAAAAAA;
    cc_sample = 48'hAAAAAAAAAAAA;
    fV = 24'hAAAAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd4 &&
	  (WILL_FIRE_RL_action_l33c15 || WILL_FIRE_RL_action_l35c13 ||
	   state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 32, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l32c9] and\n  [RL_action_l33c15, RL_action_l35c13, RL_action_f_update_l32c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l33c15 &&
	  (WILL_FIRE_RL_action_l35c13 || state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 33, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c15] and\n  [RL_action_l35c13, RL_action_f_update_l32c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l35c13 && state_mkFSMstate == 4'd7)
	$display("Error: \"Tb_tang.bsv\", line 35, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l35c13] and\n  [RL_action_f_update_l32c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__50_AND_abort_wget__51_52_OR_state__ETC___d732 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 &&
	  (cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 74, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l74c13] and\n  [RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_fixFxError_atanCalc_2_1 == 4'd10 &&
	  cc_fixFxError_atanCalc_2_1 == 4'd11)
	$display("Error: \"../Cordic/Cordic.bsv\", line 86, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l86c13] and\n  [RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 55, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l55c11] and\n  [RL_cc_fixFxError_atanCalc_action_l56c12,\n  RL_cc_fixFxError_atanCalc_action_l57c11,\n  RL_cc_fixFxError_atanCalc_action_l58c12,\n  RL_cc_fixFxError_atanCalc_action_l59c11,\n  RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 56, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l56c12] and\n  [RL_cc_fixFxError_atanCalc_action_l57c11,\n  RL_cc_fixFxError_atanCalc_action_l58c12,\n  RL_cc_fixFxError_atanCalc_action_l59c11,\n  RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 57, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l57c11] and\n  [RL_cc_fixFxError_atanCalc_action_l58c12,\n  RL_cc_fixFxError_atanCalc_action_l59c11,\n  RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 58, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l58c12] and\n  [RL_cc_fixFxError_atanCalc_action_l59c11,\n  RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 59, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l59c11] and\n  [RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 61, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l61c32] and\n  [RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 67, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l67c32] and\n  [RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 73, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_f_init_l73c9] and\n  [RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l54c12 &&
	  (WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l55c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l56c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l57c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l58c12 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l59c11 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l61c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l67c32 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_f_init_l73c9 ||
	   WILL_FIRE_RL_cc_fixFxError_atanCalc_action_l74c13 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd10 ||
	   cc_fixFxError_atanCalc_2_1 == 4'd11))
	$display("Error: \"../Cordic/Cordic.bsv\", line 54, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_cc_fixFxError_atanCalc_action_l54c12] and\n  [RL_cc_fixFxError_atanCalc_action_l55c11,\n  RL_cc_fixFxError_atanCalc_action_l56c12,\n  RL_cc_fixFxError_atanCalc_action_l57c11,\n  RL_cc_fixFxError_atanCalc_action_l58c12,\n  RL_cc_fixFxError_atanCalc_action_l59c11,\n  RL_cc_fixFxError_atanCalc_action_l61c32,\n  RL_cc_fixFxError_atanCalc_action_l67c32,\n  RL_cc_fixFxError_atanCalc_action_f_init_l73c9,\n  RL_cc_fixFxError_atanCalc_action_l74c13,\n  RL_cc_fixFxError_atanCalc_action_l86c13,\n  RL_cc_fixFxError_atanCalc_action_f_update_l73c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd2 &&
	  (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_action_l33c15 ||
	   WILL_FIRE_RL_action_l35c13 ||
	   state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 30, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l30c19] and\n  [RL_action_l31c19, RL_action_f_init_l32c9, RL_action_l33c15,\n  RL_action_l35c13, RL_action_f_update_l32c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd3 &&
	  (state_mkFSMstate == 4'd4 || WILL_FIRE_RL_action_l33c15 ||
	   WILL_FIRE_RL_action_l35c13 ||
	   state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 31, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l31c19] and\n  [RL_action_f_init_l32c9, RL_action_l33c15, RL_action_l35c13,\n  RL_action_f_update_l32c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2 ||
	   state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_action_l33c15 ||
	   WILL_FIRE_RL_action_l35c13 ||
	   state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_l29c19, RL_action_l30c19, RL_action_l31c19,\n  RL_action_f_init_l32c9, RL_action_l33c15, RL_action_l35c13,\n  RL_action_f_update_l32c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd1 &&
	  (state_mkFSMstate == 4'd2 || state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   WILL_FIRE_RL_action_l33c15 ||
	   WILL_FIRE_RL_action_l35c13 ||
	   state_mkFSMstate == 4'd7))
	$display("Error: \"Tb_tang.bsv\", line 29, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l29c19] and\n  [RL_action_l30c19, RL_action_l31c19, RL_action_f_init_l32c9,\n  RL_action_l33c15, RL_action_l35c13, RL_action_f_update_l32c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l43c19 &&
	  (WILL_FIRE_RL_cc_costasL_action_l44c17 ||
	   WILL_FIRE_RL_cc_costasL_action_l45c9 ||
	   WILL_FIRE_RL_cc_costasL_action_l49c9 ||
	   WILL_FIRE_RL_cc_costasL_action_l53c18 ||
	   cc_costasL_2_1 == 4'd5 ||
	   cc_costasL_2_1 == 4'd6 ||
	   cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 43, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l43c19] and\n  [RL_cc_costasL_action_l44c17, RL_cc_costasL_action_l45c9,\n  RL_cc_costasL_action_l49c9, RL_cc_costasL_action_l53c18,\n  RL_cc_costasL_action_l54c15, RL_cc_costasL_action_l55c14,\n  RL_cc_costasL_action_l56c14, RL_cc_costasL_action_l57c13,\n  RL_cc_costasL_action_l58c15, RL_cc_costasL_action_l59c14,\n  RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l44c17 &&
	  (WILL_FIRE_RL_cc_costasL_action_l45c9 ||
	   WILL_FIRE_RL_cc_costasL_action_l49c9 ||
	   WILL_FIRE_RL_cc_costasL_action_l53c18 ||
	   cc_costasL_2_1 == 4'd5 ||
	   cc_costasL_2_1 == 4'd6 ||
	   cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 44, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l44c17] and\n  [RL_cc_costasL_action_l45c9, RL_cc_costasL_action_l49c9,\n  RL_cc_costasL_action_l53c18, RL_cc_costasL_action_l54c15,\n  RL_cc_costasL_action_l55c14, RL_cc_costasL_action_l56c14,\n  RL_cc_costasL_action_l57c13, RL_cc_costasL_action_l58c15,\n  RL_cc_costasL_action_l59c14, RL_cc_costasL_action_l63c19,\n  RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l45c9 &&
	  (WILL_FIRE_RL_cc_costasL_action_l49c9 ||
	   WILL_FIRE_RL_cc_costasL_action_l53c18 ||
	   cc_costasL_2_1 == 4'd5 ||
	   cc_costasL_2_1 == 4'd6 ||
	   cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 45, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l45c9] and\n  [RL_cc_costasL_action_l49c9, RL_cc_costasL_action_l53c18,\n  RL_cc_costasL_action_l54c15, RL_cc_costasL_action_l55c14,\n  RL_cc_costasL_action_l56c14, RL_cc_costasL_action_l57c13,\n  RL_cc_costasL_action_l58c15, RL_cc_costasL_action_l59c14,\n  RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l49c9 &&
	  (WILL_FIRE_RL_cc_costasL_action_l53c18 || cc_costasL_2_1 == 4'd5 ||
	   cc_costasL_2_1 == 4'd6 ||
	   cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 49, column 9: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l49c9] and\n  [RL_cc_costasL_action_l53c18, RL_cc_costasL_action_l54c15,\n  RL_cc_costasL_action_l55c14, RL_cc_costasL_action_l56c14,\n  RL_cc_costasL_action_l57c13, RL_cc_costasL_action_l58c15,\n  RL_cc_costasL_action_l59c14, RL_cc_costasL_action_l63c19,\n  RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l53c18 &&
	  (cc_costasL_2_1 == 4'd5 || cc_costasL_2_1 == 4'd6 ||
	   cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 53, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l53c18] and\n  [RL_cc_costasL_action_l54c15, RL_cc_costasL_action_l55c14,\n  RL_cc_costasL_action_l56c14, RL_cc_costasL_action_l57c13,\n  RL_cc_costasL_action_l58c15, RL_cc_costasL_action_l59c14,\n  RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd5 &&
	  (cc_costasL_2_1 == 4'd6 || cc_costasL_2_1 == 4'd7 ||
	   cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 54, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l54c15] and\n  [RL_cc_costasL_action_l55c14, RL_cc_costasL_action_l56c14,\n  RL_cc_costasL_action_l57c13, RL_cc_costasL_action_l58c15,\n  RL_cc_costasL_action_l59c14, RL_cc_costasL_action_l63c19,\n  RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd6 &&
	  (cc_costasL_2_1 == 4'd7 || cc_costasL_2_1 == 4'd8 ||
	   cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 55, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l55c14] and\n  [RL_cc_costasL_action_l56c14, RL_cc_costasL_action_l57c13,\n  RL_cc_costasL_action_l58c15, RL_cc_costasL_action_l59c14,\n  RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd7 &&
	  (cc_costasL_2_1 == 4'd8 || cc_costasL_2_1 == 4'd9 ||
	   cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 56, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l56c14] and\n  [RL_cc_costasL_action_l57c13, RL_cc_costasL_action_l58c15,\n  RL_cc_costasL_action_l59c14, RL_cc_costasL_action_l63c19,\n  RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd8 &&
	  (cc_costasL_2_1 == 4'd9 || cc_costasL_2_1 == 4'd10 ||
	   WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 57, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l57c13] and\n  [RL_cc_costasL_action_l58c15, RL_cc_costasL_action_l59c14,\n  RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd9 &&
	  (cc_costasL_2_1 == 4'd10 || WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 58, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l58c15] and\n  [RL_cc_costasL_action_l59c14, RL_cc_costasL_action_l63c19,\n  RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (cc_costasL_2_1 == 4'd10 &&
	  (WILL_FIRE_RL_cc_costasL_action_l63c19 ||
	   WILL_FIRE_RL_cc_costasL_action_l67c19))
	$display("Error: \"CostasLoop.bsv\", line 59, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l59c14] and\n  [RL_cc_costasL_action_l63c19, RL_cc_costasL_action_l67c19] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_cc_costasL_action_l63c19 &&
	  WILL_FIRE_RL_cc_costasL_action_l67c19)
	$display("Error: \"CostasLoop.bsv\", line 63, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_cc_costasL_action_l63c19] and\n  [RL_cc_costasL_action_l67c19] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

