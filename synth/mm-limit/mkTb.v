//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 13:56:19 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire mmTed_tedErrorCalc_1$whas,
       mmTed_tedErrorCalc_3$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register fV
  reg [23 : 0] fV;
  wire [23 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register mmTed_dummy
  reg mmTed_dummy;
  wire mmTed_dummy$D_IN, mmTed_dummy$EN;

  // register mmTed_iIn
  reg [11 : 0] mmTed_iIn;
  wire [11 : 0] mmTed_iIn$D_IN;
  wire mmTed_iIn$EN;

  // register mmTed_iOut
  reg [11 : 0] mmTed_iOut;
  wire [11 : 0] mmTed_iOut$D_IN;
  wire mmTed_iOut$EN;

  // register mmTed_limitMM_inner_reg
  reg [11 : 0] mmTed_limitMM_inner_reg;
  wire [11 : 0] mmTed_limitMM_inner_reg$D_IN;
  wire mmTed_limitMM_inner_reg$EN;

  // register mmTed_limitMu_inner_reg
  reg [11 : 0] mmTed_limitMu_inner_reg;
  wire [11 : 0] mmTed_limitMu_inner_reg$D_IN;
  wire mmTed_limitMu_inner_reg$EN;

  // register mmTed_limitOut_inner_reg
  reg [11 : 0] mmTed_limitOut_inner_reg;
  wire [11 : 0] mmTed_limitOut_inner_reg$D_IN;
  wire mmTed_limitOut_inner_reg$EN;

  // register mmTed_limitX_inner_reg
  reg [11 : 0] mmTed_limitX_inner_reg;
  wire [11 : 0] mmTed_limitX_inner_reg$D_IN;
  wire mmTed_limitX_inner_reg$EN;

  // register mmTed_limitY_inner_reg
  reg [11 : 0] mmTed_limitY_inner_reg;
  wire [11 : 0] mmTed_limitY_inner_reg$D_IN;
  wire mmTed_limitY_inner_reg$EN;

  // register mmTed_mmVal
  reg [23 : 0] mmTed_mmVal;
  wire [23 : 0] mmTed_mmVal$D_IN;
  wire mmTed_mmVal$EN;

  // register mmTed_mu
  reg [23 : 0] mmTed_mu;
  reg [23 : 0] mmTed_mu$D_IN;
  wire mmTed_mu$EN;

  // register mmTed_n
  reg [11 : 0] mmTed_n;
  reg [11 : 0] mmTed_n$D_IN;
  wire mmTed_n$EN;

  // register mmTed_out
  reg [47 : 0] mmTed_out;
  wire [47 : 0] mmTed_out$D_IN;
  wire mmTed_out$EN;

  // register mmTed_outRail
  reg [47 : 0] mmTed_outRail;
  wire [47 : 0] mmTed_outRail$D_IN;
  wire mmTed_outRail$EN;

  // register mmTed_outRail_1
  reg [47 : 0] mmTed_outRail_1;
  wire [47 : 0] mmTed_outRail_1$D_IN;
  wire mmTed_outRail_1$EN;

  // register mmTed_outRail_10
  reg [47 : 0] mmTed_outRail_10;
  wire [47 : 0] mmTed_outRail_10$D_IN;
  wire mmTed_outRail_10$EN;

  // register mmTed_outRail_11
  reg [47 : 0] mmTed_outRail_11;
  wire [47 : 0] mmTed_outRail_11$D_IN;
  wire mmTed_outRail_11$EN;

  // register mmTed_outRail_12
  reg [47 : 0] mmTed_outRail_12;
  wire [47 : 0] mmTed_outRail_12$D_IN;
  wire mmTed_outRail_12$EN;

  // register mmTed_outRail_13
  reg [47 : 0] mmTed_outRail_13;
  wire [47 : 0] mmTed_outRail_13$D_IN;
  wire mmTed_outRail_13$EN;

  // register mmTed_outRail_14
  reg [47 : 0] mmTed_outRail_14;
  wire [47 : 0] mmTed_outRail_14$D_IN;
  wire mmTed_outRail_14$EN;

  // register mmTed_outRail_15
  reg [47 : 0] mmTed_outRail_15;
  wire [47 : 0] mmTed_outRail_15$D_IN;
  wire mmTed_outRail_15$EN;

  // register mmTed_outRail_16
  reg [47 : 0] mmTed_outRail_16;
  wire [47 : 0] mmTed_outRail_16$D_IN;
  wire mmTed_outRail_16$EN;

  // register mmTed_outRail_17
  reg [47 : 0] mmTed_outRail_17;
  wire [47 : 0] mmTed_outRail_17$D_IN;
  wire mmTed_outRail_17$EN;

  // register mmTed_outRail_18
  reg [47 : 0] mmTed_outRail_18;
  wire [47 : 0] mmTed_outRail_18$D_IN;
  wire mmTed_outRail_18$EN;

  // register mmTed_outRail_19
  reg [47 : 0] mmTed_outRail_19;
  wire [47 : 0] mmTed_outRail_19$D_IN;
  wire mmTed_outRail_19$EN;

  // register mmTed_outRail_2
  reg [47 : 0] mmTed_outRail_2;
  wire [47 : 0] mmTed_outRail_2$D_IN;
  wire mmTed_outRail_2$EN;

  // register mmTed_outRail_20
  reg [47 : 0] mmTed_outRail_20;
  wire [47 : 0] mmTed_outRail_20$D_IN;
  wire mmTed_outRail_20$EN;

  // register mmTed_outRail_21
  reg [47 : 0] mmTed_outRail_21;
  wire [47 : 0] mmTed_outRail_21$D_IN;
  wire mmTed_outRail_21$EN;

  // register mmTed_outRail_22
  reg [47 : 0] mmTed_outRail_22;
  wire [47 : 0] mmTed_outRail_22$D_IN;
  wire mmTed_outRail_22$EN;

  // register mmTed_outRail_23
  reg [47 : 0] mmTed_outRail_23;
  wire [47 : 0] mmTed_outRail_23$D_IN;
  wire mmTed_outRail_23$EN;

  // register mmTed_outRail_24
  reg [47 : 0] mmTed_outRail_24;
  wire [47 : 0] mmTed_outRail_24$D_IN;
  wire mmTed_outRail_24$EN;

  // register mmTed_outRail_3
  reg [47 : 0] mmTed_outRail_3;
  wire [47 : 0] mmTed_outRail_3$D_IN;
  wire mmTed_outRail_3$EN;

  // register mmTed_outRail_4
  reg [47 : 0] mmTed_outRail_4;
  wire [47 : 0] mmTed_outRail_4$D_IN;
  wire mmTed_outRail_4$EN;

  // register mmTed_outRail_5
  reg [47 : 0] mmTed_outRail_5;
  wire [47 : 0] mmTed_outRail_5$D_IN;
  wire mmTed_outRail_5$EN;

  // register mmTed_outRail_6
  reg [47 : 0] mmTed_outRail_6;
  wire [47 : 0] mmTed_outRail_6$D_IN;
  wire mmTed_outRail_6$EN;

  // register mmTed_outRail_7
  reg [47 : 0] mmTed_outRail_7;
  wire [47 : 0] mmTed_outRail_7$D_IN;
  wire mmTed_outRail_7$EN;

  // register mmTed_outRail_8
  reg [47 : 0] mmTed_outRail_8;
  wire [47 : 0] mmTed_outRail_8$D_IN;
  wire mmTed_outRail_8$EN;

  // register mmTed_outRail_9
  reg [47 : 0] mmTed_outRail_9;
  wire [47 : 0] mmTed_outRail_9$D_IN;
  wire mmTed_outRail_9$EN;

  // register mmTed_out_1
  reg [47 : 0] mmTed_out_1;
  wire [47 : 0] mmTed_out_1$D_IN;
  wire mmTed_out_1$EN;

  // register mmTed_out_10
  reg [47 : 0] mmTed_out_10;
  wire [47 : 0] mmTed_out_10$D_IN;
  wire mmTed_out_10$EN;

  // register mmTed_out_11
  reg [47 : 0] mmTed_out_11;
  wire [47 : 0] mmTed_out_11$D_IN;
  wire mmTed_out_11$EN;

  // register mmTed_out_12
  reg [47 : 0] mmTed_out_12;
  wire [47 : 0] mmTed_out_12$D_IN;
  wire mmTed_out_12$EN;

  // register mmTed_out_13
  reg [47 : 0] mmTed_out_13;
  wire [47 : 0] mmTed_out_13$D_IN;
  wire mmTed_out_13$EN;

  // register mmTed_out_14
  reg [47 : 0] mmTed_out_14;
  wire [47 : 0] mmTed_out_14$D_IN;
  wire mmTed_out_14$EN;

  // register mmTed_out_15
  reg [47 : 0] mmTed_out_15;
  wire [47 : 0] mmTed_out_15$D_IN;
  wire mmTed_out_15$EN;

  // register mmTed_out_16
  reg [47 : 0] mmTed_out_16;
  wire [47 : 0] mmTed_out_16$D_IN;
  wire mmTed_out_16$EN;

  // register mmTed_out_17
  reg [47 : 0] mmTed_out_17;
  wire [47 : 0] mmTed_out_17$D_IN;
  wire mmTed_out_17$EN;

  // register mmTed_out_18
  reg [47 : 0] mmTed_out_18;
  wire [47 : 0] mmTed_out_18$D_IN;
  wire mmTed_out_18$EN;

  // register mmTed_out_19
  reg [47 : 0] mmTed_out_19;
  wire [47 : 0] mmTed_out_19$D_IN;
  wire mmTed_out_19$EN;

  // register mmTed_out_2
  reg [47 : 0] mmTed_out_2;
  wire [47 : 0] mmTed_out_2$D_IN;
  wire mmTed_out_2$EN;

  // register mmTed_out_20
  reg [47 : 0] mmTed_out_20;
  wire [47 : 0] mmTed_out_20$D_IN;
  wire mmTed_out_20$EN;

  // register mmTed_out_21
  reg [47 : 0] mmTed_out_21;
  wire [47 : 0] mmTed_out_21$D_IN;
  wire mmTed_out_21$EN;

  // register mmTed_out_22
  reg [47 : 0] mmTed_out_22;
  wire [47 : 0] mmTed_out_22$D_IN;
  wire mmTed_out_22$EN;

  // register mmTed_out_23
  reg [47 : 0] mmTed_out_23;
  wire [47 : 0] mmTed_out_23$D_IN;
  wire mmTed_out_23$EN;

  // register mmTed_out_24
  reg [47 : 0] mmTed_out_24;
  wire [47 : 0] mmTed_out_24$D_IN;
  wire mmTed_out_24$EN;

  // register mmTed_out_3
  reg [47 : 0] mmTed_out_3;
  wire [47 : 0] mmTed_out_3$D_IN;
  wire mmTed_out_3$EN;

  // register mmTed_out_4
  reg [47 : 0] mmTed_out_4;
  wire [47 : 0] mmTed_out_4$D_IN;
  wire mmTed_out_4$EN;

  // register mmTed_out_5
  reg [47 : 0] mmTed_out_5;
  wire [47 : 0] mmTed_out_5$D_IN;
  wire mmTed_out_5$EN;

  // register mmTed_out_6
  reg [47 : 0] mmTed_out_6;
  wire [47 : 0] mmTed_out_6$D_IN;
  wire mmTed_out_6$EN;

  // register mmTed_out_7
  reg [47 : 0] mmTed_out_7;
  wire [47 : 0] mmTed_out_7$D_IN;
  wire mmTed_out_7$EN;

  // register mmTed_out_8
  reg [47 : 0] mmTed_out_8;
  wire [47 : 0] mmTed_out_8$D_IN;
  wire mmTed_out_8$EN;

  // register mmTed_out_9
  reg [47 : 0] mmTed_out_9;
  wire [47 : 0] mmTed_out_9$D_IN;
  wire mmTed_out_9$EN;

  // register mmTed_samples
  reg [47 : 0] mmTed_samples;
  reg [47 : 0] mmTed_samples$D_IN;
  wire mmTed_samples$EN;

  // register mmTed_samples_1
  reg [47 : 0] mmTed_samples_1;
  reg [47 : 0] mmTed_samples_1$D_IN;
  wire mmTed_samples_1$EN;

  // register mmTed_samples_10
  reg [47 : 0] mmTed_samples_10;
  reg [47 : 0] mmTed_samples_10$D_IN;
  wire mmTed_samples_10$EN;

  // register mmTed_samples_11
  reg [47 : 0] mmTed_samples_11;
  reg [47 : 0] mmTed_samples_11$D_IN;
  wire mmTed_samples_11$EN;

  // register mmTed_samples_12
  reg [47 : 0] mmTed_samples_12;
  reg [47 : 0] mmTed_samples_12$D_IN;
  wire mmTed_samples_12$EN;

  // register mmTed_samples_13
  reg [47 : 0] mmTed_samples_13;
  reg [47 : 0] mmTed_samples_13$D_IN;
  wire mmTed_samples_13$EN;

  // register mmTed_samples_14
  reg [47 : 0] mmTed_samples_14;
  reg [47 : 0] mmTed_samples_14$D_IN;
  wire mmTed_samples_14$EN;

  // register mmTed_samples_15
  reg [47 : 0] mmTed_samples_15;
  reg [47 : 0] mmTed_samples_15$D_IN;
  wire mmTed_samples_15$EN;

  // register mmTed_samples_16
  reg [47 : 0] mmTed_samples_16;
  reg [47 : 0] mmTed_samples_16$D_IN;
  wire mmTed_samples_16$EN;

  // register mmTed_samples_17
  reg [47 : 0] mmTed_samples_17;
  reg [47 : 0] mmTed_samples_17$D_IN;
  wire mmTed_samples_17$EN;

  // register mmTed_samples_18
  reg [47 : 0] mmTed_samples_18;
  reg [47 : 0] mmTed_samples_18$D_IN;
  wire mmTed_samples_18$EN;

  // register mmTed_samples_19
  reg [47 : 0] mmTed_samples_19;
  reg [47 : 0] mmTed_samples_19$D_IN;
  wire mmTed_samples_19$EN;

  // register mmTed_samples_2
  reg [47 : 0] mmTed_samples_2;
  reg [47 : 0] mmTed_samples_2$D_IN;
  wire mmTed_samples_2$EN;

  // register mmTed_samples_20
  reg [47 : 0] mmTed_samples_20;
  reg [47 : 0] mmTed_samples_20$D_IN;
  wire mmTed_samples_20$EN;

  // register mmTed_samples_21
  reg [47 : 0] mmTed_samples_21;
  reg [47 : 0] mmTed_samples_21$D_IN;
  wire mmTed_samples_21$EN;

  // register mmTed_samples_22
  reg [47 : 0] mmTed_samples_22;
  reg [47 : 0] mmTed_samples_22$D_IN;
  wire mmTed_samples_22$EN;

  // register mmTed_samples_23
  reg [47 : 0] mmTed_samples_23;
  reg [47 : 0] mmTed_samples_23$D_IN;
  wire mmTed_samples_23$EN;

  // register mmTed_samples_24
  reg [47 : 0] mmTed_samples_24;
  reg [47 : 0] mmTed_samples_24$D_IN;
  wire mmTed_samples_24$EN;

  // register mmTed_samples_3
  reg [47 : 0] mmTed_samples_3;
  reg [47 : 0] mmTed_samples_3$D_IN;
  wire mmTed_samples_3$EN;

  // register mmTed_samples_4
  reg [47 : 0] mmTed_samples_4;
  reg [47 : 0] mmTed_samples_4$D_IN;
  wire mmTed_samples_4$EN;

  // register mmTed_samples_5
  reg [47 : 0] mmTed_samples_5;
  reg [47 : 0] mmTed_samples_5$D_IN;
  wire mmTed_samples_5$EN;

  // register mmTed_samples_6
  reg [47 : 0] mmTed_samples_6;
  reg [47 : 0] mmTed_samples_6$D_IN;
  wire mmTed_samples_6$EN;

  // register mmTed_samples_7
  reg [47 : 0] mmTed_samples_7;
  reg [47 : 0] mmTed_samples_7$D_IN;
  wire mmTed_samples_7$EN;

  // register mmTed_samples_8
  reg [47 : 0] mmTed_samples_8;
  reg [47 : 0] mmTed_samples_8$D_IN;
  wire mmTed_samples_8$EN;

  // register mmTed_samples_9
  reg [47 : 0] mmTed_samples_9;
  reg [47 : 0] mmTed_samples_9$D_IN;
  wire mmTed_samples_9$EN;

  // register mmTed_tedErrorCalc
  reg mmTed_tedErrorCalc;
  wire mmTed_tedErrorCalc$D_IN, mmTed_tedErrorCalc$EN;

  // register mmTed_tedErrorCalc_1_1
  reg mmTed_tedErrorCalc_1_1;
  wire mmTed_tedErrorCalc_1_1$D_IN, mmTed_tedErrorCalc_1_1$EN;

  // register mmTed_tedErrorCalc_2_1
  reg [4 : 0] mmTed_tedErrorCalc_2_1;
  reg [4 : 0] mmTed_tedErrorCalc_2_1$D_IN;
  wire mmTed_tedErrorCalc_2_1$EN;

  // register mmTed_tedErrorCalc_3_1
  reg mmTed_tedErrorCalc_3_1;
  wire mmTed_tedErrorCalc_3_1$D_IN, mmTed_tedErrorCalc_3_1$EN;

  // register mmTed_tedErrorCalc_4
  reg mmTed_tedErrorCalc_4;
  wire mmTed_tedErrorCalc_4$D_IN, mmTed_tedErrorCalc_4$EN;

  // register mmTed_x
  reg [47 : 0] mmTed_x;
  reg [47 : 0] mmTed_x$D_IN;
  wire mmTed_x$EN;

  // register mmTed_y
  reg [47 : 0] mmTed_y;
  reg [47 : 0] mmTed_y$D_IN;
  wire mmTed_y$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [3 : 0] state_mkFSMstate;
  reg [3 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule mmTed_newSample
  wire [47 : 0] mmTed_newSample$D_IN, mmTed_newSample$D_OUT;
  wire mmTed_newSample$CLR,
       mmTed_newSample$DEQ,
       mmTed_newSample$EMPTY_N,
       mmTed_newSample$ENQ,
       mmTed_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l37c18,
       WILL_FIRE_RL_action_l39c13,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44,
       WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_mmTed_samples$write_1__VAL_2,
		MUX_mmTed_samples$write_1__VAL_3,
		MUX_mmTed_x$write_1__VAL_1,
		MUX_mmTed_x$write_1__VAL_2,
		MUX_mmTed_x$write_1__VAL_3,
		MUX_mmTed_y$write_1__VAL_1,
		MUX_mmTed_y$write_1__VAL_2,
		MUX_mmTed_y$write_1__VAL_3;
  wire [23 : 0] MUX_mmTed_mmVal$write_1__VAL_1,
		MUX_mmTed_mmVal$write_1__VAL_2,
		MUX_mmTed_mu$write_1__VAL_1,
		MUX_mmTed_mu$write_1__VAL_2,
		MUX_mmTed_mu$write_1__VAL_3;
  wire [11 : 0] MUX_mmTed_n$write_1__VAL_1;
  wire [9 : 0] MUX_n$write_1__VAL_1;
  wire MUX_mmTed_n$write_1__SEL_1,
       MUX_mmTed_samples$write_1__SEL_1,
       MUX_mmTed_samples$write_1__SEL_2,
       MUX_mmTed_samples$write_1__SEL_3,
       MUX_mmTed_samples_1$write_1__SEL_1,
       MUX_mmTed_samples_1$write_1__SEL_2,
       MUX_mmTed_samples_1$write_1__SEL_3,
       MUX_mmTed_samples_10$write_1__SEL_1,
       MUX_mmTed_samples_10$write_1__SEL_2,
       MUX_mmTed_samples_10$write_1__SEL_3,
       MUX_mmTed_samples_11$write_1__SEL_1,
       MUX_mmTed_samples_11$write_1__SEL_2,
       MUX_mmTed_samples_11$write_1__SEL_3,
       MUX_mmTed_samples_12$write_1__SEL_1,
       MUX_mmTed_samples_12$write_1__SEL_2,
       MUX_mmTed_samples_12$write_1__SEL_3,
       MUX_mmTed_samples_13$write_1__SEL_1,
       MUX_mmTed_samples_13$write_1__SEL_2,
       MUX_mmTed_samples_13$write_1__SEL_3,
       MUX_mmTed_samples_14$write_1__SEL_1,
       MUX_mmTed_samples_14$write_1__SEL_2,
       MUX_mmTed_samples_14$write_1__SEL_3,
       MUX_mmTed_samples_15$write_1__SEL_1,
       MUX_mmTed_samples_15$write_1__SEL_2,
       MUX_mmTed_samples_15$write_1__SEL_3,
       MUX_mmTed_samples_16$write_1__SEL_1,
       MUX_mmTed_samples_16$write_1__SEL_2,
       MUX_mmTed_samples_16$write_1__SEL_3,
       MUX_mmTed_samples_17$write_1__SEL_1,
       MUX_mmTed_samples_17$write_1__SEL_2,
       MUX_mmTed_samples_17$write_1__SEL_3,
       MUX_mmTed_samples_18$write_1__SEL_1,
       MUX_mmTed_samples_18$write_1__SEL_2,
       MUX_mmTed_samples_18$write_1__SEL_3,
       MUX_mmTed_samples_19$write_1__SEL_1,
       MUX_mmTed_samples_19$write_1__SEL_2,
       MUX_mmTed_samples_19$write_1__SEL_3,
       MUX_mmTed_samples_2$write_1__SEL_1,
       MUX_mmTed_samples_2$write_1__SEL_2,
       MUX_mmTed_samples_2$write_1__SEL_3,
       MUX_mmTed_samples_20$write_1__SEL_1,
       MUX_mmTed_samples_20$write_1__SEL_2,
       MUX_mmTed_samples_20$write_1__SEL_3,
       MUX_mmTed_samples_21$write_1__SEL_1,
       MUX_mmTed_samples_21$write_1__SEL_2,
       MUX_mmTed_samples_21$write_1__SEL_3,
       MUX_mmTed_samples_22$write_1__SEL_1,
       MUX_mmTed_samples_22$write_1__SEL_2,
       MUX_mmTed_samples_22$write_1__SEL_3,
       MUX_mmTed_samples_23$write_1__SEL_1,
       MUX_mmTed_samples_23$write_1__SEL_2,
       MUX_mmTed_samples_23$write_1__SEL_3,
       MUX_mmTed_samples_24$write_1__SEL_1,
       MUX_mmTed_samples_24$write_1__SEL_2,
       MUX_mmTed_samples_24$write_1__SEL_3,
       MUX_mmTed_samples_3$write_1__SEL_1,
       MUX_mmTed_samples_3$write_1__SEL_2,
       MUX_mmTed_samples_3$write_1__SEL_3,
       MUX_mmTed_samples_4$write_1__SEL_1,
       MUX_mmTed_samples_4$write_1__SEL_2,
       MUX_mmTed_samples_4$write_1__SEL_3,
       MUX_mmTed_samples_5$write_1__SEL_1,
       MUX_mmTed_samples_5$write_1__SEL_2,
       MUX_mmTed_samples_5$write_1__SEL_3,
       MUX_mmTed_samples_6$write_1__SEL_1,
       MUX_mmTed_samples_6$write_1__SEL_2,
       MUX_mmTed_samples_6$write_1__SEL_3,
       MUX_mmTed_samples_7$write_1__SEL_1,
       MUX_mmTed_samples_7$write_1__SEL_2,
       MUX_mmTed_samples_7$write_1__SEL_3,
       MUX_mmTed_samples_8$write_1__SEL_1,
       MUX_mmTed_samples_8$write_1__SEL_2,
       MUX_mmTed_samples_8$write_1__SEL_3,
       MUX_mmTed_samples_9$write_1__SEL_1,
       MUX_mmTed_samples_9$write_1__SEL_2,
       MUX_mmTed_samples_9$write_1__SEL_3,
       MUX_mmTed_tedErrorCalc_2_1$write_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601,
	       SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687,
	       SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690,
	       SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573,
	       SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686,
	       SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689,
	       SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497,
	       SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501,
	       SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508,
	       SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470,
	       SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500,
	       SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506,
	       SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412,
	       SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934,
	       SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237,
	       SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385,
	       SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933,
	       SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355,
	       SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888,
	       SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171,
	       SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328,
	       SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887,
	       SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223,
	       SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249,
	       SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248,
	       SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167,
	       SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247,
	       SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140,
	       SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246,
	       fpart__h159676,
	       fpart__h160467,
	       x_img_i__h90951;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1256,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1259,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1267,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1276,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1285,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1294,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1190,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1193,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1201,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1210,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1219,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1228,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1196,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1262,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1205,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1271,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1214,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1280,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1223,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1289,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1232,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1298;
  wire [47 : 0] IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d771,
		IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d848,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d651,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d810,
		IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1021,
		IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d944,
		IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d898,
		IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d983,
		IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d513,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d606,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_23_T_ETC___d605,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_47_T_ETC___d512,
		_1228_MUL_IF_mmTed_mmVal_095_BIT_23_105_THEN_NE_ETC___d1108,
		x__h107048,
		x__h108161,
		x__h110968,
		x__h115916,
		x__h116622,
		x__h119327,
		x__h124078,
		x__h126792,
		x__h129915,
		x__h138330,
		x__h146492,
		x__h149206;
  wire [44 : 0] digit__h159907,
		digit__h159974,
		digit__h160063,
		digit__h160152,
		digit__h160241,
		digit__h160330,
		digit__h160692,
		digit__h160759,
		digit__h160848,
		digit__h160937,
		digit__h161026,
		digit__h161115,
		tx59972_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1,
		tx60061_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2,
		tx60150_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3,
		tx60239_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4,
		tx60328_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5,
		tx60757_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6,
		tx60846_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7,
		tx60935_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8,
		tx61024_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9,
		tx61113_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10,
		tx__h159972,
		tx__h160061,
		tx__h160150,
		tx__h160239,
		tx__h160328,
		tx__h160757,
		tx__h160846,
		tx__h160935,
		tx__h161024,
		tx__h161113,
		y__h160120,
		y__h160209,
		y__h160298,
		y__h160387,
		y__h160905,
		y__h160994,
		y__h161083,
		y__h161172;
  wire [35 : 0] IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125,
		IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d619,
		IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d739,
		IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d785,
		IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d862,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d526,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d665,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d706,
		IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d824,
		IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1035,
		IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d958,
		IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d912,
		IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d997,
		IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1122,
		x__h106702,
		x__h107832,
		x__h110639,
		x__h115587,
		x__h116293,
		x__h118998,
		x__h123749,
		x__h126463,
		x__h129586,
		x__h138001,
		x__h146163,
		x__h148877;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640,
		IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760,
		SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692,
		SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503,
		SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936,
		SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890,
		x__h106369,
		x__h113247,
		x__h113267,
		x__h121399,
		x__h121419,
		x__h123419,
		x__h129256,
		x__h135661,
		x__h143813,
		x__h145833,
		x__h154074,
		x__h154863;
  wire [12 : 0] SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238,
		SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172;
  wire [11 : 0] imagA_i__h105967,
		realA_i__h105757,
		x__h107454,
		x__h108189,
		x__h159937,
		x__h160722,
		x_f__h153622,
		x_f__h158123,
		x_img_f__h152023,
		x_img_f__h152812,
		x_img_f__h87808,
		x_rel_f__h151628,
		x_rel_f__h152401,
		x_rel_f__h84225,
		y_avValue_snd__h159871,
		y_avValue_snd__h160656,
		y_f__h109149,
		y_f__h112059,
		y_f__h114097,
		y_f__h117508,
		y_f__h120211,
		y_f__h122249,
		y_f__h124973,
		y_f__h127687,
		y_f__h136511,
		y_f__h144663,
		y_f__h147387,
		y_f__h150101,
		y_f__h155693;
  wire abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405,
       mmTed_iIn_34_PLUS_16_35_ULT_24___d236,
       mmTed_iOut_7_ULT_24___d233,
       mmTed_n_6_ULT_24___d51,
       mmTed_n_6_ULT_mmTed_iOut_7___d38,
       mmTed_tedErrorCalc_2_whas_AND_mmTed_tedErrorCa_ETC___d1314,
       n_354_ULT_10___d1355;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[23:12] ;

  // submodule mmTed_newSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) mmTed_newSample(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(mmTed_newSample$D_IN),
							  .ENQ(mmTed_newSample$ENQ),
							  .DEQ(mmTed_newSample$DEQ),
							  .CLR(mmTed_newSample$CLR),
							  .D_OUT(mmTed_newSample$D_OUT),
							  .FULL_N(mmTed_newSample$FULL_N),
							  .EMPTY_N(mmTed_newSample$EMPTY_N));

  // rule RL_action_l37c18
  assign WILL_FIRE_RL_action_l37c18 =
	     mmTed_newSample$FULL_N && n_354_ULT_10___d1355 &&
	     (state_mkFSMstate == 4'd7 || state_mkFSMstate == 4'd10) ;

  // rule RL_action_l39c13
  assign WILL_FIRE_RL_action_l39c13 =
	     mmTed_tedErrorCalc_2_whas_AND_mmTed_tedErrorCa_ETC___d1314 &&
	     !mmTed_tedErrorCalc &&
	     state_mkFSMstate == 4'd8 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 4'd0 ||
	     !n_354_ULT_10___d1355 && start_wire$whas &&
	     state_mkFSMstate == 4'd7 ||
	     !n_354_ULT_10___d1355 && start_wire$whas &&
	     state_mkFSMstate == 4'd10 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_354_ULT_10___d1355 && !start_wire$whas &&
	     state_mkFSMstate == 4'd7 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_354_ULT_10___d1355 && !start_wire$whas &&
	     state_mkFSMstate == 4'd10 ;

  // rule RL_mmTed_tedErrorCalc_action_l46c20
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 =
	     mmTed_newSample$EMPTY_N && mmTed_n_6_ULT_24___d51 &&
	     (mmTed_tedErrorCalc_2_1 == 5'd1 ||
	      mmTed_tedErrorCalc_2_1 == 5'd6) ;

  // rule RL_mmTed_tedErrorCalc_action_l47c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 =
	     mmTed_newSample$EMPTY_N && mmTed_tedErrorCalc_2_1 == 5'd2 ;

  // rule RL_mmTed_tedErrorCalc_action_l72c44
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 =
	     mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     (mmTed_tedErrorCalc_2_1 == 5'd22 ||
	      mmTed_tedErrorCalc_2_1 == 5'd24) ;

  // rule RL_mmTed_tedErrorCalc_fsm_start
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start =
	     mmTed_tedErrorCalc_2_whas_AND_mmTed_tedErrorCa_ETC___d1314 &&
	     mmTed_tedErrorCalc ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l45c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 =
	     mmTed_tedErrorCalc_1$whas && mmTed_tedErrorCalc_2_1 == 5'd0 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 && mmTed_tedErrorCalc_1$whas &&
	     mmTed_tedErrorCalc_2_1 == 5'd22 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 && mmTed_tedErrorCalc_1$whas &&
	     mmTed_tedErrorCalc_2_1 == 5'd24 ;

  // rule RL_mmTed_tedErrorCalc_action_l52c16
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 =
	     !mmTed_n_6_ULT_24___d51 && mmTed_iOut_7_ULT_24___d233 &&
	     mmTed_iIn_34_PLUS_16_35_ULT_24___d236 &&
	     (mmTed_tedErrorCalc_2_1 == 5'd1 ||
	      mmTed_tedErrorCalc_2_1 == 5'd6) ||
	     mmTed_iOut_7_ULT_24___d233 &&
	     mmTed_iIn_34_PLUS_16_35_ULT_24___d236 &&
	     mmTed_tedErrorCalc_2_1 == 5'd21 ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l72c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 =
	     !mmTed_n_6_ULT_24___d51 &&
	     (!mmTed_iOut_7_ULT_24___d233 ||
	      !mmTed_iIn_34_PLUS_16_35_ULT_24___d236) &&
	     (mmTed_tedErrorCalc_2_1 == 5'd1 ||
	      mmTed_tedErrorCalc_2_1 == 5'd6) ||
	     (!mmTed_iOut_7_ULT_24___d233 ||
	      !mmTed_iIn_34_PLUS_16_35_ULT_24___d236) &&
	     mmTed_tedErrorCalc_2_1 == 5'd21 ;

  // rule RL_mmTed_tedErrorCalc_idle_l44c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_1$whas &&
	     mmTed_tedErrorCalc_2_1 == 5'd22 ;

  // rule RL_mmTed_tedErrorCalc_idle_l44c22_1
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22_1 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_1$whas &&
	     mmTed_tedErrorCalc_2_1 == 5'd24 ;

  // inputs to muxes for submodule ports
  assign MUX_mmTed_n$write_1__SEL_1 =
	     mmTed_tedErrorCalc_2_1 == 5'd23 ||
	     mmTed_tedErrorCalc_2_1 == 5'd5 ;
  assign MUX_mmTed_samples$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd0 ;
  assign MUX_mmTed_samples$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd0 ;
  assign MUX_mmTed_samples$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd0 ;
  assign MUX_mmTed_samples_1$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd1 ;
  assign MUX_mmTed_samples_1$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd1 ;
  assign MUX_mmTed_samples_1$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd1 ;
  assign MUX_mmTed_samples_10$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd10 ;
  assign MUX_mmTed_samples_10$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd10 ;
  assign MUX_mmTed_samples_10$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd10 ;
  assign MUX_mmTed_samples_11$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd11 ;
  assign MUX_mmTed_samples_11$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd11 ;
  assign MUX_mmTed_samples_11$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd11 ;
  assign MUX_mmTed_samples_12$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd12 ;
  assign MUX_mmTed_samples_12$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd12 ;
  assign MUX_mmTed_samples_12$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd12 ;
  assign MUX_mmTed_samples_13$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd13 ;
  assign MUX_mmTed_samples_13$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd13 ;
  assign MUX_mmTed_samples_13$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd13 ;
  assign MUX_mmTed_samples_14$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd14 ;
  assign MUX_mmTed_samples_14$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd14 ;
  assign MUX_mmTed_samples_14$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd14 ;
  assign MUX_mmTed_samples_15$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd15 ;
  assign MUX_mmTed_samples_15$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd15 ;
  assign MUX_mmTed_samples_15$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd15 ;
  assign MUX_mmTed_samples_16$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd16 ;
  assign MUX_mmTed_samples_16$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd16 ;
  assign MUX_mmTed_samples_16$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd16 ;
  assign MUX_mmTed_samples_17$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd17 ;
  assign MUX_mmTed_samples_17$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd17 ;
  assign MUX_mmTed_samples_17$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd17 ;
  assign MUX_mmTed_samples_18$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd18 ;
  assign MUX_mmTed_samples_18$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd18 ;
  assign MUX_mmTed_samples_18$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd18 ;
  assign MUX_mmTed_samples_19$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd19 ;
  assign MUX_mmTed_samples_19$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd19 ;
  assign MUX_mmTed_samples_19$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd19 ;
  assign MUX_mmTed_samples_2$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd2 ;
  assign MUX_mmTed_samples_2$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd2 ;
  assign MUX_mmTed_samples_2$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd2 ;
  assign MUX_mmTed_samples_20$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd20 ;
  assign MUX_mmTed_samples_20$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd20 ;
  assign MUX_mmTed_samples_20$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd20 ;
  assign MUX_mmTed_samples_21$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd21 ;
  assign MUX_mmTed_samples_21$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd21 ;
  assign MUX_mmTed_samples_21$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd21 ;
  assign MUX_mmTed_samples_22$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd22 ;
  assign MUX_mmTed_samples_22$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd22 ;
  assign MUX_mmTed_samples_22$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd22 ;
  assign MUX_mmTed_samples_23$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd23 ;
  assign MUX_mmTed_samples_23$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd23 ;
  assign MUX_mmTed_samples_23$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd23 ;
  assign MUX_mmTed_samples_24$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd24 ;
  assign MUX_mmTed_samples_24$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd24 ;
  assign MUX_mmTed_samples_24$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd24 ;
  assign MUX_mmTed_samples_3$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd3 ;
  assign MUX_mmTed_samples_3$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd3 ;
  assign MUX_mmTed_samples_3$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd3 ;
  assign MUX_mmTed_samples_4$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd4 ;
  assign MUX_mmTed_samples_4$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd4 ;
  assign MUX_mmTed_samples_4$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd4 ;
  assign MUX_mmTed_samples_5$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd5 ;
  assign MUX_mmTed_samples_5$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd5 ;
  assign MUX_mmTed_samples_5$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd5 ;
  assign MUX_mmTed_samples_6$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd6 ;
  assign MUX_mmTed_samples_6$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd6 ;
  assign MUX_mmTed_samples_6$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd6 ;
  assign MUX_mmTed_samples_7$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd7 ;
  assign MUX_mmTed_samples_7$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd7 ;
  assign MUX_mmTed_samples_7$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd7 ;
  assign MUX_mmTed_samples_8$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd8 ;
  assign MUX_mmTed_samples_8$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd8 ;
  assign MUX_mmTed_samples_8$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd8 ;
  assign MUX_mmTed_samples_9$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd9 ;
  assign MUX_mmTed_samples_9$write_1__SEL_2 =
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd9 ;
  assign MUX_mmTed_samples_9$write_1__SEL_3 =
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd9 ;
  assign MUX_mmTed_tedErrorCalc_2_1$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_mmTed_mmVal$write_1__VAL_1 = mmTed_y[47:24] - mmTed_x[47:24] ;
  assign MUX_mmTed_mmVal$write_1__VAL_2 =
	     { mmTed_mmVal[23:12], x_f__h153622 } ;
  assign MUX_mmTed_mu$write_1__VAL_1 =
	     x__h154074 +
	     ((!IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[35] &&
	       (IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[23] ||
		IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[35] &&
		  (!IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[23] ||
		   ~IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125[23:0])) ;
  assign MUX_mmTed_mu$write_1__VAL_2 = { 12'd0, mmTed_mu[11:0] } ;
  assign MUX_mmTed_mu$write_1__VAL_3 = { mmTed_mu[23:12], x_f__h158123 } ;
  assign MUX_mmTed_n$write_1__VAL_1 = mmTed_n + 12'd1 ;
  assign MUX_mmTed_samples$write_1__VAL_2 =
	     { SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140,
	       x_rel_f__h84225,
	       x_img_i__h90951,
	       SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 } ;
  assign MUX_mmTed_samples$write_1__VAL_3 =
	     { SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140,
	       SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167,
	       x_img_i__h90951,
	       x_img_f__h87808 } ;
  assign MUX_mmTed_x$write_1__VAL_1 = { x__h106369, x__h123419 } ;
  assign MUX_mmTed_x$write_1__VAL_2 =
	     { mmTed_x[47:36], x_rel_f__h151628, mmTed_x[23:0] } ;
  assign MUX_mmTed_x$write_1__VAL_3 = { mmTed_x[47:12], x_img_f__h152023 } ;
  assign MUX_mmTed_y$write_1__VAL_1 = { x__h129256, x__h145833 } ;
  assign MUX_mmTed_y$write_1__VAL_2 =
	     { mmTed_y[47:36], x_rel_f__h152401, mmTed_y[23:0] } ;
  assign MUX_mmTed_y$write_1__VAL_3 = { mmTed_y[47:12], x_img_f__h152812 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign mmTed_tedErrorCalc_1$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_1_1 && !mmTed_tedErrorCalc_3_1 ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign mmTed_tedErrorCalc_3$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22 ||
	     mmTed_tedErrorCalc_2_1 == 5'd23 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd20 ||
	     mmTed_tedErrorCalc_2_1 == 5'd19 ||
	     mmTed_tedErrorCalc_2_1 == 5'd18 ||
	     mmTed_tedErrorCalc_2_1 == 5'd17 ||
	     mmTed_tedErrorCalc_2_1 == 5'd16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd15 ||
	     mmTed_tedErrorCalc_2_1 == 5'd14 ||
	     mmTed_tedErrorCalc_2_1 == 5'd13 ||
	     mmTed_tedErrorCalc_2_1 == 5'd12 ||
	     mmTed_tedErrorCalc_2_1 == 5'd11 ||
	     mmTed_tedErrorCalc_2_1 == 5'd10 ||
	     mmTed_tedErrorCalc_2_1 == 5'd9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd8 ||
	     mmTed_tedErrorCalc_2_1 == 5'd7 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd5 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 4'd9 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     WILL_FIRE_RL_action_l37c18 ||
	     state_mkFSMstate == 4'd6 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register fV
  assign fV$D_IN = { fV[23:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register mmTed_dummy
  assign mmTed_dummy$D_IN = 1'b0 ;
  assign mmTed_dummy$EN = 1'b0 ;

  // register mmTed_iIn
  assign mmTed_iIn$D_IN = mmTed_iIn + mmTed_mu[23:12] ;
  assign mmTed_iIn$EN = mmTed_tedErrorCalc_2_1 == 5'd17 ;

  // register mmTed_iOut
  assign mmTed_iOut$D_IN = mmTed_iOut + 12'd1 ;
  assign mmTed_iOut$EN = mmTed_tedErrorCalc_2_1 == 5'd20 ;

  // register mmTed_limitMM_inner_reg
  assign mmTed_limitMM_inner_reg$D_IN = 12'hFFF << inV ;
  assign mmTed_limitMM_inner_reg$EN = state_mkFSMstate == 4'd5 ;

  // register mmTed_limitMu_inner_reg
  assign mmTed_limitMu_inner_reg$D_IN = mmTed_limitMM_inner_reg$D_IN ;
  assign mmTed_limitMu_inner_reg$EN = state_mkFSMstate == 4'd3 ;

  // register mmTed_limitOut_inner_reg
  assign mmTed_limitOut_inner_reg$D_IN = mmTed_limitMM_inner_reg$D_IN ;
  assign mmTed_limitOut_inner_reg$EN = state_mkFSMstate == 4'd4 ;

  // register mmTed_limitX_inner_reg
  assign mmTed_limitX_inner_reg$D_IN = mmTed_limitMM_inner_reg$D_IN ;
  assign mmTed_limitX_inner_reg$EN = state_mkFSMstate == 4'd1 ;

  // register mmTed_limitY_inner_reg
  assign mmTed_limitY_inner_reg$D_IN = mmTed_limitMM_inner_reg$D_IN ;
  assign mmTed_limitY_inner_reg$EN = state_mkFSMstate == 4'd2 ;

  // register mmTed_mmVal
  assign mmTed_mmVal$D_IN =
	     (mmTed_tedErrorCalc_2_1 == 5'd14) ?
	       MUX_mmTed_mmVal$write_1__VAL_1 :
	       MUX_mmTed_mmVal$write_1__VAL_2 ;
  assign mmTed_mmVal$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd14 ||
	     mmTed_tedErrorCalc_2_1 == 5'd15 ;

  // register mmTed_mu
  always@(mmTed_tedErrorCalc_2_1 or
	  MUX_mmTed_mu$write_1__VAL_1 or
	  MUX_mmTed_mu$write_1__VAL_2 or MUX_mmTed_mu$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      mmTed_tedErrorCalc_2_1 == 5'd16:
	  mmTed_mu$D_IN = MUX_mmTed_mu$write_1__VAL_1;
      mmTed_tedErrorCalc_2_1 == 5'd18:
	  mmTed_mu$D_IN = MUX_mmTed_mu$write_1__VAL_2;
      mmTed_tedErrorCalc_2_1 == 5'd19:
	  mmTed_mu$D_IN = MUX_mmTed_mu$write_1__VAL_3;
      default: mmTed_mu$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_mu$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd18 ||
	     mmTed_tedErrorCalc_2_1 == 5'd19 ;

  // register mmTed_n
  always@(MUX_mmTed_n$write_1__SEL_1 or
	  MUX_mmTed_n$write_1__VAL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_n$write_1__SEL_1: mmTed_n$D_IN = MUX_mmTed_n$write_1__VAL_1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9:
	  mmTed_n$D_IN = 12'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9:
	  mmTed_n$D_IN = 12'd2;
      default: mmTed_n$D_IN = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_n$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd23 ||
	     mmTed_tedErrorCalc_2_1 == 5'd5 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ;

  // register mmTed_out
  assign mmTed_out$D_IN =
	     { SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246,
	       SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247,
	       SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248,
	       SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 } ;
  assign mmTed_out$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd0 ;

  // register mmTed_outRail
  assign mmTed_outRail$D_IN =
	     { realA_i__h105757, 12'd0, imagA_i__h105967, 12'd0 } ;
  assign mmTed_outRail$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd0 ;

  // register mmTed_outRail_1
  assign mmTed_outRail_1$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_1$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd1 ;

  // register mmTed_outRail_10
  assign mmTed_outRail_10$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_10$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd10 ;

  // register mmTed_outRail_11
  assign mmTed_outRail_11$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_11$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd11 ;

  // register mmTed_outRail_12
  assign mmTed_outRail_12$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_12$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd12 ;

  // register mmTed_outRail_13
  assign mmTed_outRail_13$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_13$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd13 ;

  // register mmTed_outRail_14
  assign mmTed_outRail_14$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_14$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd14 ;

  // register mmTed_outRail_15
  assign mmTed_outRail_15$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_15$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd15 ;

  // register mmTed_outRail_16
  assign mmTed_outRail_16$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_16$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd16 ;

  // register mmTed_outRail_17
  assign mmTed_outRail_17$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_17$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd17 ;

  // register mmTed_outRail_18
  assign mmTed_outRail_18$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_18$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd18 ;

  // register mmTed_outRail_19
  assign mmTed_outRail_19$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_19$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd19 ;

  // register mmTed_outRail_2
  assign mmTed_outRail_2$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_2$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd2 ;

  // register mmTed_outRail_20
  assign mmTed_outRail_20$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_20$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd20 ;

  // register mmTed_outRail_21
  assign mmTed_outRail_21$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_21$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd21 ;

  // register mmTed_outRail_22
  assign mmTed_outRail_22$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_22$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd22 ;

  // register mmTed_outRail_23
  assign mmTed_outRail_23$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_23$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd23 ;

  // register mmTed_outRail_24
  assign mmTed_outRail_24$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_24$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd24 ;

  // register mmTed_outRail_3
  assign mmTed_outRail_3$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_3$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd3 ;

  // register mmTed_outRail_4
  assign mmTed_outRail_4$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_4$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd4 ;

  // register mmTed_outRail_5
  assign mmTed_outRail_5$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_5$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd5 ;

  // register mmTed_outRail_6
  assign mmTed_outRail_6$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_6$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd6 ;

  // register mmTed_outRail_7
  assign mmTed_outRail_7$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_7$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd7 ;

  // register mmTed_outRail_8
  assign mmTed_outRail_8$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_8$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd8 ;

  // register mmTed_outRail_9
  assign mmTed_outRail_9$D_IN = mmTed_outRail$D_IN ;
  assign mmTed_outRail_9$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd7 && mmTed_iOut == 12'd9 ;

  // register mmTed_out_1
  assign mmTed_out_1$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd1 ;

  // register mmTed_out_10
  assign mmTed_out_10$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd10 ;

  // register mmTed_out_11
  assign mmTed_out_11$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd11 ;

  // register mmTed_out_12
  assign mmTed_out_12$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd12 ;

  // register mmTed_out_13
  assign mmTed_out_13$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd13 ;

  // register mmTed_out_14
  assign mmTed_out_14$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd14 ;

  // register mmTed_out_15
  assign mmTed_out_15$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd15 ;

  // register mmTed_out_16
  assign mmTed_out_16$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd16 ;

  // register mmTed_out_17
  assign mmTed_out_17$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd17 ;

  // register mmTed_out_18
  assign mmTed_out_18$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd18 ;

  // register mmTed_out_19
  assign mmTed_out_19$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd19 ;

  // register mmTed_out_2
  assign mmTed_out_2$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd2 ;

  // register mmTed_out_20
  assign mmTed_out_20$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd20 ;

  // register mmTed_out_21
  assign mmTed_out_21$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd21 ;

  // register mmTed_out_22
  assign mmTed_out_22$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd22 ;

  // register mmTed_out_23
  assign mmTed_out_23$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd23 ;

  // register mmTed_out_24
  assign mmTed_out_24$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd24 ;

  // register mmTed_out_3
  assign mmTed_out_3$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd3 ;

  // register mmTed_out_4
  assign mmTed_out_4$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd4 ;

  // register mmTed_out_5
  assign mmTed_out_5$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd5 ;

  // register mmTed_out_6
  assign mmTed_out_6$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd6 ;

  // register mmTed_out_7
  assign mmTed_out_7$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd7 ;

  // register mmTed_out_8
  assign mmTed_out_8$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd8 ;

  // register mmTed_out_9
  assign mmTed_out_9$D_IN = mmTed_out$D_IN ;
  assign mmTed_out_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	     mmTed_iOut == 12'd9 ;

  // register mmTed_samples
  always@(MUX_mmTed_samples$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples$write_1__SEL_1:
	  mmTed_samples$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples$write_1__SEL_2:
	  mmTed_samples$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples$write_1__SEL_3:
	  mmTed_samples$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd0 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd0 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd0 ;

  // register mmTed_samples_1
  always@(MUX_mmTed_samples_1$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_1$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_1$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_1$write_1__SEL_1:
	  mmTed_samples_1$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_1$write_1__SEL_2:
	  mmTed_samples_1$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_1$write_1__SEL_3:
	  mmTed_samples_1$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_1$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd1 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd1 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd1 ;

  // register mmTed_samples_10
  always@(MUX_mmTed_samples_10$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_10$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_10$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_10$write_1__SEL_1:
	  mmTed_samples_10$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_10$write_1__SEL_2:
	  mmTed_samples_10$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_10$write_1__SEL_3:
	  mmTed_samples_10$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_10$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd10 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd10 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd10 ;

  // register mmTed_samples_11
  always@(MUX_mmTed_samples_11$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_11$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_11$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_11$write_1__SEL_1:
	  mmTed_samples_11$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_11$write_1__SEL_2:
	  mmTed_samples_11$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_11$write_1__SEL_3:
	  mmTed_samples_11$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_11$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd11 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd11 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd11 ;

  // register mmTed_samples_12
  always@(MUX_mmTed_samples_12$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_12$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_12$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_12$write_1__SEL_1:
	  mmTed_samples_12$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_12$write_1__SEL_2:
	  mmTed_samples_12$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_12$write_1__SEL_3:
	  mmTed_samples_12$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_12$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd12 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd12 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd12 ;

  // register mmTed_samples_13
  always@(MUX_mmTed_samples_13$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_13$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_13$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_13$write_1__SEL_1:
	  mmTed_samples_13$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_13$write_1__SEL_2:
	  mmTed_samples_13$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_13$write_1__SEL_3:
	  mmTed_samples_13$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_13$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd13 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd13 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd13 ;

  // register mmTed_samples_14
  always@(MUX_mmTed_samples_14$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_14$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_14$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_14$write_1__SEL_1:
	  mmTed_samples_14$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_14$write_1__SEL_2:
	  mmTed_samples_14$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_14$write_1__SEL_3:
	  mmTed_samples_14$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_14$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd14 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd14 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd14 ;

  // register mmTed_samples_15
  always@(MUX_mmTed_samples_15$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_15$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_15$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_15$write_1__SEL_1:
	  mmTed_samples_15$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_15$write_1__SEL_2:
	  mmTed_samples_15$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_15$write_1__SEL_3:
	  mmTed_samples_15$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_15$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd15 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd15 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd15 ;

  // register mmTed_samples_16
  always@(MUX_mmTed_samples_16$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_16$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_16$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_16$write_1__SEL_1:
	  mmTed_samples_16$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_16$write_1__SEL_2:
	  mmTed_samples_16$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_16$write_1__SEL_3:
	  mmTed_samples_16$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_16$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd16 ;

  // register mmTed_samples_17
  always@(MUX_mmTed_samples_17$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_17$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_17$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_17$write_1__SEL_1:
	  mmTed_samples_17$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_17$write_1__SEL_2:
	  mmTed_samples_17$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_17$write_1__SEL_3:
	  mmTed_samples_17$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_17$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd17 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd17 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd17 ;

  // register mmTed_samples_18
  always@(MUX_mmTed_samples_18$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_18$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_18$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_18$write_1__SEL_1:
	  mmTed_samples_18$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_18$write_1__SEL_2:
	  mmTed_samples_18$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_18$write_1__SEL_3:
	  mmTed_samples_18$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_18$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd18 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd18 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd18 ;

  // register mmTed_samples_19
  always@(MUX_mmTed_samples_19$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_19$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_19$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_19$write_1__SEL_1:
	  mmTed_samples_19$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_19$write_1__SEL_2:
	  mmTed_samples_19$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_19$write_1__SEL_3:
	  mmTed_samples_19$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_19$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd19 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd19 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd19 ;

  // register mmTed_samples_2
  always@(MUX_mmTed_samples_2$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_2$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_2$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_2$write_1__SEL_1:
	  mmTed_samples_2$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_2$write_1__SEL_2:
	  mmTed_samples_2$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_2$write_1__SEL_3:
	  mmTed_samples_2$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_2$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd2 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd2 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd2 ;

  // register mmTed_samples_20
  always@(MUX_mmTed_samples_20$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_20$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_20$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_20$write_1__SEL_1:
	  mmTed_samples_20$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_20$write_1__SEL_2:
	  mmTed_samples_20$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_20$write_1__SEL_3:
	  mmTed_samples_20$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_20$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd20 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd20 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd20 ;

  // register mmTed_samples_21
  always@(MUX_mmTed_samples_21$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_21$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_21$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_21$write_1__SEL_1:
	  mmTed_samples_21$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_21$write_1__SEL_2:
	  mmTed_samples_21$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_21$write_1__SEL_3:
	  mmTed_samples_21$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_21$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd21 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd21 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd21 ;

  // register mmTed_samples_22
  always@(MUX_mmTed_samples_22$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_22$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_22$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_22$write_1__SEL_1:
	  mmTed_samples_22$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_22$write_1__SEL_2:
	  mmTed_samples_22$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_22$write_1__SEL_3:
	  mmTed_samples_22$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_22$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd22 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd22 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd22 ;

  // register mmTed_samples_23
  always@(MUX_mmTed_samples_23$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_23$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_23$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_23$write_1__SEL_1:
	  mmTed_samples_23$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_23$write_1__SEL_2:
	  mmTed_samples_23$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_23$write_1__SEL_3:
	  mmTed_samples_23$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_23$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd23 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd23 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd23 ;

  // register mmTed_samples_24
  always@(MUX_mmTed_samples_24$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_24$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_24$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_24$write_1__SEL_1:
	  mmTed_samples_24$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_24$write_1__SEL_2:
	  mmTed_samples_24$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_24$write_1__SEL_3:
	  mmTed_samples_24$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_24$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd24 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd24 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd24 ;

  // register mmTed_samples_3
  always@(MUX_mmTed_samples_3$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_3$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_3$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_3$write_1__SEL_1:
	  mmTed_samples_3$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_3$write_1__SEL_2:
	  mmTed_samples_3$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_3$write_1__SEL_3:
	  mmTed_samples_3$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_3$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd3 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd3 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd3 ;

  // register mmTed_samples_4
  always@(MUX_mmTed_samples_4$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_4$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_4$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_4$write_1__SEL_1:
	  mmTed_samples_4$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_4$write_1__SEL_2:
	  mmTed_samples_4$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_4$write_1__SEL_3:
	  mmTed_samples_4$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_4$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd4 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd4 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd4 ;

  // register mmTed_samples_5
  always@(MUX_mmTed_samples_5$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_5$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_5$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_5$write_1__SEL_1:
	  mmTed_samples_5$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_5$write_1__SEL_2:
	  mmTed_samples_5$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_5$write_1__SEL_3:
	  mmTed_samples_5$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_5$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd5 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd5 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd5 ;

  // register mmTed_samples_6
  always@(MUX_mmTed_samples_6$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_6$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_6$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_6$write_1__SEL_1:
	  mmTed_samples_6$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_6$write_1__SEL_2:
	  mmTed_samples_6$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_6$write_1__SEL_3:
	  mmTed_samples_6$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_6$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd6 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd6 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd6 ;

  // register mmTed_samples_7
  always@(MUX_mmTed_samples_7$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_7$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_7$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_7$write_1__SEL_1:
	  mmTed_samples_7$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_7$write_1__SEL_2:
	  mmTed_samples_7$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_7$write_1__SEL_3:
	  mmTed_samples_7$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_7$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd7 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd7 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd7 ;

  // register mmTed_samples_8
  always@(MUX_mmTed_samples_8$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_8$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_8$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_8$write_1__SEL_1:
	  mmTed_samples_8$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_8$write_1__SEL_2:
	  mmTed_samples_8$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_8$write_1__SEL_3:
	  mmTed_samples_8$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_8$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd8 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd8 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd8 ;

  // register mmTed_samples_9
  always@(MUX_mmTed_samples_9$write_1__SEL_1 or
	  mmTed_newSample$D_OUT or
	  MUX_mmTed_samples_9$write_1__SEL_2 or
	  MUX_mmTed_samples$write_1__VAL_2 or
	  MUX_mmTed_samples_9$write_1__SEL_3 or
	  MUX_mmTed_samples$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_samples_9$write_1__SEL_1:
	  mmTed_samples_9$D_IN = mmTed_newSample$D_OUT;
      MUX_mmTed_samples_9$write_1__SEL_2:
	  mmTed_samples_9$D_IN = MUX_mmTed_samples$write_1__VAL_2;
      MUX_mmTed_samples_9$write_1__SEL_3:
	  mmTed_samples_9$D_IN = MUX_mmTed_samples$write_1__VAL_3;
      default: mmTed_samples_9$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_samples_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	     mmTed_n == 12'd9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 && mmTed_n == 12'd9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 && mmTed_n == 12'd9 ;

  // register mmTed_tedErrorCalc
  assign mmTed_tedErrorCalc$D_IN =
	     !WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ;
  assign mmTed_tedErrorCalc$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_2_whas_AND_mmTed_tedErrorCa_ETC___d1314 &&
	     !mmTed_tedErrorCalc ;

  // register mmTed_tedErrorCalc_1_1
  assign mmTed_tedErrorCalc_1_1$D_IN = mmTed_tedErrorCalc_1$whas ;
  assign mmTed_tedErrorCalc_1_1$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_2_1
  always@(MUX_mmTed_tedErrorCalc_2_1$write_1__SEL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 or
	  mmTed_tedErrorCalc_2_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_tedErrorCalc_2_1$write_1__SEL_1:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd2;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd3;
      mmTed_tedErrorCalc_2_1 == 5'd3: mmTed_tedErrorCalc_2_1$D_IN = 5'd4;
      mmTed_tedErrorCalc_2_1 == 5'd4: mmTed_tedErrorCalc_2_1$D_IN = 5'd5;
      mmTed_tedErrorCalc_2_1 == 5'd5: mmTed_tedErrorCalc_2_1$D_IN = 5'd6;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd7;
      mmTed_tedErrorCalc_2_1 == 5'd7: mmTed_tedErrorCalc_2_1$D_IN = 5'd8;
      mmTed_tedErrorCalc_2_1 == 5'd8: mmTed_tedErrorCalc_2_1$D_IN = 5'd9;
      mmTed_tedErrorCalc_2_1 == 5'd9: mmTed_tedErrorCalc_2_1$D_IN = 5'd10;
      mmTed_tedErrorCalc_2_1 == 5'd10: mmTed_tedErrorCalc_2_1$D_IN = 5'd11;
      mmTed_tedErrorCalc_2_1 == 5'd11: mmTed_tedErrorCalc_2_1$D_IN = 5'd12;
      mmTed_tedErrorCalc_2_1 == 5'd12: mmTed_tedErrorCalc_2_1$D_IN = 5'd13;
      mmTed_tedErrorCalc_2_1 == 5'd13: mmTed_tedErrorCalc_2_1$D_IN = 5'd14;
      mmTed_tedErrorCalc_2_1 == 5'd14: mmTed_tedErrorCalc_2_1$D_IN = 5'd15;
      mmTed_tedErrorCalc_2_1 == 5'd15: mmTed_tedErrorCalc_2_1$D_IN = 5'd16;
      mmTed_tedErrorCalc_2_1 == 5'd16: mmTed_tedErrorCalc_2_1$D_IN = 5'd17;
      mmTed_tedErrorCalc_2_1 == 5'd17: mmTed_tedErrorCalc_2_1$D_IN = 5'd18;
      mmTed_tedErrorCalc_2_1 == 5'd18: mmTed_tedErrorCalc_2_1$D_IN = 5'd19;
      mmTed_tedErrorCalc_2_1 == 5'd19: mmTed_tedErrorCalc_2_1$D_IN = 5'd20;
      mmTed_tedErrorCalc_2_1 == 5'd20: mmTed_tedErrorCalc_2_1$D_IN = 5'd21;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd22;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44:
	  mmTed_tedErrorCalc_2_1$D_IN = 5'd23;
      mmTed_tedErrorCalc_2_1 == 5'd23: mmTed_tedErrorCalc_2_1$D_IN = 5'd24;
      default: mmTed_tedErrorCalc_2_1$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_tedErrorCalc_2_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l44c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 ||
	     mmTed_tedErrorCalc_2_1 == 5'd3 ||
	     mmTed_tedErrorCalc_2_1 == 5'd4 ||
	     mmTed_tedErrorCalc_2_1 == 5'd5 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd7 ||
	     mmTed_tedErrorCalc_2_1 == 5'd8 ||
	     mmTed_tedErrorCalc_2_1 == 5'd9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd10 ||
	     mmTed_tedErrorCalc_2_1 == 5'd11 ||
	     mmTed_tedErrorCalc_2_1 == 5'd12 ||
	     mmTed_tedErrorCalc_2_1 == 5'd13 ||
	     mmTed_tedErrorCalc_2_1 == 5'd14 ||
	     mmTed_tedErrorCalc_2_1 == 5'd15 ||
	     mmTed_tedErrorCalc_2_1 == 5'd16 ||
	     mmTed_tedErrorCalc_2_1 == 5'd17 ||
	     mmTed_tedErrorCalc_2_1 == 5'd18 ||
	     mmTed_tedErrorCalc_2_1 == 5'd19 ||
	     mmTed_tedErrorCalc_2_1 == 5'd20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	     mmTed_tedErrorCalc_2_1 == 5'd23 ;

  // register mmTed_tedErrorCalc_3_1
  assign mmTed_tedErrorCalc_3_1$D_IN = mmTed_tedErrorCalc_3$whas ;
  assign mmTed_tedErrorCalc_3_1$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_4
  assign mmTed_tedErrorCalc_4$D_IN =
	     mmTed_tedErrorCalc_3$whas || mmTed_tedErrorCalc_4 ;
  assign mmTed_tedErrorCalc_4$EN = 1'd1 ;

  // register mmTed_x
  always@(mmTed_tedErrorCalc_2_1 or
	  MUX_mmTed_x$write_1__VAL_1 or
	  MUX_mmTed_x$write_1__VAL_2 or MUX_mmTed_x$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      mmTed_tedErrorCalc_2_1 == 5'd8:
	  mmTed_x$D_IN = MUX_mmTed_x$write_1__VAL_1;
      mmTed_tedErrorCalc_2_1 == 5'd10:
	  mmTed_x$D_IN = MUX_mmTed_x$write_1__VAL_2;
      mmTed_tedErrorCalc_2_1 == 5'd11:
	  mmTed_x$D_IN = MUX_mmTed_x$write_1__VAL_3;
      default: mmTed_x$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_x$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd8 ||
	     mmTed_tedErrorCalc_2_1 == 5'd10 ||
	     mmTed_tedErrorCalc_2_1 == 5'd11 ;

  // register mmTed_y
  always@(mmTed_tedErrorCalc_2_1 or
	  MUX_mmTed_y$write_1__VAL_1 or
	  MUX_mmTed_y$write_1__VAL_2 or MUX_mmTed_y$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      mmTed_tedErrorCalc_2_1 == 5'd9:
	  mmTed_y$D_IN = MUX_mmTed_y$write_1__VAL_1;
      mmTed_tedErrorCalc_2_1 == 5'd12:
	  mmTed_y$D_IN = MUX_mmTed_y$write_1__VAL_2;
      mmTed_tedErrorCalc_2_1 == 5'd13:
	  mmTed_y$D_IN = MUX_mmTed_y$write_1__VAL_3;
      default: mmTed_y$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_y$EN =
	     mmTed_tedErrorCalc_2_1 == 5'd9 ||
	     mmTed_tedErrorCalc_2_1 == 5'd12 ||
	     mmTed_tedErrorCalc_2_1 == 5'd13 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 4'd9) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 4'd9 || state_mkFSMstate == 4'd6 ;

  // register outV
  assign outV$D_IN = mmTed_mu ;
  assign outV$EN = WILL_FIRE_RL_action_l39c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l37c18 or WILL_FIRE_RL_action_l39c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 4'd1;
      state_mkFSMstate == 4'd1: state_mkFSMstate$D_IN = 4'd2;
      state_mkFSMstate == 4'd2: state_mkFSMstate$D_IN = 4'd3;
      state_mkFSMstate == 4'd3: state_mkFSMstate$D_IN = 4'd4;
      state_mkFSMstate == 4'd4: state_mkFSMstate$D_IN = 4'd5;
      state_mkFSMstate == 4'd5: state_mkFSMstate$D_IN = 4'd6;
      state_mkFSMstate == 4'd6: state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_action_l37c18: state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_action_l39c13: state_mkFSMstate$D_IN = 4'd9;
      state_mkFSMstate == 4'd9: state_mkFSMstate$D_IN = 4'd10;
      default: state_mkFSMstate$D_IN = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 4'd1 ||
	     state_mkFSMstate == 4'd2 ||
	     state_mkFSMstate == 4'd3 ||
	     state_mkFSMstate == 4'd4 ||
	     state_mkFSMstate == 4'd5 ||
	     state_mkFSMstate == 4'd6 ||
	     WILL_FIRE_RL_action_l37c18 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     state_mkFSMstate == 4'd9 ;

  // submodule mmTed_newSample
  assign mmTed_newSample$D_IN = {2{fV}} ;
  assign mmTed_newSample$ENQ = WILL_FIRE_RL_action_l37c18 ;
  assign mmTed_newSample$DEQ = WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 ;
  assign mmTed_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640 =
	     ((!x__h107832[35] &&
	       (x__h107832[23] || x__h107832[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h107832[35] &&
		  (!x__h107832[23] || ~x__h107832[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h107832[23:0])) -
	     ((!x__h110639[35] &&
	       (x__h110639[23] || x__h110639[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h110639[35] &&
		  (!x__h110639[23] || ~x__h110639[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h110639[23:0])) ;
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760 =
	     ((!x__h116293[35] &&
	       (x__h116293[23] || x__h116293[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h116293[35] &&
		  (!x__h116293[23] || ~x__h116293[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h116293[23:0])) +
	     ((!x__h118998[35] &&
	       (x__h118998[23] || x__h118998[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h118998[35] &&
		  (!x__h118998[23] || ~x__h118998[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h118998[23:0])) ;
  assign IF_NOT_IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG__ETC___d1125 =
	     (!IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110[47] &&
	      IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1122[35]) ?
	       36'h7FFFFFFFF :
	       IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1122 ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d619 =
	     x__h110968[47:12] + { 24'd0, y_f__h112059 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d739 =
	     x__h119327[47:12] + { 24'd0, y_f__h120211 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d771 =
	     x__h121399 * x__h121419 ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d785 =
	     x__h115916[47:12] + { 24'd0, y_f__h122249 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d848 =
	     x__h121399 * x__h113267 ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d862 =
	     x__h126792[47:12] + { 24'd0, y_f__h127687 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d526 =
	     x__h108161[47:12] + { 24'd0, y_f__h109149 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d651 =
	     x__h113247 * x__h113267 ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d665 =
	     x__h107048[47:12] + { 24'd0, y_f__h114097 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d706 =
	     x__h116622[47:12] + { 24'd0, y_f__h117508 } ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d810 =
	     x__h113247 * x__h121419 ;
  assign IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d824 =
	     x__h124078[47:12] + { 24'd0, y_f__h124973 } ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1021 =
	     x__h143813 * x__h113267 ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1035 =
	     x__h149206[47:12] + { 24'd0, y_f__h150101 } ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d944 =
	     x__h143813 * x__h121419 ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d958 =
	     x__h138330[47:12] + { 24'd0, y_f__h144663 } ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d898 =
	     x__h135661 * x__h113267 ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d912 =
	     x__h129915[47:12] + { 24'd0, y_f__h136511 } ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d983 =
	     x__h135661 * x__h121419 ;
  assign IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d997 =
	     x__h146492[47:12] + { 24'd0, y_f__h147387 } ;
  assign IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110 =
	     mmTed_mmVal[23] ?
	       -_1228_MUL_IF_mmTed_mmVal_095_BIT_23_105_THEN_NE_ETC___d1108 :
	       _1228_MUL_IF_mmTed_mmVal_095_BIT_23_105_THEN_NE_ETC___d1108 ;
  assign IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1122 =
	     IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110[47:12] +
	     { 24'd0, y_f__h155693 } ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d513 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_47_T_ETC___d512 ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d606 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_23_T_ETC___d605 ;
  assign SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692 =
	     { SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686,
	       SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 } -
	     { SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689,
	       SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 } ;
  assign SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503 =
	     { SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470,
	       SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 } -
	     { SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500,
	       SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 } ;
  assign SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936 =
	     { SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385,
	       SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 } -
	     { SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933,
	       SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 } ;
  assign SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890 =
	     { SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328,
	       SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 } -
	     { SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887,
	       SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 } ;
  assign SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238 =
	     { SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237[11],
	       SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 } ;
  assign SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172 =
	     { SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171[11],
	       SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_23_T_ETC___d605 =
	     { 12'd0,
	       SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573[11] ?
		 -{ SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573,
		    SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 } :
		 { SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573,
		   SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_47_T_ETC___d512 =
	     { 12'd0,
	       SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506[11] ?
		 -{ SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506,
		    SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 } :
		 { SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506,
		   SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1256 =
	     { 33'd0, x__h160722 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1259 =
	     { 33'd0, x__h160722 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1267 =
	     { 33'd0, x__h160722 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1276 =
	     { 33'd0, x__h160722 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1285 =
	     { 33'd0, x__h160722 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1294 =
	     { 33'd0, x__h160722 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1190 =
	     { 33'd0, x__h159937 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1193 =
	     { 33'd0, x__h159937 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1201 =
	     { 33'd0, x__h159937 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1210 =
	     { 33'd0, x__h159937 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1219 =
	     { 33'd0, x__h159937 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1228 =
	     { 33'd0, x__h159937 } * 45'd1000000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1196 =
	     45'd10 * digit__h159907 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1262 =
	     45'd10 * digit__h160692 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1205 =
	     45'd10 * y__h160120 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1271 =
	     45'd10 * y__h160905 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1214 =
	     45'd10 * y__h160209 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1280 =
	     45'd10 * y__h160994 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1223 =
	     45'd10 * y__h160298 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1289 =
	     45'd10 * y__h161083 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1232 =
	     45'd10 * y__h160387 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1298 =
	     45'd10 * y__h161172 ;
  assign _1228_MUL_IF_mmTed_mmVal_095_BIT_23_105_THEN_NE_ETC___d1108 =
	     24'd1228 * x__h154863 ;
  assign abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405 =
	     (state_mkFSMstate == 4'd0 ||
	      !n_354_ULT_10___d1355 && state_mkFSMstate == 4'd7 ||
	      !n_354_ULT_10___d1355 && state_mkFSMstate == 4'd10) &&
	     (!start_reg_1 || state_fired) ;
  assign digit__h159907 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1190[15:12] } ;
  assign digit__h159974 =
	     { 41'd0,
	       tx59972_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1[3:0] } ;
  assign digit__h160063 =
	     { 41'd0,
	       tx60061_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2[3:0] } ;
  assign digit__h160152 =
	     { 41'd0,
	       tx60150_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3[3:0] } ;
  assign digit__h160241 =
	     { 41'd0,
	       tx60239_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4[3:0] } ;
  assign digit__h160330 =
	     { 41'd0,
	       tx60328_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5[3:0] } ;
  assign digit__h160692 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1256[15:12] } ;
  assign digit__h160759 =
	     { 41'd0,
	       tx60757_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6[3:0] } ;
  assign digit__h160848 =
	     { 41'd0,
	       tx60846_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7[3:0] } ;
  assign digit__h160937 =
	     { 41'd0,
	       tx60935_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8[3:0] } ;
  assign digit__h161026 =
	     { 41'd0,
	       tx61024_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9[3:0] } ;
  assign digit__h161115 =
	     { 41'd0,
	       tx61113_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10[3:0] } ;
  assign imagA_i__h105967 =
	     (({ SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385,
		 SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 } ^
	       24'h800000) <=
	      24'd8388608) ?
	       12'd0 :
	       12'd1 ;
  assign mmTed_iIn_34_PLUS_16_35_ULT_24___d236 = mmTed_iIn + 12'd16 < 12'd24 ;
  assign mmTed_iOut_7_ULT_24___d233 = mmTed_iOut < 12'd24 ;
  assign mmTed_n_6_ULT_24___d51 = mmTed_n < 12'd24 ;
  assign mmTed_n_6_ULT_mmTed_iOut_7___d38 = mmTed_n < mmTed_iOut ;
  assign mmTed_tedErrorCalc_2_whas_AND_mmTed_tedErrorCa_ETC___d1314 =
	     (mmTed_tedErrorCalc_2_1 == 5'd0 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_2_1 == 5'd22 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_2_1 == 5'd24) &&
	     (!mmTed_tedErrorCalc_1_1 || mmTed_tedErrorCalc_3_1) ;
  assign n_354_ULT_10___d1355 = n < 10'd10 ;
  assign realA_i__h105757 =
	     (({ SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328,
		 SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 } ^
	       24'h800000) <=
	      24'd8388608) ?
	       12'd0 :
	       12'd1 ;
  assign tx59972_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1 =
	     tx__h159972 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1196[44:0] ;
  assign tx60061_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2 =
	     tx__h160061 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1205[44:0] ;
  assign tx60150_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3 =
	     tx__h160150 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1214[44:0] ;
  assign tx60239_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4 =
	     tx__h160239 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1223[44:0] ;
  assign tx60328_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5 =
	     tx__h160328 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1232[44:0] ;
  assign tx60757_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6 =
	     tx__h160757 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1262[44:0] ;
  assign tx60846_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7 =
	     tx__h160846 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1271[44:0] ;
  assign tx60935_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8 =
	     tx__h160935 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1280[44:0] ;
  assign tx61024_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9 =
	     tx__h161024 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1289[44:0] ;
  assign tx61113_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10 =
	     tx__h161113 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1298[44:0] ;
  assign tx__h159972 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1193[44:12] } ;
  assign tx__h160061 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1201[44:12] } ;
  assign tx__h160150 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1210[44:12] } ;
  assign tx__h160239 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1219[44:12] } ;
  assign tx__h160328 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_47__ETC___d1228[44:12] } ;
  assign tx__h160757 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1259[44:12] } ;
  assign tx__h160846 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1267[44:12] } ;
  assign tx__h160935 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1276[44:12] } ;
  assign tx__h161024 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1285[44:12] } ;
  assign tx__h161113 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_77_BITS_23__ETC___d1294[44:12] } ;
  assign x__h106369 =
	     ((!x__h106702[35] &&
	       (x__h106702[23] || x__h106702[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h106702[35] &&
		  (!x__h106702[23] || ~x__h106702[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h106702[23:0])) -
	     ((!x__h115587[35] &&
	       (x__h115587[23] || x__h115587[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h115587[35] &&
		  (!x__h115587[23] || ~x__h115587[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h115587[23:0])) ;
  assign x__h106702 =
	     (!x__h107048[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d665[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d665 ;
  assign x__h107048 =
	     (SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] &&
	      !SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503[23]) ?
	       -IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d651 :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d651 ;
  assign x__h107454 = mmTed_iOut - 12'd2 ;
  assign x__h107832 =
	     (!x__h108161[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d526[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d526 ;
  assign x__h108161 =
	     SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506[11] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d513 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_47_T_ETC___d512 ;
  assign x__h108189 = mmTed_iOut - 12'd1 ;
  assign x__h110639 =
	     (!x__h110968[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d619[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d619 ;
  assign x__h110968 =
	     SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573[11] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_23_T_ETC___d605 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d606 ;
  assign x__h113247 =
	     SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503[23] ?
	       -SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503 :
	       SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503 ;
  assign x__h113267 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640 ;
  assign x__h115587 =
	     (!x__h115916[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d785[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d785 ;
  assign x__h115916 =
	     (SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] &&
	      !SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692[23]) ?
	       -IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d771 :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d771 ;
  assign x__h116293 =
	     (!x__h116622[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d706[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d706 ;
  assign x__h116622 =
	     SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506[11] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_47_T_ETC___d512 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d513 ;
  assign x__h118998 =
	     (!x__h119327[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d739[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d739 ;
  assign x__h119327 =
	     SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573[11] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS__ETC___d606 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_19_BITS_23_T_ETC___d605 ;
  assign x__h121399 =
	     SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692[23] ?
	       -SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692 :
	       SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692 ;
  assign x__h121419 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760 ;
  assign x__h123419 =
	     ((!x__h123749[35] &&
	       (x__h123749[23] || x__h123749[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h123749[35] &&
		  (!x__h123749[23] || ~x__h123749[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h123749[23:0])) +
	     ((!x__h126463[35] &&
	       (x__h126463[23] || x__h126463[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h126463[35] &&
		  (!x__h126463[23] || ~x__h126463[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h126463[23:0])) ;
  assign x__h123749 =
	     (!x__h124078[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d824[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d824 ;
  assign x__h124078 =
	     (SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] &&
	      !SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d503[23]) ?
	       -IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d810 :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_m_ETC___d810 ;
  assign x__h126463 =
	     (!x__h126792[47] &&
	      IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d862[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d862 ;
  assign x__h126792 =
	     (SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] &&
	      !SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d692[23]) ?
	       -IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d848 :
	       IF_SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_m_ETC___d848 ;
  assign x__h129256 =
	     ((!x__h129586[35] &&
	       (x__h129586[23] || x__h129586[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h129586[35] &&
		  (!x__h129586[23] || ~x__h129586[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h129586[23:0])) -
	     ((!x__h138001[35] &&
	       (x__h138001[23] || x__h138001[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h138001[35] &&
		  (!x__h138001[23] || ~x__h138001[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h138001[23:0])) ;
  assign x__h129586 =
	     (!x__h129915[47] &&
	      IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d912[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d912 ;
  assign x__h129915 =
	     (SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] &&
	      !SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890[23]) ?
	       -IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d898 :
	       IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d898 ;
  assign x__h135661 =
	     SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890[23] ?
	       -SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890 :
	       SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890 ;
  assign x__h138001 =
	     (!x__h138330[47] &&
	      IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d958[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d958 ;
  assign x__h138330 =
	     (SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] &&
	      !SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936[23]) ?
	       -IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d944 :
	       IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d944 ;
  assign x__h143813 =
	     SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936[23] ?
	       -SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936 :
	       SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936 ;
  assign x__h145833 =
	     ((!x__h146163[35] &&
	       (x__h146163[23] || x__h146163[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h146163[35] &&
		  (!x__h146163[23] || ~x__h146163[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h146163[23:0])) +
	     ((!x__h148877[35] &&
	       (x__h148877[23] || x__h148877[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h148877[35] &&
		  (!x__h148877[23] || ~x__h148877[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h148877[23:0])) ;
  assign x__h146163 =
	     (!x__h146492[47] &&
	      IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d997[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d997 ;
  assign x__h146492 =
	     (SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d760[23] &&
	      !SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d890[23]) ?
	       -IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d983 :
	       IF_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ETC___d983 ;
  assign x__h148877 =
	     (!x__h149206[47] &&
	      IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1035[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1035 ;
  assign x__h149206 =
	     (SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936[23] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_19_BITS_ETC___d640[23] &&
	      !SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d936[23]) ?
	       -IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1021 :
	       IF_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ETC___d1021 ;
  assign x__h154074 = mmTed_mu + 24'd16384 ;
  assign x__h154863 = mmTed_mmVal[23] ? -mmTed_mmVal : mmTed_mmVal ;
  assign x__h159937 =
	     (SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172[12] &&
	      fpart__h159676 != 12'd0) ?
	       y_avValue_snd__h159871 :
	       fpart__h159676 ;
  assign x__h160722 =
	     (SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238[12] &&
	      fpart__h160467 != 12'd0) ?
	       y_avValue_snd__h160656 :
	       fpart__h160467 ;
  assign x_f__h153622 = mmTed_mmVal[11:0] & mmTed_limitMM_inner_reg ;
  assign x_f__h158123 = mmTed_mu[11:0] & mmTed_limitMu_inner_reg ;
  assign x_img_f__h152023 = mmTed_x[11:0] & mmTed_limitX_inner_reg ;
  assign x_img_f__h152812 = mmTed_y[11:0] & mmTed_limitY_inner_reg ;
  assign x_img_f__h87808 =
	     SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 &
	     mmTed_limitOut_inner_reg ;
  assign x_rel_f__h151628 = mmTed_x[35:24] & mmTed_limitX_inner_reg ;
  assign x_rel_f__h152401 = mmTed_y[35:24] & mmTed_limitY_inner_reg ;
  assign x_rel_f__h84225 =
	     SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 &
	     mmTed_limitOut_inner_reg ;
  assign y__h160120 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1196[44:0] +
	     digit__h159974 ;
  assign y__h160209 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1205[44:0] +
	     digit__h160063 ;
  assign y__h160298 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1214[44:0] +
	     digit__h160152 ;
  assign y__h160387 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1223[44:0] +
	     digit__h160241 ;
  assign y__h160905 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1262[44:0] +
	     digit__h160759 ;
  assign y__h160994 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1271[44:0] +
	     digit__h160848 ;
  assign y__h161083 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1280[44:0] +
	     digit__h160937 ;
  assign y__h161172 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1289[44:0] +
	     digit__h161026 ;
  assign y_avValue_snd__h159871 = 12'd0 - fpart__h159676 ;
  assign y_avValue_snd__h160656 = 12'd0 - fpart__h160467 ;
  assign y_f__h109149 =
	     (x__h108161[11] &&
	      (x__h108161[47] || x__h108161[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h112059 =
	     (x__h110968[11] &&
	      (x__h110968[47] || x__h110968[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h114097 =
	     (x__h107048[11] &&
	      (x__h107048[47] || x__h107048[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h117508 =
	     (x__h116622[11] &&
	      (x__h116622[47] || x__h116622[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h120211 =
	     (x__h119327[11] &&
	      (x__h119327[47] || x__h119327[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h122249 =
	     (x__h115916[11] &&
	      (x__h115916[47] || x__h115916[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h124973 =
	     (x__h124078[11] &&
	      (x__h124078[47] || x__h124078[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h127687 =
	     (x__h126792[11] &&
	      (x__h126792[47] || x__h126792[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h136511 =
	     (x__h129915[11] &&
	      (x__h129915[47] || x__h129915[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h144663 =
	     (x__h138330[11] &&
	      (x__h138330[47] || x__h138330[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h147387 =
	     (x__h146492[11] &&
	      (x__h146492[47] || x__h146492[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h150101 =
	     (x__h149206[11] &&
	      (x__h149206[47] || x__h149206[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h155693 =
	     (IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110[11] &&
	      (IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110[47] ||
	       IF_mmTed_mmVal_095_BIT_23_105_THEN_NEG_1228_MU_ETC___d1110[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(mmTed_n or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h159676 = mmTed_out[35:24];
      12'd1: fpart__h159676 = mmTed_out_1[35:24];
      12'd2: fpart__h159676 = mmTed_out_2[35:24];
      12'd3: fpart__h159676 = mmTed_out_3[35:24];
      12'd4: fpart__h159676 = mmTed_out_4[35:24];
      12'd5: fpart__h159676 = mmTed_out_5[35:24];
      12'd6: fpart__h159676 = mmTed_out_6[35:24];
      12'd7: fpart__h159676 = mmTed_out_7[35:24];
      12'd8: fpart__h159676 = mmTed_out_8[35:24];
      12'd9: fpart__h159676 = mmTed_out_9[35:24];
      12'd10: fpart__h159676 = mmTed_out_10[35:24];
      12'd11: fpart__h159676 = mmTed_out_11[35:24];
      12'd12: fpart__h159676 = mmTed_out_12[35:24];
      12'd13: fpart__h159676 = mmTed_out_13[35:24];
      12'd14: fpart__h159676 = mmTed_out_14[35:24];
      12'd15: fpart__h159676 = mmTed_out_15[35:24];
      12'd16: fpart__h159676 = mmTed_out_16[35:24];
      12'd17: fpart__h159676 = mmTed_out_17[35:24];
      12'd18: fpart__h159676 = mmTed_out_18[35:24];
      12'd19: fpart__h159676 = mmTed_out_19[35:24];
      12'd20: fpart__h159676 = mmTed_out_20[35:24];
      12'd21: fpart__h159676 = mmTed_out_21[35:24];
      12'd22: fpart__h159676 = mmTed_out_22[35:24];
      12'd23: fpart__h159676 = mmTed_out_23[35:24];
      12'd24: fpart__h159676 = mmTed_out_24[35:24];
      default: fpart__h159676 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h160467 = mmTed_out[11:0];
      12'd1: fpart__h160467 = mmTed_out_1[11:0];
      12'd2: fpart__h160467 = mmTed_out_2[11:0];
      12'd3: fpart__h160467 = mmTed_out_3[11:0];
      12'd4: fpart__h160467 = mmTed_out_4[11:0];
      12'd5: fpart__h160467 = mmTed_out_5[11:0];
      12'd6: fpart__h160467 = mmTed_out_6[11:0];
      12'd7: fpart__h160467 = mmTed_out_7[11:0];
      12'd8: fpart__h160467 = mmTed_out_8[11:0];
      12'd9: fpart__h160467 = mmTed_out_9[11:0];
      12'd10: fpart__h160467 = mmTed_out_10[11:0];
      12'd11: fpart__h160467 = mmTed_out_11[11:0];
      12'd12: fpart__h160467 = mmTed_out_12[11:0];
      12'd13: fpart__h160467 = mmTed_out_13[11:0];
      12'd14: fpart__h160467 = mmTed_out_14[11:0];
      12'd15: fpart__h160467 = mmTed_out_15[11:0];
      12'd16: fpart__h160467 = mmTed_out_16[11:0];
      12'd17: fpart__h160467 = mmTed_out_17[11:0];
      12'd18: fpart__h160467 = mmTed_out_18[11:0];
      12'd19: fpart__h160467 = mmTed_out_19[11:0];
      12'd20: fpart__h160467 = mmTed_out_20[11:0];
      12'd21: fpart__h160467 = mmTed_out_21[11:0];
      12'd22: fpart__h160467 = mmTed_out_22[11:0];
      12'd23: fpart__h160467 = mmTed_out_23[11:0];
      12'd24: fpart__h160467 = mmTed_out_24[11:0];
      default: fpart__h160467 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_n)
      12'd0: x_img_i__h90951 = mmTed_samples[23:12];
      12'd1: x_img_i__h90951 = mmTed_samples_1[23:12];
      12'd2: x_img_i__h90951 = mmTed_samples_2[23:12];
      12'd3: x_img_i__h90951 = mmTed_samples_3[23:12];
      12'd4: x_img_i__h90951 = mmTed_samples_4[23:12];
      12'd5: x_img_i__h90951 = mmTed_samples_5[23:12];
      12'd6: x_img_i__h90951 = mmTed_samples_6[23:12];
      12'd7: x_img_i__h90951 = mmTed_samples_7[23:12];
      12'd8: x_img_i__h90951 = mmTed_samples_8[23:12];
      12'd9: x_img_i__h90951 = mmTed_samples_9[23:12];
      12'd10: x_img_i__h90951 = mmTed_samples_10[23:12];
      12'd11: x_img_i__h90951 = mmTed_samples_11[23:12];
      12'd12: x_img_i__h90951 = mmTed_samples_12[23:12];
      12'd13: x_img_i__h90951 = mmTed_samples_13[23:12];
      12'd14: x_img_i__h90951 = mmTed_samples_14[23:12];
      12'd15: x_img_i__h90951 = mmTed_samples_15[23:12];
      12'd16: x_img_i__h90951 = mmTed_samples_16[23:12];
      12'd17: x_img_i__h90951 = mmTed_samples_17[23:12];
      12'd18: x_img_i__h90951 = mmTed_samples_18[23:12];
      12'd19: x_img_i__h90951 = mmTed_samples_19[23:12];
      12'd20: x_img_i__h90951 = mmTed_samples_20[23:12];
      12'd21: x_img_i__h90951 = mmTed_samples_21[23:12];
      12'd22: x_img_i__h90951 = mmTed_samples_22[23:12];
      12'd23: x_img_i__h90951 = mmTed_samples_23[23:12];
      12'd24: x_img_i__h90951 = mmTed_samples_24[23:12];
      default: x_img_i__h90951 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples[11:0];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
	      mmTed_samples_24[11:0];
      default: SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d223 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples[35:24];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
	      mmTed_samples_24[35:24];
      default: SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d167 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples[47:36];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
	      mmTed_samples_24[47:36];
      default: SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d140 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples[47:36];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
	      mmTed_samples_24[47:36];
      default: SEL_ARR_mmTed_samples_9_BITS_47_TO_36_0_mmTed__ETC___d246 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out[23:12];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
	      mmTed_out_24[23:12];
      default: SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d385 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out[47:36];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
	      mmTed_out_24[47:36];
      default: SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d328 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out[35:24];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
	      mmTed_out_24[35:24];
      default: SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d355 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out[11:0];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
	      mmTed_out_24[11:0];
      default: SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d412 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail[47:36];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
	      mmTed_outRail_24[47:36];
      default: SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d470 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail[47:36];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
	      mmTed_outRail_24[47:36];
      default: SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d500 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h108189 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h108189)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail[47:36];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
	      mmTed_outRail_24[47:36];
      default: SEL_ARR_mmTed_outRail_19_BITS_47_TO_36_20_mmTe_ETC___d506 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h108189 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h108189)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail[35:24];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
	      mmTed_outRail_24[35:24];
      default: SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d508 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h108189 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h108189)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail[23:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
	      mmTed_outRail_24[23:12];
      default: SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d573 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h108189 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h108189)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d601 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail[35:24];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
	      mmTed_outRail_24[35:24];
      default: SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d497 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail[35:24];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
	      mmTed_outRail_24[35:24];
      default: SEL_ARR_mmTed_outRail_19_BITS_35_TO_24_71_mmTe_ETC___d501 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail[23:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
	      mmTed_outRail_24[23:12];
      default: SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d686 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d687 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail[23:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
	      mmTed_outRail_24[23:12];
      default: SEL_ARR_mmTed_outRail_19_BITS_23_TO_12_47_mmTe_ETC___d689 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_outRail or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_19_BITS_11_TO_0_75_mmTed_ETC___d690 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out[47:36];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
	      mmTed_out_24[47:36];
      default: SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d887 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out[35:24];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
	      mmTed_out_24[35:24];
      default: SEL_ARR_mmTed_out_77_BITS_35_TO_24_29_mmTed_ou_ETC___d888 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out[23:12];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
	      mmTed_out_24[23:12];
      default: SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d933 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h107454 or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h107454)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out[11:0];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
	      mmTed_out_24[11:0];
      default: SEL_ARR_mmTed_out_77_BITS_11_TO_0_86_mmTed_out_ETC___d934 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out[47:36];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_1[47:36];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_2[47:36];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_3[47:36];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_4[47:36];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_5[47:36];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_6[47:36];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_7[47:36];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_8[47:36];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_9[47:36];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_10[47:36];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_11[47:36];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_12[47:36];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_13[47:36];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_14[47:36];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_15[47:36];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_16[47:36];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_17[47:36];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_18[47:36];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_19[47:36];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_20[47:36];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_21[47:36];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_22[47:36];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_23[47:36];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
	      mmTed_out_24[47:36];
      default: SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmTed_ou_ETC___d1171 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out[23:12];
      12'd1:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
	      mmTed_out_24[23:12];
      default: SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmTed_ou_ETC___d1237 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples[35:24];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_1[35:24];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_2[35:24];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_3[35:24];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_4[35:24];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_5[35:24];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_6[35:24];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_7[35:24];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_8[35:24];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_9[35:24];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_10[35:24];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_11[35:24];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_12[35:24];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_13[35:24];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_14[35:24];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_15[35:24];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_16[35:24];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_17[35:24];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_18[35:24];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_19[35:24];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_20[35:24];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_21[35:24];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_22[35:24];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_23[35:24];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
	      mmTed_samples_24[35:24];
      default: SEL_ARR_mmTed_samples_9_BITS_35_TO_24_41_mmTed_ETC___d247 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples[23:12];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_1[23:12];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_2[23:12];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_3[23:12];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_4[23:12];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_5[23:12];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_6[23:12];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_7[23:12];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_8[23:12];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_9[23:12];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_10[23:12];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_11[23:12];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_12[23:12];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_13[23:12];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_14[23:12];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_15[23:12];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_16[23:12];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_17[23:12];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_18[23:12];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_19[23:12];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_20[23:12];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_21[23:12];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_22[23:12];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_23[23:12];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
	      mmTed_samples_24[23:12];
      default: SEL_ARR_mmTed_samples_9_BITS_23_TO_12_70_mmTed_ETC___d248 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples[11:0];
      12'd1:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
	      mmTed_samples_24[11:0];
      default: SEL_ARR_mmTed_samples_9_BITS_11_TO_0_97_mmTed__ETC___d249 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fV <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_dummy <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_iIn <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_iOut <= `BSV_ASSIGNMENT_DELAY 12'd2;
	mmTed_limitMM_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	mmTed_limitMu_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	mmTed_limitOut_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	mmTed_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	mmTed_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY 12'hFFF;
	mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY 24'd0;
	mmTed_mu <= `BSV_ASSIGNMENT_DELAY 24'd0;
	mmTed_n <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_out <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_tedErrorCalc <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY 5'd0;
	mmTed_tedErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mmTed_x <= `BSV_ASSIGNMENT_DELAY 48'd0;
	mmTed_y <= `BSV_ASSIGNMENT_DELAY 48'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
      end
    else
      begin
        if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (mmTed_dummy$EN)
	  mmTed_dummy <= `BSV_ASSIGNMENT_DELAY mmTed_dummy$D_IN;
	if (mmTed_iIn$EN) mmTed_iIn <= `BSV_ASSIGNMENT_DELAY mmTed_iIn$D_IN;
	if (mmTed_iOut$EN)
	  mmTed_iOut <= `BSV_ASSIGNMENT_DELAY mmTed_iOut$D_IN;
	if (mmTed_limitMM_inner_reg$EN)
	  mmTed_limitMM_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_limitMM_inner_reg$D_IN;
	if (mmTed_limitMu_inner_reg$EN)
	  mmTed_limitMu_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_limitMu_inner_reg$D_IN;
	if (mmTed_limitOut_inner_reg$EN)
	  mmTed_limitOut_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_limitOut_inner_reg$D_IN;
	if (mmTed_limitX_inner_reg$EN)
	  mmTed_limitX_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_limitX_inner_reg$D_IN;
	if (mmTed_limitY_inner_reg$EN)
	  mmTed_limitY_inner_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_limitY_inner_reg$D_IN;
	if (mmTed_mmVal$EN)
	  mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY mmTed_mmVal$D_IN;
	if (mmTed_mu$EN) mmTed_mu <= `BSV_ASSIGNMENT_DELAY mmTed_mu$D_IN;
	if (mmTed_n$EN) mmTed_n <= `BSV_ASSIGNMENT_DELAY mmTed_n$D_IN;
	if (mmTed_out$EN) mmTed_out <= `BSV_ASSIGNMENT_DELAY mmTed_out$D_IN;
	if (mmTed_outRail$EN)
	  mmTed_outRail <= `BSV_ASSIGNMENT_DELAY mmTed_outRail$D_IN;
	if (mmTed_outRail_1$EN)
	  mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_1$D_IN;
	if (mmTed_outRail_10$EN)
	  mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_10$D_IN;
	if (mmTed_outRail_11$EN)
	  mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_11$D_IN;
	if (mmTed_outRail_12$EN)
	  mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_12$D_IN;
	if (mmTed_outRail_13$EN)
	  mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_13$D_IN;
	if (mmTed_outRail_14$EN)
	  mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_14$D_IN;
	if (mmTed_outRail_15$EN)
	  mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_15$D_IN;
	if (mmTed_outRail_16$EN)
	  mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_16$D_IN;
	if (mmTed_outRail_17$EN)
	  mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_17$D_IN;
	if (mmTed_outRail_18$EN)
	  mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_18$D_IN;
	if (mmTed_outRail_19$EN)
	  mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_19$D_IN;
	if (mmTed_outRail_2$EN)
	  mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_2$D_IN;
	if (mmTed_outRail_20$EN)
	  mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_20$D_IN;
	if (mmTed_outRail_21$EN)
	  mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_21$D_IN;
	if (mmTed_outRail_22$EN)
	  mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_22$D_IN;
	if (mmTed_outRail_23$EN)
	  mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_23$D_IN;
	if (mmTed_outRail_24$EN)
	  mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_24$D_IN;
	if (mmTed_outRail_3$EN)
	  mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_3$D_IN;
	if (mmTed_outRail_4$EN)
	  mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_4$D_IN;
	if (mmTed_outRail_5$EN)
	  mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_5$D_IN;
	if (mmTed_outRail_6$EN)
	  mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_6$D_IN;
	if (mmTed_outRail_7$EN)
	  mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_7$D_IN;
	if (mmTed_outRail_8$EN)
	  mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_8$D_IN;
	if (mmTed_outRail_9$EN)
	  mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_9$D_IN;
	if (mmTed_out_1$EN)
	  mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY mmTed_out_1$D_IN;
	if (mmTed_out_10$EN)
	  mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY mmTed_out_10$D_IN;
	if (mmTed_out_11$EN)
	  mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY mmTed_out_11$D_IN;
	if (mmTed_out_12$EN)
	  mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY mmTed_out_12$D_IN;
	if (mmTed_out_13$EN)
	  mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY mmTed_out_13$D_IN;
	if (mmTed_out_14$EN)
	  mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY mmTed_out_14$D_IN;
	if (mmTed_out_15$EN)
	  mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY mmTed_out_15$D_IN;
	if (mmTed_out_16$EN)
	  mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY mmTed_out_16$D_IN;
	if (mmTed_out_17$EN)
	  mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY mmTed_out_17$D_IN;
	if (mmTed_out_18$EN)
	  mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY mmTed_out_18$D_IN;
	if (mmTed_out_19$EN)
	  mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY mmTed_out_19$D_IN;
	if (mmTed_out_2$EN)
	  mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY mmTed_out_2$D_IN;
	if (mmTed_out_20$EN)
	  mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY mmTed_out_20$D_IN;
	if (mmTed_out_21$EN)
	  mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY mmTed_out_21$D_IN;
	if (mmTed_out_22$EN)
	  mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY mmTed_out_22$D_IN;
	if (mmTed_out_23$EN)
	  mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY mmTed_out_23$D_IN;
	if (mmTed_out_24$EN)
	  mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY mmTed_out_24$D_IN;
	if (mmTed_out_3$EN)
	  mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY mmTed_out_3$D_IN;
	if (mmTed_out_4$EN)
	  mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY mmTed_out_4$D_IN;
	if (mmTed_out_5$EN)
	  mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY mmTed_out_5$D_IN;
	if (mmTed_out_6$EN)
	  mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY mmTed_out_6$D_IN;
	if (mmTed_out_7$EN)
	  mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY mmTed_out_7$D_IN;
	if (mmTed_out_8$EN)
	  mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY mmTed_out_8$D_IN;
	if (mmTed_out_9$EN)
	  mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY mmTed_out_9$D_IN;
	if (mmTed_samples$EN)
	  mmTed_samples <= `BSV_ASSIGNMENT_DELAY mmTed_samples$D_IN;
	if (mmTed_samples_1$EN)
	  mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_1$D_IN;
	if (mmTed_samples_10$EN)
	  mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_10$D_IN;
	if (mmTed_samples_11$EN)
	  mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_11$D_IN;
	if (mmTed_samples_12$EN)
	  mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_12$D_IN;
	if (mmTed_samples_13$EN)
	  mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_13$D_IN;
	if (mmTed_samples_14$EN)
	  mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_14$D_IN;
	if (mmTed_samples_15$EN)
	  mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_15$D_IN;
	if (mmTed_samples_16$EN)
	  mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_16$D_IN;
	if (mmTed_samples_17$EN)
	  mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_17$D_IN;
	if (mmTed_samples_18$EN)
	  mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_18$D_IN;
	if (mmTed_samples_19$EN)
	  mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_19$D_IN;
	if (mmTed_samples_2$EN)
	  mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_2$D_IN;
	if (mmTed_samples_20$EN)
	  mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_20$D_IN;
	if (mmTed_samples_21$EN)
	  mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_21$D_IN;
	if (mmTed_samples_22$EN)
	  mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_22$D_IN;
	if (mmTed_samples_23$EN)
	  mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_23$D_IN;
	if (mmTed_samples_24$EN)
	  mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_24$D_IN;
	if (mmTed_samples_3$EN)
	  mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_3$D_IN;
	if (mmTed_samples_4$EN)
	  mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_4$D_IN;
	if (mmTed_samples_5$EN)
	  mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_5$D_IN;
	if (mmTed_samples_6$EN)
	  mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_6$D_IN;
	if (mmTed_samples_7$EN)
	  mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_7$D_IN;
	if (mmTed_samples_8$EN)
	  mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_8$D_IN;
	if (mmTed_samples_9$EN)
	  mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_9$D_IN;
	if (mmTed_tedErrorCalc$EN)
	  mmTed_tedErrorCalc <= `BSV_ASSIGNMENT_DELAY mmTed_tedErrorCalc$D_IN;
	if (mmTed_tedErrorCalc_1_1$EN)
	  mmTed_tedErrorCalc_1_1 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_1_1$D_IN;
	if (mmTed_tedErrorCalc_2_1$EN)
	  mmTed_tedErrorCalc_2_1 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_2_1$D_IN;
	if (mmTed_tedErrorCalc_3_1$EN)
	  mmTed_tedErrorCalc_3_1 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_3_1$D_IN;
	if (mmTed_tedErrorCalc_4$EN)
	  mmTed_tedErrorCalc_4 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_4$D_IN;
	if (mmTed_x$EN) mmTed_x <= `BSV_ASSIGNMENT_DELAY mmTed_x$D_IN;
	if (mmTed_y$EN) mmTed_y <= `BSV_ASSIGNMENT_DELAY mmTed_y$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fV = 24'hAAAAAA;
    inV = 12'hAAA;
    mmTed_dummy = 1'h0;
    mmTed_iIn = 12'hAAA;
    mmTed_iOut = 12'hAAA;
    mmTed_limitMM_inner_reg = 12'hAAA;
    mmTed_limitMu_inner_reg = 12'hAAA;
    mmTed_limitOut_inner_reg = 12'hAAA;
    mmTed_limitX_inner_reg = 12'hAAA;
    mmTed_limitY_inner_reg = 12'hAAA;
    mmTed_mmVal = 24'hAAAAAA;
    mmTed_mu = 24'hAAAAAA;
    mmTed_n = 12'hAAA;
    mmTed_out = 48'hAAAAAAAAAAAA;
    mmTed_outRail = 48'hAAAAAAAAAAAA;
    mmTed_outRail_1 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_10 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_11 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_12 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_13 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_14 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_15 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_16 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_17 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_18 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_19 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_2 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_20 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_21 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_22 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_23 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_24 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_3 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_4 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_5 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_6 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_7 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_8 = 48'hAAAAAAAAAAAA;
    mmTed_outRail_9 = 48'hAAAAAAAAAAAA;
    mmTed_out_1 = 48'hAAAAAAAAAAAA;
    mmTed_out_10 = 48'hAAAAAAAAAAAA;
    mmTed_out_11 = 48'hAAAAAAAAAAAA;
    mmTed_out_12 = 48'hAAAAAAAAAAAA;
    mmTed_out_13 = 48'hAAAAAAAAAAAA;
    mmTed_out_14 = 48'hAAAAAAAAAAAA;
    mmTed_out_15 = 48'hAAAAAAAAAAAA;
    mmTed_out_16 = 48'hAAAAAAAAAAAA;
    mmTed_out_17 = 48'hAAAAAAAAAAAA;
    mmTed_out_18 = 48'hAAAAAAAAAAAA;
    mmTed_out_19 = 48'hAAAAAAAAAAAA;
    mmTed_out_2 = 48'hAAAAAAAAAAAA;
    mmTed_out_20 = 48'hAAAAAAAAAAAA;
    mmTed_out_21 = 48'hAAAAAAAAAAAA;
    mmTed_out_22 = 48'hAAAAAAAAAAAA;
    mmTed_out_23 = 48'hAAAAAAAAAAAA;
    mmTed_out_24 = 48'hAAAAAAAAAAAA;
    mmTed_out_3 = 48'hAAAAAAAAAAAA;
    mmTed_out_4 = 48'hAAAAAAAAAAAA;
    mmTed_out_5 = 48'hAAAAAAAAAAAA;
    mmTed_out_6 = 48'hAAAAAAAAAAAA;
    mmTed_out_7 = 48'hAAAAAAAAAAAA;
    mmTed_out_8 = 48'hAAAAAAAAAAAA;
    mmTed_out_9 = 48'hAAAAAAAAAAAA;
    mmTed_samples = 48'hAAAAAAAAAAAA;
    mmTed_samples_1 = 48'hAAAAAAAAAAAA;
    mmTed_samples_10 = 48'hAAAAAAAAAAAA;
    mmTed_samples_11 = 48'hAAAAAAAAAAAA;
    mmTed_samples_12 = 48'hAAAAAAAAAAAA;
    mmTed_samples_13 = 48'hAAAAAAAAAAAA;
    mmTed_samples_14 = 48'hAAAAAAAAAAAA;
    mmTed_samples_15 = 48'hAAAAAAAAAAAA;
    mmTed_samples_16 = 48'hAAAAAAAAAAAA;
    mmTed_samples_17 = 48'hAAAAAAAAAAAA;
    mmTed_samples_18 = 48'hAAAAAAAAAAAA;
    mmTed_samples_19 = 48'hAAAAAAAAAAAA;
    mmTed_samples_2 = 48'hAAAAAAAAAAAA;
    mmTed_samples_20 = 48'hAAAAAAAAAAAA;
    mmTed_samples_21 = 48'hAAAAAAAAAAAA;
    mmTed_samples_22 = 48'hAAAAAAAAAAAA;
    mmTed_samples_23 = 48'hAAAAAAAAAAAA;
    mmTed_samples_24 = 48'hAAAAAAAAAAAA;
    mmTed_samples_3 = 48'hAAAAAAAAAAAA;
    mmTed_samples_4 = 48'hAAAAAAAAAAAA;
    mmTed_samples_5 = 48'hAAAAAAAAAAAA;
    mmTed_samples_6 = 48'hAAAAAAAAAAAA;
    mmTed_samples_7 = 48'hAAAAAAAAAAAA;
    mmTed_samples_8 = 48'hAAAAAAAAAAAA;
    mmTed_samples_9 = 48'hAAAAAAAAAAAA;
    mmTed_tedErrorCalc = 1'h0;
    mmTed_tedErrorCalc_1_1 = 1'h0;
    mmTed_tedErrorCalc_2_1 = 5'h0A;
    mmTed_tedErrorCalc_3_1 = 1'h0;
    mmTed_tedErrorCalc_4 = 1'h0;
    mmTed_x = 48'hAAAAAAAAAAAA;
    mmTed_y = 48'hAAAAAAAAAAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 4'hA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd6 &&
	  (WILL_FIRE_RL_action_l37c18 || WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 36, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l36c9] and\n  [RL_action_l37c18, RL_action_l39c13, RL_action_f_update_l36c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l37c18 &&
	  (WILL_FIRE_RL_action_l39c13 || state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 37, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l37c18] and\n  [RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l39c13 && state_mkFSMstate == 4'd9)
	$display("Error: \"Tb_tang.bsv\", line 39, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l39c13] and\n  [RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__322_AND_abort_wget__323_324_OR_sta_ETC___d1405 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd4 &&
	  (state_mkFSMstate == 4'd5 || state_mkFSMstate == 4'd6 ||
	   WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 33, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l33c22] and\n  [RL_action_l34c22, RL_action_f_init_l36c9, RL_action_l37c18,\n  RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd5 &&
	  (state_mkFSMstate == 4'd6 || WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 34, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l34c22] and\n  [RL_action_f_init_l36c9, RL_action_l37c18, RL_action_l39c13,\n  RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 4'd1 || state_mkFSMstate == 4'd2 ||
	   state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_l30c22, RL_action_l31c22, RL_action_l32c22, RL_action_l33c22,\n  RL_action_l34c22, RL_action_f_init_l36c9, RL_action_l37c18,\n  RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd1 &&
	  (state_mkFSMstate == 4'd2 || state_mkFSMstate == 4'd3 ||
	   state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 30, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l30c22] and\n  [RL_action_l31c22, RL_action_l32c22, RL_action_l33c22, RL_action_l34c22,\n  RL_action_f_init_l36c9, RL_action_l37c18, RL_action_l39c13,\n  RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd2 &&
	  (state_mkFSMstate == 4'd3 || state_mkFSMstate == 4'd4 ||
	   state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 31, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l31c22] and\n  [RL_action_l32c22, RL_action_l33c22, RL_action_l34c22,\n  RL_action_f_init_l36c9, RL_action_l37c18, RL_action_l39c13,\n  RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 4'd3 &&
	  (state_mkFSMstate == 4'd4 || state_mkFSMstate == 4'd5 ||
	   state_mkFSMstate == 4'd6 ||
	   WILL_FIRE_RL_action_l37c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 4'd9))
	$display("Error: \"Tb_tang.bsv\", line 32, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l32c22] and\n  [RL_action_l33c22, RL_action_l34c22, RL_action_f_init_l36c9,\n  RL_action_l37c18, RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172[12] &&
	  fpart__h159676 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172[12] &&
	  fpart__h159676 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172[12] ||
	   fpart__h159676 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_77_BITS_47_TO_36_78_mmT_ETC___d1172));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h159907);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h159974);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160063);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160152);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160241);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160330);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238[12] &&
	  fpart__h160467 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238[12] &&
	  fpart__h160467 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238[12] ||
	   fpart__h160467 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_77_BITS_23_TO_12_59_mmT_ETC___d1238));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160692);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160759);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160848);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h160937);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h161026);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44)
	$write("%0d", digit__h161115);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 &&
	  mmTed_tedErrorCalc_2_1 == 5'd23)
	$display("Error: \"MMTED.bsv\", line 72, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l72c44] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l45c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 ||
	   mmTed_tedErrorCalc_2_1 == 5'd3 ||
	   mmTed_tedErrorCalc_2_1 == 5'd4 ||
	   mmTed_tedErrorCalc_2_1 == 5'd5 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 45, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l45c9] and\n  [RL_mmTed_tedErrorCalc_action_l46c20, RL_mmTed_tedErrorCalc_action_l47c22,\n  RL_mmTed_tedErrorCalc_action_l48c20, RL_mmTed_tedErrorCalc_action_l49c20,\n  RL_mmTed_tedErrorCalc_action_f_update_l45c9,\n  RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l46c20 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 ||
	   mmTed_tedErrorCalc_2_1 == 5'd3 ||
	   mmTed_tedErrorCalc_2_1 == 5'd4 ||
	   mmTed_tedErrorCalc_2_1 == 5'd5 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 46, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l46c20] and\n  [RL_mmTed_tedErrorCalc_action_l47c22, RL_mmTed_tedErrorCalc_action_l48c20,\n  RL_mmTed_tedErrorCalc_action_l49c20,\n  RL_mmTed_tedErrorCalc_action_f_update_l45c9,\n  RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l47c22 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd3 || mmTed_tedErrorCalc_2_1 == 5'd4 ||
	   mmTed_tedErrorCalc_2_1 == 5'd5 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 47, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l47c22] and\n  [RL_mmTed_tedErrorCalc_action_l48c20, RL_mmTed_tedErrorCalc_action_l49c20,\n  RL_mmTed_tedErrorCalc_action_f_update_l45c9,\n  RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd3 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd4 || mmTed_tedErrorCalc_2_1 == 5'd5 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 48, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l48c20] and\n  [RL_mmTed_tedErrorCalc_action_l49c20,\n  RL_mmTed_tedErrorCalc_action_f_update_l45c9,\n  RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd4 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd5 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 49, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l49c20] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l45c9,\n  RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd5 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd7 ||
	   mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 45, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_update_l45c9] and\n  [RL_mmTed_tedErrorCalc_action_l52c16, RL_mmTed_tedErrorCalc_action_l53c20,\n  RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l52c16 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd7 || mmTed_tedErrorCalc_2_1 == 5'd8 ||
	   mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 52, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l52c16] and\n  [RL_mmTed_tedErrorCalc_action_l53c20, RL_mmTed_tedErrorCalc_action_l54c15,\n  RL_mmTed_tedErrorCalc_action_l55c15, RL_mmTed_tedErrorCalc_action_l58c14,\n  RL_mmTed_tedErrorCalc_action_l59c14, RL_mmTed_tedErrorCalc_action_l60c14,\n  RL_mmTed_tedErrorCalc_action_l61c14, RL_mmTed_tedErrorCalc_action_l63c19,\n  RL_mmTed_tedErrorCalc_action_l64c18, RL_mmTed_tedErrorCalc_action_l65c16,\n  RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd7 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd8 || mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 53, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l53c20] and\n  [RL_mmTed_tedErrorCalc_action_l54c15, RL_mmTed_tedErrorCalc_action_l55c15,\n  RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd8 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd9 ||
	   mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 54, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l54c15] and\n  [RL_mmTed_tedErrorCalc_action_l55c15, RL_mmTed_tedErrorCalc_action_l58c14,\n  RL_mmTed_tedErrorCalc_action_l59c14, RL_mmTed_tedErrorCalc_action_l60c14,\n  RL_mmTed_tedErrorCalc_action_l61c14, RL_mmTed_tedErrorCalc_action_l63c19,\n  RL_mmTed_tedErrorCalc_action_l64c18, RL_mmTed_tedErrorCalc_action_l65c16,\n  RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd9 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd10 ||
	   mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 55, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l55c15] and\n  [RL_mmTed_tedErrorCalc_action_l58c14, RL_mmTed_tedErrorCalc_action_l59c14,\n  RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd11 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 59, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l59c14] and\n  [RL_mmTed_tedErrorCalc_action_l60c14, RL_mmTed_tedErrorCalc_action_l61c14,\n  RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd10 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd11 ||
	   mmTed_tedErrorCalc_2_1 == 5'd12 ||
	   mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 58, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l58c14] and\n  [RL_mmTed_tedErrorCalc_action_l59c14, RL_mmTed_tedErrorCalc_action_l60c14,\n  RL_mmTed_tedErrorCalc_action_l61c14, RL_mmTed_tedErrorCalc_action_l63c19,\n  RL_mmTed_tedErrorCalc_action_l64c18, RL_mmTed_tedErrorCalc_action_l65c16,\n  RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd12 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd13 ||
	   mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 60, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l60c14] and\n  [RL_mmTed_tedErrorCalc_action_l61c14, RL_mmTed_tedErrorCalc_action_l63c19,\n  RL_mmTed_tedErrorCalc_action_l64c18, RL_mmTed_tedErrorCalc_action_l65c16,\n  RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd13 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd14 ||
	   mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 61, column 14: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l61c14] and\n  [RL_mmTed_tedErrorCalc_action_l63c19, RL_mmTed_tedErrorCalc_action_l64c18,\n  RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd14 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd15 ||
	   mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 63, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l63c19] and\n  [RL_mmTed_tedErrorCalc_action_l64c18, RL_mmTed_tedErrorCalc_action_l65c16,\n  RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd15 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd16 ||
	   mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 64, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l64c18] and\n  [RL_mmTed_tedErrorCalc_action_l65c16, RL_mmTed_tedErrorCalc_action_l66c17,\n  RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd16 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd17 ||
	   mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 65, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l65c16] and\n  [RL_mmTed_tedErrorCalc_action_l66c17, RL_mmTed_tedErrorCalc_action_l67c15,\n  RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd17 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd18 ||
	   mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 66, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l66c17] and\n  [RL_mmTed_tedErrorCalc_action_l67c15, RL_mmTed_tedErrorCalc_action_l68c15,\n  RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd18 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd19 ||
	   mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 67, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l67c15] and\n  [RL_mmTed_tedErrorCalc_action_l68c15, RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd19 &&
	  (mmTed_tedErrorCalc_2_1 == 5'd20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 68, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l68c15] and\n  [RL_mmTed_tedErrorCalc_action_l69c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_2_1 == 5'd20 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 69, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l69c18] and\n  [RL_mmTed_tedErrorCalc_action_f_init_l72c9,\n  RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l72c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l72c44 ||
	   mmTed_tedErrorCalc_2_1 == 5'd23))
	$display("Error: \"MMTED.bsv\", line 72, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l72c9] and\n  [RL_mmTed_tedErrorCalc_action_l72c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l72c9] ) fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

