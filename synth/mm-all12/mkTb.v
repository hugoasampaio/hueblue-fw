//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 13:45:41 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire mmTed_tedErrorCalc_start_wire$whas,
       mmTed_tedErrorCalc_state_set_pw$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register fV
  reg [15 : 0] fV;
  wire [15 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register mmTed_iIn
  reg [11 : 0] mmTed_iIn;
  wire [11 : 0] mmTed_iIn$D_IN;
  wire mmTed_iIn$EN;

  // register mmTed_iOut
  reg [11 : 0] mmTed_iOut;
  wire [11 : 0] mmTed_iOut$D_IN;
  wire mmTed_iOut$EN;

  // register mmTed_mmVal
  reg [15 : 0] mmTed_mmVal;
  wire [15 : 0] mmTed_mmVal$D_IN;
  wire mmTed_mmVal$EN;

  // register mmTed_mu
  reg [23 : 0] mmTed_mu;
  wire [23 : 0] mmTed_mu$D_IN;
  wire mmTed_mu$EN;

  // register mmTed_n
  reg [11 : 0] mmTed_n;
  reg [11 : 0] mmTed_n$D_IN;
  wire mmTed_n$EN;

  // register mmTed_outRail_0
  reg [31 : 0] mmTed_outRail_0;
  wire [31 : 0] mmTed_outRail_0$D_IN;
  wire mmTed_outRail_0$EN;

  // register mmTed_outRail_1
  reg [31 : 0] mmTed_outRail_1;
  wire [31 : 0] mmTed_outRail_1$D_IN;
  wire mmTed_outRail_1$EN;

  // register mmTed_outRail_10
  reg [31 : 0] mmTed_outRail_10;
  wire [31 : 0] mmTed_outRail_10$D_IN;
  wire mmTed_outRail_10$EN;

  // register mmTed_outRail_11
  reg [31 : 0] mmTed_outRail_11;
  wire [31 : 0] mmTed_outRail_11$D_IN;
  wire mmTed_outRail_11$EN;

  // register mmTed_outRail_12
  reg [31 : 0] mmTed_outRail_12;
  wire [31 : 0] mmTed_outRail_12$D_IN;
  wire mmTed_outRail_12$EN;

  // register mmTed_outRail_13
  reg [31 : 0] mmTed_outRail_13;
  wire [31 : 0] mmTed_outRail_13$D_IN;
  wire mmTed_outRail_13$EN;

  // register mmTed_outRail_14
  reg [31 : 0] mmTed_outRail_14;
  wire [31 : 0] mmTed_outRail_14$D_IN;
  wire mmTed_outRail_14$EN;

  // register mmTed_outRail_15
  reg [31 : 0] mmTed_outRail_15;
  wire [31 : 0] mmTed_outRail_15$D_IN;
  wire mmTed_outRail_15$EN;

  // register mmTed_outRail_16
  reg [31 : 0] mmTed_outRail_16;
  wire [31 : 0] mmTed_outRail_16$D_IN;
  wire mmTed_outRail_16$EN;

  // register mmTed_outRail_17
  reg [31 : 0] mmTed_outRail_17;
  wire [31 : 0] mmTed_outRail_17$D_IN;
  wire mmTed_outRail_17$EN;

  // register mmTed_outRail_18
  reg [31 : 0] mmTed_outRail_18;
  wire [31 : 0] mmTed_outRail_18$D_IN;
  wire mmTed_outRail_18$EN;

  // register mmTed_outRail_19
  reg [31 : 0] mmTed_outRail_19;
  wire [31 : 0] mmTed_outRail_19$D_IN;
  wire mmTed_outRail_19$EN;

  // register mmTed_outRail_2
  reg [31 : 0] mmTed_outRail_2;
  wire [31 : 0] mmTed_outRail_2$D_IN;
  wire mmTed_outRail_2$EN;

  // register mmTed_outRail_20
  reg [31 : 0] mmTed_outRail_20;
  wire [31 : 0] mmTed_outRail_20$D_IN;
  wire mmTed_outRail_20$EN;

  // register mmTed_outRail_21
  reg [31 : 0] mmTed_outRail_21;
  wire [31 : 0] mmTed_outRail_21$D_IN;
  wire mmTed_outRail_21$EN;

  // register mmTed_outRail_22
  reg [31 : 0] mmTed_outRail_22;
  wire [31 : 0] mmTed_outRail_22$D_IN;
  wire mmTed_outRail_22$EN;

  // register mmTed_outRail_23
  reg [31 : 0] mmTed_outRail_23;
  wire [31 : 0] mmTed_outRail_23$D_IN;
  wire mmTed_outRail_23$EN;

  // register mmTed_outRail_24
  reg [31 : 0] mmTed_outRail_24;
  wire [31 : 0] mmTed_outRail_24$D_IN;
  wire mmTed_outRail_24$EN;

  // register mmTed_outRail_3
  reg [31 : 0] mmTed_outRail_3;
  wire [31 : 0] mmTed_outRail_3$D_IN;
  wire mmTed_outRail_3$EN;

  // register mmTed_outRail_4
  reg [31 : 0] mmTed_outRail_4;
  wire [31 : 0] mmTed_outRail_4$D_IN;
  wire mmTed_outRail_4$EN;

  // register mmTed_outRail_5
  reg [31 : 0] mmTed_outRail_5;
  wire [31 : 0] mmTed_outRail_5$D_IN;
  wire mmTed_outRail_5$EN;

  // register mmTed_outRail_6
  reg [31 : 0] mmTed_outRail_6;
  wire [31 : 0] mmTed_outRail_6$D_IN;
  wire mmTed_outRail_6$EN;

  // register mmTed_outRail_7
  reg [31 : 0] mmTed_outRail_7;
  wire [31 : 0] mmTed_outRail_7$D_IN;
  wire mmTed_outRail_7$EN;

  // register mmTed_outRail_8
  reg [31 : 0] mmTed_outRail_8;
  wire [31 : 0] mmTed_outRail_8$D_IN;
  wire mmTed_outRail_8$EN;

  // register mmTed_outRail_9
  reg [31 : 0] mmTed_outRail_9;
  wire [31 : 0] mmTed_outRail_9$D_IN;
  wire mmTed_outRail_9$EN;

  // register mmTed_out_0
  reg [31 : 0] mmTed_out_0;
  wire [31 : 0] mmTed_out_0$D_IN;
  wire mmTed_out_0$EN;

  // register mmTed_out_1
  reg [31 : 0] mmTed_out_1;
  wire [31 : 0] mmTed_out_1$D_IN;
  wire mmTed_out_1$EN;

  // register mmTed_out_10
  reg [31 : 0] mmTed_out_10;
  wire [31 : 0] mmTed_out_10$D_IN;
  wire mmTed_out_10$EN;

  // register mmTed_out_11
  reg [31 : 0] mmTed_out_11;
  wire [31 : 0] mmTed_out_11$D_IN;
  wire mmTed_out_11$EN;

  // register mmTed_out_12
  reg [31 : 0] mmTed_out_12;
  wire [31 : 0] mmTed_out_12$D_IN;
  wire mmTed_out_12$EN;

  // register mmTed_out_13
  reg [31 : 0] mmTed_out_13;
  wire [31 : 0] mmTed_out_13$D_IN;
  wire mmTed_out_13$EN;

  // register mmTed_out_14
  reg [31 : 0] mmTed_out_14;
  wire [31 : 0] mmTed_out_14$D_IN;
  wire mmTed_out_14$EN;

  // register mmTed_out_15
  reg [31 : 0] mmTed_out_15;
  wire [31 : 0] mmTed_out_15$D_IN;
  wire mmTed_out_15$EN;

  // register mmTed_out_16
  reg [31 : 0] mmTed_out_16;
  wire [31 : 0] mmTed_out_16$D_IN;
  wire mmTed_out_16$EN;

  // register mmTed_out_17
  reg [31 : 0] mmTed_out_17;
  wire [31 : 0] mmTed_out_17$D_IN;
  wire mmTed_out_17$EN;

  // register mmTed_out_18
  reg [31 : 0] mmTed_out_18;
  wire [31 : 0] mmTed_out_18$D_IN;
  wire mmTed_out_18$EN;

  // register mmTed_out_19
  reg [31 : 0] mmTed_out_19;
  wire [31 : 0] mmTed_out_19$D_IN;
  wire mmTed_out_19$EN;

  // register mmTed_out_2
  reg [31 : 0] mmTed_out_2;
  wire [31 : 0] mmTed_out_2$D_IN;
  wire mmTed_out_2$EN;

  // register mmTed_out_20
  reg [31 : 0] mmTed_out_20;
  wire [31 : 0] mmTed_out_20$D_IN;
  wire mmTed_out_20$EN;

  // register mmTed_out_21
  reg [31 : 0] mmTed_out_21;
  wire [31 : 0] mmTed_out_21$D_IN;
  wire mmTed_out_21$EN;

  // register mmTed_out_22
  reg [31 : 0] mmTed_out_22;
  wire [31 : 0] mmTed_out_22$D_IN;
  wire mmTed_out_22$EN;

  // register mmTed_out_23
  reg [31 : 0] mmTed_out_23;
  wire [31 : 0] mmTed_out_23$D_IN;
  wire mmTed_out_23$EN;

  // register mmTed_out_24
  reg [31 : 0] mmTed_out_24;
  wire [31 : 0] mmTed_out_24$D_IN;
  wire mmTed_out_24$EN;

  // register mmTed_out_3
  reg [31 : 0] mmTed_out_3;
  wire [31 : 0] mmTed_out_3$D_IN;
  wire mmTed_out_3$EN;

  // register mmTed_out_4
  reg [31 : 0] mmTed_out_4;
  wire [31 : 0] mmTed_out_4$D_IN;
  wire mmTed_out_4$EN;

  // register mmTed_out_5
  reg [31 : 0] mmTed_out_5;
  wire [31 : 0] mmTed_out_5$D_IN;
  wire mmTed_out_5$EN;

  // register mmTed_out_6
  reg [31 : 0] mmTed_out_6;
  wire [31 : 0] mmTed_out_6$D_IN;
  wire mmTed_out_6$EN;

  // register mmTed_out_7
  reg [31 : 0] mmTed_out_7;
  wire [31 : 0] mmTed_out_7$D_IN;
  wire mmTed_out_7$EN;

  // register mmTed_out_8
  reg [31 : 0] mmTed_out_8;
  wire [31 : 0] mmTed_out_8$D_IN;
  wire mmTed_out_8$EN;

  // register mmTed_out_9
  reg [31 : 0] mmTed_out_9;
  wire [31 : 0] mmTed_out_9$D_IN;
  wire mmTed_out_9$EN;

  // register mmTed_samples_0
  reg [31 : 0] mmTed_samples_0;
  wire [31 : 0] mmTed_samples_0$D_IN;
  wire mmTed_samples_0$EN;

  // register mmTed_samples_1
  reg [31 : 0] mmTed_samples_1;
  wire [31 : 0] mmTed_samples_1$D_IN;
  wire mmTed_samples_1$EN;

  // register mmTed_samples_10
  reg [31 : 0] mmTed_samples_10;
  wire [31 : 0] mmTed_samples_10$D_IN;
  wire mmTed_samples_10$EN;

  // register mmTed_samples_11
  reg [31 : 0] mmTed_samples_11;
  wire [31 : 0] mmTed_samples_11$D_IN;
  wire mmTed_samples_11$EN;

  // register mmTed_samples_12
  reg [31 : 0] mmTed_samples_12;
  wire [31 : 0] mmTed_samples_12$D_IN;
  wire mmTed_samples_12$EN;

  // register mmTed_samples_13
  reg [31 : 0] mmTed_samples_13;
  wire [31 : 0] mmTed_samples_13$D_IN;
  wire mmTed_samples_13$EN;

  // register mmTed_samples_14
  reg [31 : 0] mmTed_samples_14;
  wire [31 : 0] mmTed_samples_14$D_IN;
  wire mmTed_samples_14$EN;

  // register mmTed_samples_15
  reg [31 : 0] mmTed_samples_15;
  wire [31 : 0] mmTed_samples_15$D_IN;
  wire mmTed_samples_15$EN;

  // register mmTed_samples_16
  reg [31 : 0] mmTed_samples_16;
  wire [31 : 0] mmTed_samples_16$D_IN;
  wire mmTed_samples_16$EN;

  // register mmTed_samples_17
  reg [31 : 0] mmTed_samples_17;
  wire [31 : 0] mmTed_samples_17$D_IN;
  wire mmTed_samples_17$EN;

  // register mmTed_samples_18
  reg [31 : 0] mmTed_samples_18;
  wire [31 : 0] mmTed_samples_18$D_IN;
  wire mmTed_samples_18$EN;

  // register mmTed_samples_19
  reg [31 : 0] mmTed_samples_19;
  wire [31 : 0] mmTed_samples_19$D_IN;
  wire mmTed_samples_19$EN;

  // register mmTed_samples_2
  reg [31 : 0] mmTed_samples_2;
  wire [31 : 0] mmTed_samples_2$D_IN;
  wire mmTed_samples_2$EN;

  // register mmTed_samples_20
  reg [31 : 0] mmTed_samples_20;
  wire [31 : 0] mmTed_samples_20$D_IN;
  wire mmTed_samples_20$EN;

  // register mmTed_samples_21
  reg [31 : 0] mmTed_samples_21;
  wire [31 : 0] mmTed_samples_21$D_IN;
  wire mmTed_samples_21$EN;

  // register mmTed_samples_22
  reg [31 : 0] mmTed_samples_22;
  wire [31 : 0] mmTed_samples_22$D_IN;
  wire mmTed_samples_22$EN;

  // register mmTed_samples_23
  reg [31 : 0] mmTed_samples_23;
  wire [31 : 0] mmTed_samples_23$D_IN;
  wire mmTed_samples_23$EN;

  // register mmTed_samples_24
  reg [31 : 0] mmTed_samples_24;
  wire [31 : 0] mmTed_samples_24$D_IN;
  wire mmTed_samples_24$EN;

  // register mmTed_samples_3
  reg [31 : 0] mmTed_samples_3;
  wire [31 : 0] mmTed_samples_3$D_IN;
  wire mmTed_samples_3$EN;

  // register mmTed_samples_4
  reg [31 : 0] mmTed_samples_4;
  wire [31 : 0] mmTed_samples_4$D_IN;
  wire mmTed_samples_4$EN;

  // register mmTed_samples_5
  reg [31 : 0] mmTed_samples_5;
  wire [31 : 0] mmTed_samples_5$D_IN;
  wire mmTed_samples_5$EN;

  // register mmTed_samples_6
  reg [31 : 0] mmTed_samples_6;
  wire [31 : 0] mmTed_samples_6$D_IN;
  wire mmTed_samples_6$EN;

  // register mmTed_samples_7
  reg [31 : 0] mmTed_samples_7;
  wire [31 : 0] mmTed_samples_7$D_IN;
  wire mmTed_samples_7$EN;

  // register mmTed_samples_8
  reg [31 : 0] mmTed_samples_8;
  wire [31 : 0] mmTed_samples_8$D_IN;
  wire mmTed_samples_8$EN;

  // register mmTed_samples_9
  reg [31 : 0] mmTed_samples_9;
  wire [31 : 0] mmTed_samples_9$D_IN;
  wire mmTed_samples_9$EN;

  // register mmTed_tedErrorCalc_start_reg
  reg mmTed_tedErrorCalc_start_reg;
  wire mmTed_tedErrorCalc_start_reg$D_IN, mmTed_tedErrorCalc_start_reg$EN;

  // register mmTed_tedErrorCalc_start_reg_1
  reg mmTed_tedErrorCalc_start_reg_1;
  wire mmTed_tedErrorCalc_start_reg_1$D_IN, mmTed_tedErrorCalc_start_reg_1$EN;

  // register mmTed_tedErrorCalc_state_can_overlap
  reg mmTed_tedErrorCalc_state_can_overlap;
  wire mmTed_tedErrorCalc_state_can_overlap$D_IN,
       mmTed_tedErrorCalc_state_can_overlap$EN;

  // register mmTed_tedErrorCalc_state_fired
  reg mmTed_tedErrorCalc_state_fired;
  wire mmTed_tedErrorCalc_state_fired$D_IN, mmTed_tedErrorCalc_state_fired$EN;

  // register mmTed_tedErrorCalc_state_mkFSMstate
  reg [4 : 0] mmTed_tedErrorCalc_state_mkFSMstate;
  reg [4 : 0] mmTed_tedErrorCalc_state_mkFSMstate$D_IN;
  wire mmTed_tedErrorCalc_state_mkFSMstate$EN;

  // register mmTed_x
  reg [31 : 0] mmTed_x;
  wire [31 : 0] mmTed_x$D_IN;
  wire mmTed_x$EN;

  // register mmTed_xx
  reg [31 : 0] mmTed_xx;
  wire [31 : 0] mmTed_xx$D_IN;
  wire mmTed_xx$EN;

  // register mmTed_y
  reg [31 : 0] mmTed_y;
  wire [31 : 0] mmTed_y$D_IN;
  wire mmTed_y$EN;

  // register mmTed_yy
  reg [31 : 0] mmTed_yy;
  wire [31 : 0] mmTed_yy$D_IN;
  wire mmTed_yy$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule mmTed_newSample
  wire [31 : 0] mmTed_newSample$D_IN, mmTed_newSample$D_OUT;
  wire mmTed_newSample$CLR,
       mmTed_newSample$DEQ,
       mmTed_newSample$EMPTY_N,
       mmTed_newSample$ENQ,
       mmTed_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l38c18,
       WILL_FIRE_RL_action_l39c13,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16,
       WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44,
       WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22,
       WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_mmTed_mu$write_1__VAL_1, MUX_mmTed_mu$write_1__VAL_2;
  wire [11 : 0] MUX_mmTed_n$write_1__VAL_1;
  wire [9 : 0] MUX_n$write_1__VAL_1;
  wire MUX_mmTed_n$write_1__SEL_1,
       MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588,
	       SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674,
	       SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677,
	       SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484,
	       SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488,
	       SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495,
	       SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399,
	       SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933,
	       SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342,
	       SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881,
	       fpart__h103585,
	       fpart__h104376,
	       res_f__h53801,
	       res_f__h53846;
  reg [3 : 0] SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560,
	      SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673,
	      SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676,
	      SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457,
	      SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487,
	      SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493,
	      SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206,
	      SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372,
	      SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932,
	      SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140,
	      SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315,
	      SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880,
	      res_i__h53800,
	      res_i__h53845;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1225,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1228,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1236,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1245,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1254,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1263,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1159,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1162,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1170,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1179,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1188,
		_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1197,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1165,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1231,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1174,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1240,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1183,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1249,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1192,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1258,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1201,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1267;
  wire [44 : 0] digit__h103816,
		digit__h103883,
		digit__h103972,
		digit__h104061,
		digit__h104150,
		digit__h104239,
		digit__h104601,
		digit__h104668,
		digit__h104757,
		digit__h104846,
		digit__h104935,
		digit__h105024,
		tx03881_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1,
		tx03970_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2,
		tx04059_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3,
		tx04148_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4,
		tx04237_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5,
		tx04666_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6,
		tx04755_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7,
		tx04844_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8,
		tx04933_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9,
		tx05022_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10,
		tx__h103881,
		tx__h103970,
		tx__h104059,
		tx__h104148,
		tx__h104237,
		tx__h104666,
		tx__h104755,
		tx__h104844,
		tx__h104933,
		tx__h105022,
		y__h104029,
		y__h104118,
		y__h104207,
		y__h104296,
		y__h104814,
		y__h104903,
		y__h104992,
		y__h105081;
  wire [31 : 0] IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d758,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d835,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d638,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d797,
		IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1025,
		IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d948,
		IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d897,
		IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d987,
		IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d500,
		NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d593,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_ETC___d592,
		_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_ETC___d499,
		_1228_MUL_IF_mmTed_mmVal_073_BIT_15_074_THEN_NE_ETC___d1077,
		x__h66952,
		x__h67841,
		x__h69808,
		x__h73300,
		x__h73782,
		x__h75647,
		x__h78942,
		x__h80816,
		x__h91463,
		x__h93459,
		x__h95377,
		x__h97250;
  wire [23 : 0] x__h99488;
  wire [19 : 0] IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d606,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d726,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d772,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d849,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d513,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d652,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d693,
		IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d811,
		IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1039,
		IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d962,
		IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d1001,
		IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d911,
		IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1091,
		x__h66718,
		x__h67624,
		x__h69591,
		x__h73083,
		x__h73565,
		x__h75430,
		x__h78725,
		x__h80599,
		x__h91246,
		x__h93242,
		x__h95160,
		x__h97033;
  wire [15 : 0] IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627,
		IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747,
		SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679,
		SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490,
		SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935,
		SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883,
		x__h100075,
		x__h66497,
		x__h71471,
		x__h71491,
		x__h77103,
		x__h77123,
		x__h78507,
		x__h91028,
		x__h91631,
		x__h93539,
		x__h93559,
		x__h94942,
		x__h97315;
  wire [11 : 0] in2_f__h99520,
		in2_i__h99519,
		x__h103846,
		x__h104631,
		x__h67358,
		x__h67869,
		y_avValue_snd__h103780,
		y_avValue_snd__h104565,
		y_f__h100681,
		y_f__h68605,
		y_f__h70675,
		y_f__h72097,
		y_f__h74444,
		y_f__h76307,
		y_f__h77729,
		y_f__h79613,
		y_f__h81487,
		y_f__h92256,
		y_f__h94164,
		y_f__h96047,
		y_f__h97920;
  wire [4 : 0] SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207,
	       SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141;
  wire [3 : 0] imagA_i__h66117, realA_i__h65907, x__h99522;
  wire abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363,
       mmTed_iIn_2_PLUS_16_3_ULT_24___d94,
       mmTed_iOut_7_ULT_24___d91,
       mmTed_n_6_ULT_24___d51,
       mmTed_n_6_ULT_mmTed_iOut_7___d38,
       mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1283,
       n_323_ULT_10___d1324;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[23:12] ;

  // submodule mmTed_newSample
  FIFO2 #(.width(32'd32), .guarded(1'd1)) mmTed_newSample(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(mmTed_newSample$D_IN),
							  .ENQ(mmTed_newSample$ENQ),
							  .DEQ(mmTed_newSample$DEQ),
							  .CLR(mmTed_newSample$CLR),
							  .D_OUT(mmTed_newSample$D_OUT),
							  .FULL_N(mmTed_newSample$FULL_N),
							  .EMPTY_N(mmTed_newSample$EMPTY_N));

  // rule RL_action_l38c18
  assign WILL_FIRE_RL_action_l38c18 =
	     mmTed_newSample$FULL_N && n_323_ULT_10___d1324 &&
	     (state_mkFSMstate == 3'd2 || state_mkFSMstate == 3'd5) ;

  // rule RL_action_l39c13
  assign WILL_FIRE_RL_action_l39c13 =
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1283 &&
	     !mmTed_tedErrorCalc_start_reg &&
	     state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 3'd0 ||
	     !n_323_ULT_10___d1324 && start_wire$whas &&
	     state_mkFSMstate == 3'd2 ||
	     !n_323_ULT_10___d1324 && start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_323_ULT_10___d1324 && !start_wire$whas &&
	     state_mkFSMstate == 3'd2 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_323_ULT_10___d1324 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_mmTed_tedErrorCalc_action_l38c20
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 =
	     mmTed_newSample$EMPTY_N && mmTed_n_6_ULT_24___d51 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ;

  // rule RL_mmTed_tedErrorCalc_action_l39c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 =
	     mmTed_newSample$EMPTY_N &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd2 ;

  // rule RL_mmTed_tedErrorCalc_action_l57c44
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 =
	     mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd18) ;

  // rule RL_mmTed_tedErrorCalc_fsm_start
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start =
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1283 &&
	     mmTed_tedErrorCalc_start_reg ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l37c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 =
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd0 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_mmTed_tedErrorCalc_action_l42c16
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 =
	     !mmTed_n_6_ULT_24___d51 && mmTed_iOut_7_ULT_24___d91 &&
	     mmTed_iIn_2_PLUS_16_3_ULT_24___d94 &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ||
	     mmTed_iOut_7_ULT_24___d91 &&
	     mmTed_iIn_2_PLUS_16_3_ULT_24___d94 &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd15 ;

  // rule RL_mmTed_tedErrorCalc_action_f_init_l57c9
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 =
	     !mmTed_n_6_ULT_24___d51 &&
	     (!mmTed_iOut_7_ULT_24___d91 ||
	      !mmTed_iIn_2_PLUS_16_3_ULT_24___d94) &&
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd1 ||
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd4) ||
	     (!mmTed_iOut_7_ULT_24___d91 ||
	      !mmTed_iIn_2_PLUS_16_3_ULT_24___d94) &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd15 ;

  // rule RL_mmTed_tedErrorCalc_idle_l36c22
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ;

  // rule RL_mmTed_tedErrorCalc_idle_l36c22_1
  assign WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 =
	     !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	     !mmTed_tedErrorCalc_start_wire$whas &&
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd18 ;

  // inputs to muxes for submodule ports
  assign MUX_mmTed_n$write_1__SEL_1 =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ;
  assign MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_mmTed_mu$write_1__VAL_1 =
	     x__h99488 + { in2_i__h99519, in2_f__h99520 } ;
  assign MUX_mmTed_mu$write_1__VAL_2 = { 12'd0, mmTed_mu[11:0] } ;
  assign MUX_mmTed_n$write_1__VAL_1 = mmTed_n + 12'd1 ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign mmTed_tedErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_start_reg_1 &&
	     !mmTed_tedErrorCalc_state_fired ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign mmTed_tedErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 3'd4 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     WILL_FIRE_RL_action_l38c18 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register fV
  assign fV$D_IN = { fV[15:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register mmTed_iIn
  assign mmTed_iIn$D_IN = mmTed_iIn + mmTed_mu[23:12] ;
  assign mmTed_iIn$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ;

  // register mmTed_iOut
  assign mmTed_iOut$D_IN = mmTed_iOut + 12'd1 ;
  assign mmTed_iOut$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ;

  // register mmTed_mmVal
  assign mmTed_mmVal$D_IN = mmTed_y[31:16] - mmTed_x[31:16] ;
  assign mmTed_mmVal$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ;

  // register mmTed_mu
  assign mmTed_mu$D_IN =
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11) ?
	       MUX_mmTed_mu$write_1__VAL_1 :
	       MUX_mmTed_mu$write_1__VAL_2 ;
  assign mmTed_mu$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ;

  // register mmTed_n
  always@(MUX_mmTed_n$write_1__SEL_1 or
	  MUX_mmTed_n$write_1__VAL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_n$write_1__SEL_1: mmTed_n$D_IN = MUX_mmTed_n$write_1__VAL_1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9:
	  mmTed_n$D_IN = 12'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9:
	  mmTed_n$D_IN = 12'd2;
      default: mmTed_n$D_IN = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_n$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ;

  // register mmTed_outRail_0
  assign mmTed_outRail_0$D_IN =
	     { realA_i__h65907, 12'd0, imagA_i__h66117, 12'd0 } ;
  assign mmTed_outRail_0$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd0 ;

  // register mmTed_outRail_1
  assign mmTed_outRail_1$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_1$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd1 ;

  // register mmTed_outRail_10
  assign mmTed_outRail_10$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_10$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd10 ;

  // register mmTed_outRail_11
  assign mmTed_outRail_11$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_11$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd11 ;

  // register mmTed_outRail_12
  assign mmTed_outRail_12$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_12$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd12 ;

  // register mmTed_outRail_13
  assign mmTed_outRail_13$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_13$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd13 ;

  // register mmTed_outRail_14
  assign mmTed_outRail_14$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_14$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd14 ;

  // register mmTed_outRail_15
  assign mmTed_outRail_15$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_15$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd15 ;

  // register mmTed_outRail_16
  assign mmTed_outRail_16$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_16$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd16 ;

  // register mmTed_outRail_17
  assign mmTed_outRail_17$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_17$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd17 ;

  // register mmTed_outRail_18
  assign mmTed_outRail_18$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_18$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd18 ;

  // register mmTed_outRail_19
  assign mmTed_outRail_19$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_19$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd19 ;

  // register mmTed_outRail_2
  assign mmTed_outRail_2$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_2$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd2 ;

  // register mmTed_outRail_20
  assign mmTed_outRail_20$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_20$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd20 ;

  // register mmTed_outRail_21
  assign mmTed_outRail_21$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_21$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd21 ;

  // register mmTed_outRail_22
  assign mmTed_outRail_22$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_22$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd22 ;

  // register mmTed_outRail_23
  assign mmTed_outRail_23$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_23$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd23 ;

  // register mmTed_outRail_24
  assign mmTed_outRail_24$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_24$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd24 ;

  // register mmTed_outRail_3
  assign mmTed_outRail_3$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_3$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd3 ;

  // register mmTed_outRail_4
  assign mmTed_outRail_4$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_4$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd4 ;

  // register mmTed_outRail_5
  assign mmTed_outRail_5$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_5$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd5 ;

  // register mmTed_outRail_6
  assign mmTed_outRail_6$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_6$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd6 ;

  // register mmTed_outRail_7
  assign mmTed_outRail_7$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_7$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd7 ;

  // register mmTed_outRail_8
  assign mmTed_outRail_8$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_8$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd8 ;

  // register mmTed_outRail_9
  assign mmTed_outRail_9$D_IN = mmTed_outRail_0$D_IN ;
  assign mmTed_outRail_9$EN =
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	     mmTed_iOut == 12'd9 ;

  // register mmTed_out_0
  assign mmTed_out_0$D_IN =
	     { res_i__h53800, res_f__h53801, res_i__h53845, res_f__h53846 } ;
  assign mmTed_out_0$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd0 ;

  // register mmTed_out_1
  assign mmTed_out_1$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd1 ;

  // register mmTed_out_10
  assign mmTed_out_10$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd10 ;

  // register mmTed_out_11
  assign mmTed_out_11$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd11 ;

  // register mmTed_out_12
  assign mmTed_out_12$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd12 ;

  // register mmTed_out_13
  assign mmTed_out_13$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd13 ;

  // register mmTed_out_14
  assign mmTed_out_14$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd14 ;

  // register mmTed_out_15
  assign mmTed_out_15$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd15 ;

  // register mmTed_out_16
  assign mmTed_out_16$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd16 ;

  // register mmTed_out_17
  assign mmTed_out_17$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd17 ;

  // register mmTed_out_18
  assign mmTed_out_18$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd18 ;

  // register mmTed_out_19
  assign mmTed_out_19$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd19 ;

  // register mmTed_out_2
  assign mmTed_out_2$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd2 ;

  // register mmTed_out_20
  assign mmTed_out_20$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd20 ;

  // register mmTed_out_21
  assign mmTed_out_21$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd21 ;

  // register mmTed_out_22
  assign mmTed_out_22$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd22 ;

  // register mmTed_out_23
  assign mmTed_out_23$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd23 ;

  // register mmTed_out_24
  assign mmTed_out_24$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd24 ;

  // register mmTed_out_3
  assign mmTed_out_3$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd3 ;

  // register mmTed_out_4
  assign mmTed_out_4$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd4 ;

  // register mmTed_out_5
  assign mmTed_out_5$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd5 ;

  // register mmTed_out_6
  assign mmTed_out_6$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd6 ;

  // register mmTed_out_7
  assign mmTed_out_7$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd7 ;

  // register mmTed_out_8
  assign mmTed_out_8$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd8 ;

  // register mmTed_out_9
  assign mmTed_out_9$D_IN = mmTed_out_0$D_IN ;
  assign mmTed_out_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	     mmTed_iOut == 12'd9 ;

  // register mmTed_samples_0
  assign mmTed_samples_0$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_0$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd0 ;

  // register mmTed_samples_1
  assign mmTed_samples_1$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_1$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd1 ;

  // register mmTed_samples_10
  assign mmTed_samples_10$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_10$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd10 ;

  // register mmTed_samples_11
  assign mmTed_samples_11$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_11$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd11 ;

  // register mmTed_samples_12
  assign mmTed_samples_12$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_12$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd12 ;

  // register mmTed_samples_13
  assign mmTed_samples_13$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_13$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd13 ;

  // register mmTed_samples_14
  assign mmTed_samples_14$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_14$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd14 ;

  // register mmTed_samples_15
  assign mmTed_samples_15$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_15$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd15 ;

  // register mmTed_samples_16
  assign mmTed_samples_16$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_16$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd16 ;

  // register mmTed_samples_17
  assign mmTed_samples_17$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_17$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd17 ;

  // register mmTed_samples_18
  assign mmTed_samples_18$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_18$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd18 ;

  // register mmTed_samples_19
  assign mmTed_samples_19$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_19$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd19 ;

  // register mmTed_samples_2
  assign mmTed_samples_2$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_2$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd2 ;

  // register mmTed_samples_20
  assign mmTed_samples_20$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_20$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd20 ;

  // register mmTed_samples_21
  assign mmTed_samples_21$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_21$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd21 ;

  // register mmTed_samples_22
  assign mmTed_samples_22$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_22$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd22 ;

  // register mmTed_samples_23
  assign mmTed_samples_23$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_23$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd23 ;

  // register mmTed_samples_24
  assign mmTed_samples_24$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_24$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd24 ;

  // register mmTed_samples_3
  assign mmTed_samples_3$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_3$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd3 ;

  // register mmTed_samples_4
  assign mmTed_samples_4$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_4$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd4 ;

  // register mmTed_samples_5
  assign mmTed_samples_5$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_5$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd5 ;

  // register mmTed_samples_6
  assign mmTed_samples_6$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_6$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd6 ;

  // register mmTed_samples_7
  assign mmTed_samples_7$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_7$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd7 ;

  // register mmTed_samples_8
  assign mmTed_samples_8$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_8$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd8 ;

  // register mmTed_samples_9
  assign mmTed_samples_9$D_IN = mmTed_newSample$D_OUT ;
  assign mmTed_samples_9$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	     mmTed_n == 12'd9 ;

  // register mmTed_tedErrorCalc_start_reg
  assign mmTed_tedErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ;
  assign mmTed_tedErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_fsm_start ||
	     mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1283 &&
	     !mmTed_tedErrorCalc_start_reg ;

  // register mmTed_tedErrorCalc_start_reg_1
  assign mmTed_tedErrorCalc_start_reg_1$D_IN =
	     mmTed_tedErrorCalc_start_wire$whas ;
  assign mmTed_tedErrorCalc_start_reg_1$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_can_overlap
  assign mmTed_tedErrorCalc_state_can_overlap$D_IN =
	     mmTed_tedErrorCalc_state_set_pw$whas ||
	     mmTed_tedErrorCalc_state_can_overlap ;
  assign mmTed_tedErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_fired
  assign mmTed_tedErrorCalc_state_fired$D_IN =
	     mmTed_tedErrorCalc_state_set_pw$whas ;
  assign mmTed_tedErrorCalc_state_fired$EN = 1'd1 ;

  // register mmTed_tedErrorCalc_state_mkFSMstate
  always@(MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 or
	  mmTed_tedErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 or
	  WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_mmTed_tedErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd3:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd5:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd6:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd7:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd8:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd10:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd11:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd12:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd13:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd14:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      mmTed_tedErrorCalc_state_mkFSMstate == 5'd17:
	  mmTed_tedErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      default: mmTed_tedErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign mmTed_tedErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22_1 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_idle_l36c22 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	     WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	     mmTed_tedErrorCalc_state_mkFSMstate == 5'd17 ;

  // register mmTed_x
  assign mmTed_x$D_IN = mmTed_xx ;
  assign mmTed_x$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ;

  // register mmTed_xx
  assign mmTed_xx$D_IN = { x__h66497, x__h78507 } ;
  assign mmTed_xx$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ;

  // register mmTed_y
  assign mmTed_y$D_IN = { x__h91028, x__h94942 } ;
  assign mmTed_y$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ;

  // register mmTed_yy
  assign mmTed_yy$D_IN =
	     { IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627,
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747 } ;
  assign mmTed_yy$EN = mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 3'd4) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd1 ;

  // register outV
  assign outV$D_IN = mmTed_mu ;
  assign outV$EN = WILL_FIRE_RL_action_l39c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l38c18 or WILL_FIRE_RL_action_l39c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 3'd1;
      state_mkFSMstate == 3'd1: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l38c18: state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l39c13: state_mkFSMstate$D_IN = 3'd4;
      state_mkFSMstate == 3'd4: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l38c18 ||
	     WILL_FIRE_RL_action_l39c13 ||
	     state_mkFSMstate == 3'd4 ;

  // submodule mmTed_newSample
  assign mmTed_newSample$D_IN = {2{fV}} ;
  assign mmTed_newSample$ENQ = WILL_FIRE_RL_action_l38c18 ;
  assign mmTed_newSample$DEQ = WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ;
  assign mmTed_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627 =
	     ((!x__h67624[19] &&
	       (x__h67624[15] || x__h67624[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h67624[19] &&
		  (!x__h67624[15] || ~x__h67624[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h67624[15:0])) -
	     ((!x__h69591[19] &&
	       (x__h69591[15] || x__h69591[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h69591[19] &&
		  (!x__h69591[15] || ~x__h69591[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h69591[15:0])) ;
  assign IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747 =
	     ((!x__h73565[19] &&
	       (x__h73565[15] || x__h73565[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h73565[19] &&
		  (!x__h73565[15] || ~x__h73565[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h73565[15:0])) +
	     ((!x__h75430[19] &&
	       (x__h75430[15] || x__h75430[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h75430[19] &&
		  (!x__h75430[15] || ~x__h75430[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h75430[15:0])) ;
  assign IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094 =
	     (!IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079[31] &&
	      IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1091[19]) ?
	       20'd524287 :
	       IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1091 ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d606 =
	     x__h69808[31:12] + { 8'd0, y_f__h70675 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d726 =
	     x__h75647[31:12] + { 8'd0, y_f__h76307 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d758 =
	     x__h77103 * x__h77123 ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d772 =
	     x__h73300[31:12] + { 8'd0, y_f__h77729 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d835 =
	     x__h77103 * x__h71491 ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d849 =
	     x__h80816[31:12] + { 8'd0, y_f__h81487 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d513 =
	     x__h67841[31:12] + { 8'd0, y_f__h68605 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d638 =
	     x__h71471 * x__h71491 ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d652 =
	     x__h66952[31:12] + { 8'd0, y_f__h72097 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d693 =
	     x__h73782[31:12] + { 8'd0, y_f__h74444 } ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d797 =
	     x__h71471 * x__h77123 ;
  assign IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d811 =
	     x__h78942[31:12] + { 8'd0, y_f__h79613 } ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1025 =
	     x__h93539 * x__h97315 ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1039 =
	     x__h97250[31:12] + { 8'd0, y_f__h97920 } ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d948 =
	     x__h93539 * x__h93559 ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d962 =
	     x__h93459[31:12] + { 8'd0, y_f__h94164 } ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d1001 =
	     x__h95377[31:12] + { 8'd0, y_f__h96047 } ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d897 =
	     x__h91631 * x__h97315 ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d911 =
	     x__h91463[31:12] + { 8'd0, y_f__h92256 } ;
  assign IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d987 =
	     x__h91631 * x__h93559 ;
  assign IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079 =
	     mmTed_mmVal[15] ?
	       -_1228_MUL_IF_mmTed_mmVal_073_BIT_15_074_THEN_NE_ETC___d1077 :
	       _1228_MUL_IF_mmTed_mmVal_073_BIT_15_074_THEN_NE_ETC___d1077 ;
  assign IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1091 =
	     IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079[31:12] +
	     { 8'd0, y_f__h100681 } ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d500 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_ETC___d499 ;
  assign NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d593 =
	     -_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_ETC___d592 ;
  assign SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679 =
	     { SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673,
	       SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 } -
	     { SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676,
	       SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 } ;
  assign SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490 =
	     { SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457,
	       SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 } -
	     { SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487,
	       SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 } ;
  assign SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935 =
	     { SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372,
	       SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 } -
	     { SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932,
	       SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 } ;
  assign SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883 =
	     { SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315,
	       SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 } -
	     { SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880,
	       SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 } ;
  assign SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207 =
	     { SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206[3],
	       SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 } ;
  assign SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141 =
	     { SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140[3],
	       SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_ETC___d592 =
	     { 4'd0,
	       SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560[3] ?
		 -{ SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560,
		    SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 } :
		 { SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560,
		   SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_ETC___d499 =
	     { 4'd0,
	       SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493[3] ?
		 -{ SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493,
		    SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 } :
		 { SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493,
		   SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 },
	       12'd0 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1225 =
	     { 33'd0, x__h104631 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1228 =
	     { 33'd0, x__h104631 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1236 =
	     { 33'd0, x__h104631 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1245 =
	     { 33'd0, x__h104631 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1254 =
	     { 33'd0, x__h104631 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1263 =
	     { 33'd0, x__h104631 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1159 =
	     { 33'd0, x__h103846 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1162 =
	     { 33'd0, x__h103846 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1170 =
	     { 33'd0, x__h103846 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1179 =
	     { 33'd0, x__h103846 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1188 =
	     { 33'd0, x__h103846 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1197 =
	     { 33'd0, x__h103846 } * 45'd1000000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1165 =
	     45'd10 * digit__h103816 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1231 =
	     45'd10 * digit__h104601 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1174 =
	     45'd10 * y__h104029 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1240 =
	     45'd10 * y__h104814 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1183 =
	     45'd10 * y__h104118 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1249 =
	     45'd10 * y__h104903 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1192 =
	     45'd10 * y__h104207 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1258 =
	     45'd10 * y__h104992 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1201 =
	     45'd10 * y__h104296 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1267 =
	     45'd10 * y__h105081 ;
  assign _1228_MUL_IF_mmTed_mmVal_073_BIT_15_074_THEN_NE_ETC___d1077 =
	     16'd1228 * x__h100075 ;
  assign abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363 =
	     (state_mkFSMstate == 3'd0 ||
	      !n_323_ULT_10___d1324 && state_mkFSMstate == 3'd2 ||
	      !n_323_ULT_10___d1324 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign digit__h103816 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1159[15:12] } ;
  assign digit__h103883 =
	     { 41'd0,
	       tx03881_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1[3:0] } ;
  assign digit__h103972 =
	     { 41'd0,
	       tx03970_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2[3:0] } ;
  assign digit__h104061 =
	     { 41'd0,
	       tx04059_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3[3:0] } ;
  assign digit__h104150 =
	     { 41'd0,
	       tx04148_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4[3:0] } ;
  assign digit__h104239 =
	     { 41'd0,
	       tx04237_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5[3:0] } ;
  assign digit__h104601 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1225[15:12] } ;
  assign digit__h104668 =
	     { 41'd0,
	       tx04666_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6[3:0] } ;
  assign digit__h104757 =
	     { 41'd0,
	       tx04755_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7[3:0] } ;
  assign digit__h104846 =
	     { 41'd0,
	       tx04844_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8[3:0] } ;
  assign digit__h104935 =
	     { 41'd0,
	       tx04933_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9[3:0] } ;
  assign digit__h105024 =
	     { 41'd0,
	       tx05022_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10[3:0] } ;
  assign imagA_i__h66117 =
	     (({ SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372,
		 SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 } ^
	       16'h8000) <=
	      16'd32768) ?
	       4'd0 :
	       4'd1 ;
  assign in2_f__h99520 =
	     (!IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19] &&
	      (IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[15] ||
	       IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19:16] !=
	       4'd0)) ?
	       12'd4095 :
	       ((IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19] &&
		 (!IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[15] ||
		  ~IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19:16] !=
		  4'd0)) ?
		  12'd0 :
		  IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[11:0]) ;
  assign in2_i__h99519 = { {8{x__h99522[3]}}, x__h99522 } ;
  assign mmTed_iIn_2_PLUS_16_3_ULT_24___d94 = mmTed_iIn + 12'd16 < 12'd24 ;
  assign mmTed_iOut_7_ULT_24___d91 = mmTed_iOut < 12'd24 ;
  assign mmTed_n_6_ULT_24___d51 = mmTed_n < 12'd24 ;
  assign mmTed_n_6_ULT_mmTed_iOut_7___d38 = mmTed_n < mmTed_iOut ;
  assign mmTed_tedErrorCalc_abort_whas_AND_mmTed_tedErr_ETC___d1283 =
	     (mmTed_tedErrorCalc_state_mkFSMstate == 5'd0 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd16 ||
	      !mmTed_n_6_ULT_mmTed_iOut_7___d38 &&
	      mmTed_tedErrorCalc_state_mkFSMstate == 5'd18) &&
	     (!mmTed_tedErrorCalc_start_reg_1 ||
	      mmTed_tedErrorCalc_state_fired) ;
  assign n_323_ULT_10___d1324 = n < 10'd10 ;
  assign realA_i__h65907 =
	     (({ SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315,
		 SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 } ^
	       16'h8000) <=
	      16'd32768) ?
	       4'd0 :
	       4'd1 ;
  assign tx03881_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1 =
	     tx__h103881 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1165[44:0] ;
  assign tx03970_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2 =
	     tx__h103970 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1174[44:0] ;
  assign tx04059_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3 =
	     tx__h104059 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1183[44:0] ;
  assign tx04148_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4 =
	     tx__h104148 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1192[44:0] ;
  assign tx04237_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5 =
	     tx__h104237 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1201[44:0] ;
  assign tx04666_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6 =
	     tx__h104666 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1231[44:0] ;
  assign tx04755_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7 =
	     tx__h104755 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1240[44:0] ;
  assign tx04844_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8 =
	     tx__h104844 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1249[44:0] ;
  assign tx04933_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9 =
	     tx__h104933 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1258[44:0] ;
  assign tx05022_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10 =
	     tx__h105022 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1267[44:0] ;
  assign tx__h103881 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1162[44:12] } ;
  assign tx__h103970 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1170[44:12] } ;
  assign tx__h104059 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1179[44:12] } ;
  assign tx__h104148 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1188[44:12] } ;
  assign tx__h104237 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_3_ETC___d1197[44:12] } ;
  assign tx__h104666 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1228[44:12] } ;
  assign tx__h104755 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1236[44:12] } ;
  assign tx__h104844 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1245[44:12] } ;
  assign tx__h104933 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1254[44:12] } ;
  assign tx__h105022 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_mmTed_out_0_64_BITS_1_ETC___d1263[44:12] } ;
  assign x__h100075 = mmTed_mmVal[15] ? -mmTed_mmVal : mmTed_mmVal ;
  assign x__h103846 =
	     (SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141[4] &&
	      fpart__h103585 != 12'd0) ?
	       y_avValue_snd__h103780 :
	       fpart__h103585 ;
  assign x__h104631 =
	     (SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207[4] &&
	      fpart__h104376 != 12'd0) ?
	       y_avValue_snd__h104565 :
	       fpart__h104376 ;
  assign x__h66497 =
	     ((!x__h66718[19] &&
	       (x__h66718[15] || x__h66718[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h66718[19] &&
		  (!x__h66718[15] || ~x__h66718[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h66718[15:0])) -
	     ((!x__h73083[19] &&
	       (x__h73083[15] || x__h73083[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h73083[19] &&
		  (!x__h73083[15] || ~x__h73083[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h73083[15:0])) ;
  assign x__h66718 =
	     (!x__h66952[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d652[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d652 ;
  assign x__h66952 =
	     (SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627[15] &&
	      !SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d638 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d638 ;
  assign x__h67358 = mmTed_iOut - 12'd2 ;
  assign x__h67624 =
	     (!x__h67841[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d513[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d513 ;
  assign x__h67841 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493[3] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d500 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_ETC___d499 ;
  assign x__h67869 = mmTed_iOut - 12'd1 ;
  assign x__h69591 =
	     (!x__h69808[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d606[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d606 ;
  assign x__h69808 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560[3] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_ETC___d592 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d593 ;
  assign x__h71471 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490[15] ?
	       -SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490 :
	       SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490 ;
  assign x__h71491 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627[15] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627 ;
  assign x__h73083 =
	     (!x__h73300[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d772[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d772 ;
  assign x__h73300 =
	     (SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747[15] &&
	      !SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d758 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d758 ;
  assign x__h73565 =
	     (!x__h73782[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d693[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d693 ;
  assign x__h73782 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493[3] ?
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_ETC___d499 :
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d500 ;
  assign x__h75430 =
	     (!x__h75647[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d726[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d726 ;
  assign x__h75647 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560[3] ?
	       NEG_0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BIT_ETC___d593 :
	       _0_CONCAT_IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_ETC___d592 ;
  assign x__h77103 =
	     SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679[15] ?
	       -SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679 :
	       SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679 ;
  assign x__h77123 =
	     IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747[15] ?
	       -IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747 :
	       IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747 ;
  assign x__h78507 =
	     ((!x__h78725[19] &&
	       (x__h78725[15] || x__h78725[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h78725[19] &&
		  (!x__h78725[15] || ~x__h78725[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h78725[15:0])) +
	     ((!x__h80599[19] &&
	       (x__h80599[15] || x__h80599[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h80599[19] &&
		  (!x__h80599[15] || ~x__h80599[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h80599[15:0])) ;
  assign x__h78725 =
	     (!x__h78942[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d811[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d811 ;
  assign x__h78942 =
	     (SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d747[15] &&
	      !SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d490[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d797 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_ETC___d797 ;
  assign x__h80599 =
	     (!x__h80816[31] &&
	      IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d849[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d849 ;
  assign x__h80816 =
	     (SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679[15] &&
	      !IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627[15] ||
	      IF_NOT_IF_NOT_IF_SEL_ARR_mmTed_outRail_0_06_BI_ETC___d627[15] &&
	      !SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d679[15]) ?
	       -IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d835 :
	       IF_SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_ETC___d835 ;
  assign x__h91028 =
	     ((!x__h91246[19] &&
	       (x__h91246[15] || x__h91246[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h91246[19] &&
		  (!x__h91246[15] || ~x__h91246[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h91246[15:0])) -
	     ((!x__h93242[19] &&
	       (x__h93242[15] || x__h93242[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h93242[19] &&
		  (!x__h93242[15] || ~x__h93242[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h93242[15:0])) ;
  assign x__h91246 =
	     (!x__h91463[31] &&
	      IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d911[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d911 ;
  assign x__h91463 =
	     (SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883[15] &&
	      !mmTed_yy[31] ||
	      mmTed_yy[31] &&
	      !SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883[15]) ?
	       -IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d897 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d897 ;
  assign x__h91631 =
	     SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883[15] ?
	       -SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883 :
	       SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883 ;
  assign x__h93242 =
	     (!x__h93459[31] &&
	      IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d962[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d962 ;
  assign x__h93459 =
	     (SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935[15] &&
	      !mmTed_yy[15] ||
	      mmTed_yy[15] &&
	      !SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935[15]) ?
	       -IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d948 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d948 ;
  assign x__h93539 =
	     SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935[15] ?
	       -SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935 :
	       SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935 ;
  assign x__h93559 = mmTed_yy[15] ? -mmTed_yy[15:0] : mmTed_yy[15:0] ;
  assign x__h94942 =
	     ((!x__h95160[19] &&
	       (x__h95160[15] || x__h95160[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h95160[19] &&
		  (!x__h95160[15] || ~x__h95160[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h95160[15:0])) +
	     ((!x__h97033[19] &&
	       (x__h97033[15] || x__h97033[19:16] != 4'd0)) ?
		16'd32767 :
		((x__h97033[19] &&
		  (!x__h97033[15] || ~x__h97033[19:16] != 4'd0)) ?
		   16'd32768 :
		   x__h97033[15:0])) ;
  assign x__h95160 =
	     (!x__h95377[31] &&
	      IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d1001[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d1001 ;
  assign x__h95377 =
	     (SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883[15] &&
	      !mmTed_yy[15] ||
	      mmTed_yy[15] &&
	      !SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d883[15]) ?
	       -IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d987 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmT_ETC___d987 ;
  assign x__h97033 =
	     (!x__h97250[31] &&
	      IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1039[19]) ?
	       20'd524287 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1039 ;
  assign x__h97250 =
	     (SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935[15] &&
	      !mmTed_yy[31] ||
	      mmTed_yy[31] &&
	      !SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d935[15]) ?
	       -IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1025 :
	       IF_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmT_ETC___d1025 ;
  assign x__h97315 = mmTed_yy[31] ? -mmTed_yy[31:16] : mmTed_yy[31:16] ;
  assign x__h99488 = mmTed_mu + 24'd16384 ;
  assign x__h99522 =
	     (!IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19] &&
	      (IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[15] ||
	       IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19:16] !=
	       4'd0)) ?
	       4'd7 :
	       ((IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19] &&
		 (!IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[15] ||
		  ~IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[19:16] !=
		  4'd0)) ?
		  4'd8 :
		  IF_NOT_IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG__ETC___d1094[15:12]) ;
  assign y__h104029 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1165[44:0] +
	     digit__h103883 ;
  assign y__h104118 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1174[44:0] +
	     digit__h103972 ;
  assign y__h104207 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1183[44:0] +
	     digit__h104061 ;
  assign y__h104296 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1192[44:0] +
	     digit__h104150 ;
  assign y__h104814 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_mmTed_ETC___d1231[44:0] +
	     digit__h104668 ;
  assign y__h104903 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1240[44:0] +
	     digit__h104757 ;
  assign y__h104992 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1249[44:0] +
	     digit__h104846 ;
  assign y__h105081 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1258[44:0] +
	     digit__h104935 ;
  assign y_avValue_snd__h103780 = 12'd0 - fpart__h103585 ;
  assign y_avValue_snd__h104565 = 12'd0 - fpart__h104376 ;
  assign y_f__h100681 =
	     (IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079[11] &&
	      (IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079[31] ||
	       IF_mmTed_mmVal_073_BIT_15_074_THEN_NEG_1228_MU_ETC___d1079[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h68605 =
	     (x__h67841[11] && (x__h67841[31] || x__h67841[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h70675 =
	     (x__h69808[11] && (x__h69808[31] || x__h69808[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h72097 =
	     (x__h66952[11] && (x__h66952[31] || x__h66952[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h74444 =
	     (x__h73782[11] && (x__h73782[31] || x__h73782[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h76307 =
	     (x__h75647[11] && (x__h75647[31] || x__h75647[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h77729 =
	     (x__h73300[11] && (x__h73300[31] || x__h73300[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h79613 =
	     (x__h78942[11] && (x__h78942[31] || x__h78942[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h81487 =
	     (x__h80816[11] && (x__h80816[31] || x__h80816[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h92256 =
	     (x__h91463[11] && (x__h91463[31] || x__h91463[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h94164 =
	     (x__h93459[11] && (x__h93459[31] || x__h93459[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h96047 =
	     (x__h95377[11] && (x__h95377[31] || x__h95377[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h97920 =
	     (x__h97250[11] && (x__h97250[31] || x__h97250[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h103585 = mmTed_out_0[27:16];
      12'd1: fpart__h103585 = mmTed_out_1[27:16];
      12'd2: fpart__h103585 = mmTed_out_2[27:16];
      12'd3: fpart__h103585 = mmTed_out_3[27:16];
      12'd4: fpart__h103585 = mmTed_out_4[27:16];
      12'd5: fpart__h103585 = mmTed_out_5[27:16];
      12'd6: fpart__h103585 = mmTed_out_6[27:16];
      12'd7: fpart__h103585 = mmTed_out_7[27:16];
      12'd8: fpart__h103585 = mmTed_out_8[27:16];
      12'd9: fpart__h103585 = mmTed_out_9[27:16];
      12'd10: fpart__h103585 = mmTed_out_10[27:16];
      12'd11: fpart__h103585 = mmTed_out_11[27:16];
      12'd12: fpart__h103585 = mmTed_out_12[27:16];
      12'd13: fpart__h103585 = mmTed_out_13[27:16];
      12'd14: fpart__h103585 = mmTed_out_14[27:16];
      12'd15: fpart__h103585 = mmTed_out_15[27:16];
      12'd16: fpart__h103585 = mmTed_out_16[27:16];
      12'd17: fpart__h103585 = mmTed_out_17[27:16];
      12'd18: fpart__h103585 = mmTed_out_18[27:16];
      12'd19: fpart__h103585 = mmTed_out_19[27:16];
      12'd20: fpart__h103585 = mmTed_out_20[27:16];
      12'd21: fpart__h103585 = mmTed_out_21[27:16];
      12'd22: fpart__h103585 = mmTed_out_22[27:16];
      12'd23: fpart__h103585 = mmTed_out_23[27:16];
      12'd24: fpart__h103585 = mmTed_out_24[27:16];
      default: fpart__h103585 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0: fpart__h104376 = mmTed_out_0[11:0];
      12'd1: fpart__h104376 = mmTed_out_1[11:0];
      12'd2: fpart__h104376 = mmTed_out_2[11:0];
      12'd3: fpart__h104376 = mmTed_out_3[11:0];
      12'd4: fpart__h104376 = mmTed_out_4[11:0];
      12'd5: fpart__h104376 = mmTed_out_5[11:0];
      12'd6: fpart__h104376 = mmTed_out_6[11:0];
      12'd7: fpart__h104376 = mmTed_out_7[11:0];
      12'd8: fpart__h104376 = mmTed_out_8[11:0];
      12'd9: fpart__h104376 = mmTed_out_9[11:0];
      12'd10: fpart__h104376 = mmTed_out_10[11:0];
      12'd11: fpart__h104376 = mmTed_out_11[11:0];
      12'd12: fpart__h104376 = mmTed_out_12[11:0];
      12'd13: fpart__h104376 = mmTed_out_13[11:0];
      12'd14: fpart__h104376 = mmTed_out_14[11:0];
      12'd15: fpart__h104376 = mmTed_out_15[11:0];
      12'd16: fpart__h104376 = mmTed_out_16[11:0];
      12'd17: fpart__h104376 = mmTed_out_17[11:0];
      12'd18: fpart__h104376 = mmTed_out_18[11:0];
      12'd19: fpart__h104376 = mmTed_out_19[11:0];
      12'd20: fpart__h104376 = mmTed_out_20[11:0];
      12'd21: fpart__h104376 = mmTed_out_21[11:0];
      12'd22: fpart__h104376 = mmTed_out_22[11:0];
      12'd23: fpart__h104376 = mmTed_out_23[11:0];
      12'd24: fpart__h104376 = mmTed_out_24[11:0];
      default: fpart__h104376 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_i__h53800 = mmTed_samples_0[31:28];
      12'd1: res_i__h53800 = mmTed_samples_1[31:28];
      12'd2: res_i__h53800 = mmTed_samples_2[31:28];
      12'd3: res_i__h53800 = mmTed_samples_3[31:28];
      12'd4: res_i__h53800 = mmTed_samples_4[31:28];
      12'd5: res_i__h53800 = mmTed_samples_5[31:28];
      12'd6: res_i__h53800 = mmTed_samples_6[31:28];
      12'd7: res_i__h53800 = mmTed_samples_7[31:28];
      12'd8: res_i__h53800 = mmTed_samples_8[31:28];
      12'd9: res_i__h53800 = mmTed_samples_9[31:28];
      12'd10: res_i__h53800 = mmTed_samples_10[31:28];
      12'd11: res_i__h53800 = mmTed_samples_11[31:28];
      12'd12: res_i__h53800 = mmTed_samples_12[31:28];
      12'd13: res_i__h53800 = mmTed_samples_13[31:28];
      12'd14: res_i__h53800 = mmTed_samples_14[31:28];
      12'd15: res_i__h53800 = mmTed_samples_15[31:28];
      12'd16: res_i__h53800 = mmTed_samples_16[31:28];
      12'd17: res_i__h53800 = mmTed_samples_17[31:28];
      12'd18: res_i__h53800 = mmTed_samples_18[31:28];
      12'd19: res_i__h53800 = mmTed_samples_19[31:28];
      12'd20: res_i__h53800 = mmTed_samples_20[31:28];
      12'd21: res_i__h53800 = mmTed_samples_21[31:28];
      12'd22: res_i__h53800 = mmTed_samples_22[31:28];
      12'd23: res_i__h53800 = mmTed_samples_23[31:28];
      12'd24: res_i__h53800 = mmTed_samples_24[31:28];
      default: res_i__h53800 = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_f__h53801 = mmTed_samples_0[27:16];
      12'd1: res_f__h53801 = mmTed_samples_1[27:16];
      12'd2: res_f__h53801 = mmTed_samples_2[27:16];
      12'd3: res_f__h53801 = mmTed_samples_3[27:16];
      12'd4: res_f__h53801 = mmTed_samples_4[27:16];
      12'd5: res_f__h53801 = mmTed_samples_5[27:16];
      12'd6: res_f__h53801 = mmTed_samples_6[27:16];
      12'd7: res_f__h53801 = mmTed_samples_7[27:16];
      12'd8: res_f__h53801 = mmTed_samples_8[27:16];
      12'd9: res_f__h53801 = mmTed_samples_9[27:16];
      12'd10: res_f__h53801 = mmTed_samples_10[27:16];
      12'd11: res_f__h53801 = mmTed_samples_11[27:16];
      12'd12: res_f__h53801 = mmTed_samples_12[27:16];
      12'd13: res_f__h53801 = mmTed_samples_13[27:16];
      12'd14: res_f__h53801 = mmTed_samples_14[27:16];
      12'd15: res_f__h53801 = mmTed_samples_15[27:16];
      12'd16: res_f__h53801 = mmTed_samples_16[27:16];
      12'd17: res_f__h53801 = mmTed_samples_17[27:16];
      12'd18: res_f__h53801 = mmTed_samples_18[27:16];
      12'd19: res_f__h53801 = mmTed_samples_19[27:16];
      12'd20: res_f__h53801 = mmTed_samples_20[27:16];
      12'd21: res_f__h53801 = mmTed_samples_21[27:16];
      12'd22: res_f__h53801 = mmTed_samples_22[27:16];
      12'd23: res_f__h53801 = mmTed_samples_23[27:16];
      12'd24: res_f__h53801 = mmTed_samples_24[27:16];
      default: res_f__h53801 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_i__h53845 = mmTed_samples_0[15:12];
      12'd1: res_i__h53845 = mmTed_samples_1[15:12];
      12'd2: res_i__h53845 = mmTed_samples_2[15:12];
      12'd3: res_i__h53845 = mmTed_samples_3[15:12];
      12'd4: res_i__h53845 = mmTed_samples_4[15:12];
      12'd5: res_i__h53845 = mmTed_samples_5[15:12];
      12'd6: res_i__h53845 = mmTed_samples_6[15:12];
      12'd7: res_i__h53845 = mmTed_samples_7[15:12];
      12'd8: res_i__h53845 = mmTed_samples_8[15:12];
      12'd9: res_i__h53845 = mmTed_samples_9[15:12];
      12'd10: res_i__h53845 = mmTed_samples_10[15:12];
      12'd11: res_i__h53845 = mmTed_samples_11[15:12];
      12'd12: res_i__h53845 = mmTed_samples_12[15:12];
      12'd13: res_i__h53845 = mmTed_samples_13[15:12];
      12'd14: res_i__h53845 = mmTed_samples_14[15:12];
      12'd15: res_i__h53845 = mmTed_samples_15[15:12];
      12'd16: res_i__h53845 = mmTed_samples_16[15:12];
      12'd17: res_i__h53845 = mmTed_samples_17[15:12];
      12'd18: res_i__h53845 = mmTed_samples_18[15:12];
      12'd19: res_i__h53845 = mmTed_samples_19[15:12];
      12'd20: res_i__h53845 = mmTed_samples_20[15:12];
      12'd21: res_i__h53845 = mmTed_samples_21[15:12];
      12'd22: res_i__h53845 = mmTed_samples_22[15:12];
      12'd23: res_i__h53845 = mmTed_samples_23[15:12];
      12'd24: res_i__h53845 = mmTed_samples_24[15:12];
      default: res_i__h53845 = 4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iIn or
	  mmTed_samples_0 or
	  mmTed_samples_1 or
	  mmTed_samples_2 or
	  mmTed_samples_3 or
	  mmTed_samples_4 or
	  mmTed_samples_5 or
	  mmTed_samples_6 or
	  mmTed_samples_7 or
	  mmTed_samples_8 or
	  mmTed_samples_9 or
	  mmTed_samples_10 or
	  mmTed_samples_11 or
	  mmTed_samples_12 or
	  mmTed_samples_13 or
	  mmTed_samples_14 or
	  mmTed_samples_15 or
	  mmTed_samples_16 or
	  mmTed_samples_17 or
	  mmTed_samples_18 or
	  mmTed_samples_19 or
	  mmTed_samples_20 or
	  mmTed_samples_21 or
	  mmTed_samples_22 or mmTed_samples_23 or mmTed_samples_24)
  begin
    case (mmTed_iIn)
      12'd0: res_f__h53846 = mmTed_samples_0[11:0];
      12'd1: res_f__h53846 = mmTed_samples_1[11:0];
      12'd2: res_f__h53846 = mmTed_samples_2[11:0];
      12'd3: res_f__h53846 = mmTed_samples_3[11:0];
      12'd4: res_f__h53846 = mmTed_samples_4[11:0];
      12'd5: res_f__h53846 = mmTed_samples_5[11:0];
      12'd6: res_f__h53846 = mmTed_samples_6[11:0];
      12'd7: res_f__h53846 = mmTed_samples_7[11:0];
      12'd8: res_f__h53846 = mmTed_samples_8[11:0];
      12'd9: res_f__h53846 = mmTed_samples_9[11:0];
      12'd10: res_f__h53846 = mmTed_samples_10[11:0];
      12'd11: res_f__h53846 = mmTed_samples_11[11:0];
      12'd12: res_f__h53846 = mmTed_samples_12[11:0];
      12'd13: res_f__h53846 = mmTed_samples_13[11:0];
      12'd14: res_f__h53846 = mmTed_samples_14[11:0];
      12'd15: res_f__h53846 = mmTed_samples_15[11:0];
      12'd16: res_f__h53846 = mmTed_samples_16[11:0];
      12'd17: res_f__h53846 = mmTed_samples_17[11:0];
      12'd18: res_f__h53846 = mmTed_samples_18[11:0];
      12'd19: res_f__h53846 = mmTed_samples_19[11:0];
      12'd20: res_f__h53846 = mmTed_samples_20[11:0];
      12'd21: res_f__h53846 = mmTed_samples_21[11:0];
      12'd22: res_f__h53846 = mmTed_samples_22[11:0];
      12'd23: res_f__h53846 = mmTed_samples_23[11:0];
      12'd24: res_f__h53846 = mmTed_samples_24[11:0];
      default: res_f__h53846 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
	      mmTed_out_24[15:12];
      default: SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d372 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
	      mmTed_out_24[11:0];
      default: SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d399 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
	      mmTed_out_24[31:28];
      default: SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d315 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
	      mmTed_out_24[27:16];
      default: SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d342 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d457 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d487 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67869 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67869)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
	      mmTed_outRail_24[31:28];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_31_TO_28_07_mm_ETC___d493 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67869 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67869)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d495 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67869 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67869)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d560 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67869 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67869)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d588 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d484 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
	      mmTed_outRail_24[27:16];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_27_TO_16_58_mm_ETC___d488 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d673 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
	      mmTed_outRail_24[15:12];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_15_TO_12_34_mm_ETC___d676 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_iOut or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (mmTed_iOut)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d674 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_outRail_0 or
	  mmTed_outRail_1 or
	  mmTed_outRail_2 or
	  mmTed_outRail_3 or
	  mmTed_outRail_4 or
	  mmTed_outRail_5 or
	  mmTed_outRail_6 or
	  mmTed_outRail_7 or
	  mmTed_outRail_8 or
	  mmTed_outRail_9 or
	  mmTed_outRail_10 or
	  mmTed_outRail_11 or
	  mmTed_outRail_12 or
	  mmTed_outRail_13 or
	  mmTed_outRail_14 or
	  mmTed_outRail_15 or
	  mmTed_outRail_16 or
	  mmTed_outRail_17 or
	  mmTed_outRail_18 or
	  mmTed_outRail_19 or
	  mmTed_outRail_20 or
	  mmTed_outRail_21 or
	  mmTed_outRail_22 or mmTed_outRail_23 or mmTed_outRail_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
	      mmTed_outRail_24[11:0];
      default: SEL_ARR_mmTed_outRail_0_06_BITS_11_TO_0_62_mmT_ETC___d677 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
	      mmTed_out_24[31:28];
      default: SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d880 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_0[27:16];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_1[27:16];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_2[27:16];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_3[27:16];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_4[27:16];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_5[27:16];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_6[27:16];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_7[27:16];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_8[27:16];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_9[27:16];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_10[27:16];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_11[27:16];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_12[27:16];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_13[27:16];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_14[27:16];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_15[27:16];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_16[27:16];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_17[27:16];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_18[27:16];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_19[27:16];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_20[27:16];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_21[27:16];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_22[27:16];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_23[27:16];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
	      mmTed_out_24[27:16];
      default: SEL_ARR_mmTed_out_0_64_BITS_27_TO_16_16_mmTed__ETC___d881 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
	      mmTed_out_24[15:12];
      default: SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d932 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(x__h67358 or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (x__h67358)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_0[11:0];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_1[11:0];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_2[11:0];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_3[11:0];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_4[11:0];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_5[11:0];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_6[11:0];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_7[11:0];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_8[11:0];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_9[11:0];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_10[11:0];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_11[11:0];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_12[11:0];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_13[11:0];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_14[11:0];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_15[11:0];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_16[11:0];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_17[11:0];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_18[11:0];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_19[11:0];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_20[11:0];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_21[11:0];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_22[11:0];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_23[11:0];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
	      mmTed_out_24[11:0];
      default: SEL_ARR_mmTed_out_0_64_BITS_11_TO_0_73_mmTed_o_ETC___d933 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_0[31:28];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_1[31:28];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_2[31:28];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_3[31:28];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_4[31:28];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_5[31:28];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_6[31:28];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_7[31:28];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_8[31:28];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_9[31:28];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_10[31:28];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_11[31:28];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_12[31:28];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_13[31:28];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_14[31:28];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_15[31:28];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_16[31:28];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_17[31:28];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_18[31:28];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_19[31:28];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_20[31:28];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_21[31:28];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_22[31:28];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_23[31:28];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
	      mmTed_out_24[31:28];
      default: SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_mmTed__ETC___d1140 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  always@(mmTed_n or
	  mmTed_out_0 or
	  mmTed_out_1 or
	  mmTed_out_2 or
	  mmTed_out_3 or
	  mmTed_out_4 or
	  mmTed_out_5 or
	  mmTed_out_6 or
	  mmTed_out_7 or
	  mmTed_out_8 or
	  mmTed_out_9 or
	  mmTed_out_10 or
	  mmTed_out_11 or
	  mmTed_out_12 or
	  mmTed_out_13 or
	  mmTed_out_14 or
	  mmTed_out_15 or
	  mmTed_out_16 or
	  mmTed_out_17 or
	  mmTed_out_18 or
	  mmTed_out_19 or
	  mmTed_out_20 or
	  mmTed_out_21 or mmTed_out_22 or mmTed_out_23 or mmTed_out_24)
  begin
    case (mmTed_n)
      12'd0:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_0[15:12];
      12'd1:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_1[15:12];
      12'd2:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_2[15:12];
      12'd3:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_3[15:12];
      12'd4:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_4[15:12];
      12'd5:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_5[15:12];
      12'd6:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_6[15:12];
      12'd7:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_7[15:12];
      12'd8:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_8[15:12];
      12'd9:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_9[15:12];
      12'd10:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_10[15:12];
      12'd11:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_11[15:12];
      12'd12:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_12[15:12];
      12'd13:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_13[15:12];
      12'd14:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_14[15:12];
      12'd15:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_15[15:12];
      12'd16:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_16[15:12];
      12'd17:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_17[15:12];
      12'd18:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_18[15:12];
      12'd19:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_19[15:12];
      12'd20:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_20[15:12];
      12'd21:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_21[15:12];
      12'd22:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_22[15:12];
      12'd23:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_23[15:12];
      12'd24:
	  SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
	      mmTed_out_24[15:12];
      default: SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_mmTed__ETC___d1206 =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        fV <= `BSV_ASSIGNMENT_DELAY 16'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_iIn <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_iOut <= `BSV_ASSIGNMENT_DELAY 12'd2;
	mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY 16'd0;
	mmTed_mu <= `BSV_ASSIGNMENT_DELAY 24'd0;
	mmTed_n <= `BSV_ASSIGNMENT_DELAY 12'd0;
	mmTed_outRail_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_tedErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	mmTed_tedErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mmTed_tedErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	mmTed_x <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_xx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_y <= `BSV_ASSIGNMENT_DELAY 32'd0;
	mmTed_yy <= `BSV_ASSIGNMENT_DELAY 32'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (mmTed_iIn$EN) mmTed_iIn <= `BSV_ASSIGNMENT_DELAY mmTed_iIn$D_IN;
	if (mmTed_iOut$EN)
	  mmTed_iOut <= `BSV_ASSIGNMENT_DELAY mmTed_iOut$D_IN;
	if (mmTed_mmVal$EN)
	  mmTed_mmVal <= `BSV_ASSIGNMENT_DELAY mmTed_mmVal$D_IN;
	if (mmTed_mu$EN) mmTed_mu <= `BSV_ASSIGNMENT_DELAY mmTed_mu$D_IN;
	if (mmTed_n$EN) mmTed_n <= `BSV_ASSIGNMENT_DELAY mmTed_n$D_IN;
	if (mmTed_outRail_0$EN)
	  mmTed_outRail_0 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_0$D_IN;
	if (mmTed_outRail_1$EN)
	  mmTed_outRail_1 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_1$D_IN;
	if (mmTed_outRail_10$EN)
	  mmTed_outRail_10 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_10$D_IN;
	if (mmTed_outRail_11$EN)
	  mmTed_outRail_11 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_11$D_IN;
	if (mmTed_outRail_12$EN)
	  mmTed_outRail_12 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_12$D_IN;
	if (mmTed_outRail_13$EN)
	  mmTed_outRail_13 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_13$D_IN;
	if (mmTed_outRail_14$EN)
	  mmTed_outRail_14 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_14$D_IN;
	if (mmTed_outRail_15$EN)
	  mmTed_outRail_15 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_15$D_IN;
	if (mmTed_outRail_16$EN)
	  mmTed_outRail_16 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_16$D_IN;
	if (mmTed_outRail_17$EN)
	  mmTed_outRail_17 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_17$D_IN;
	if (mmTed_outRail_18$EN)
	  mmTed_outRail_18 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_18$D_IN;
	if (mmTed_outRail_19$EN)
	  mmTed_outRail_19 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_19$D_IN;
	if (mmTed_outRail_2$EN)
	  mmTed_outRail_2 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_2$D_IN;
	if (mmTed_outRail_20$EN)
	  mmTed_outRail_20 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_20$D_IN;
	if (mmTed_outRail_21$EN)
	  mmTed_outRail_21 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_21$D_IN;
	if (mmTed_outRail_22$EN)
	  mmTed_outRail_22 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_22$D_IN;
	if (mmTed_outRail_23$EN)
	  mmTed_outRail_23 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_23$D_IN;
	if (mmTed_outRail_24$EN)
	  mmTed_outRail_24 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_24$D_IN;
	if (mmTed_outRail_3$EN)
	  mmTed_outRail_3 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_3$D_IN;
	if (mmTed_outRail_4$EN)
	  mmTed_outRail_4 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_4$D_IN;
	if (mmTed_outRail_5$EN)
	  mmTed_outRail_5 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_5$D_IN;
	if (mmTed_outRail_6$EN)
	  mmTed_outRail_6 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_6$D_IN;
	if (mmTed_outRail_7$EN)
	  mmTed_outRail_7 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_7$D_IN;
	if (mmTed_outRail_8$EN)
	  mmTed_outRail_8 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_8$D_IN;
	if (mmTed_outRail_9$EN)
	  mmTed_outRail_9 <= `BSV_ASSIGNMENT_DELAY mmTed_outRail_9$D_IN;
	if (mmTed_out_0$EN)
	  mmTed_out_0 <= `BSV_ASSIGNMENT_DELAY mmTed_out_0$D_IN;
	if (mmTed_out_1$EN)
	  mmTed_out_1 <= `BSV_ASSIGNMENT_DELAY mmTed_out_1$D_IN;
	if (mmTed_out_10$EN)
	  mmTed_out_10 <= `BSV_ASSIGNMENT_DELAY mmTed_out_10$D_IN;
	if (mmTed_out_11$EN)
	  mmTed_out_11 <= `BSV_ASSIGNMENT_DELAY mmTed_out_11$D_IN;
	if (mmTed_out_12$EN)
	  mmTed_out_12 <= `BSV_ASSIGNMENT_DELAY mmTed_out_12$D_IN;
	if (mmTed_out_13$EN)
	  mmTed_out_13 <= `BSV_ASSIGNMENT_DELAY mmTed_out_13$D_IN;
	if (mmTed_out_14$EN)
	  mmTed_out_14 <= `BSV_ASSIGNMENT_DELAY mmTed_out_14$D_IN;
	if (mmTed_out_15$EN)
	  mmTed_out_15 <= `BSV_ASSIGNMENT_DELAY mmTed_out_15$D_IN;
	if (mmTed_out_16$EN)
	  mmTed_out_16 <= `BSV_ASSIGNMENT_DELAY mmTed_out_16$D_IN;
	if (mmTed_out_17$EN)
	  mmTed_out_17 <= `BSV_ASSIGNMENT_DELAY mmTed_out_17$D_IN;
	if (mmTed_out_18$EN)
	  mmTed_out_18 <= `BSV_ASSIGNMENT_DELAY mmTed_out_18$D_IN;
	if (mmTed_out_19$EN)
	  mmTed_out_19 <= `BSV_ASSIGNMENT_DELAY mmTed_out_19$D_IN;
	if (mmTed_out_2$EN)
	  mmTed_out_2 <= `BSV_ASSIGNMENT_DELAY mmTed_out_2$D_IN;
	if (mmTed_out_20$EN)
	  mmTed_out_20 <= `BSV_ASSIGNMENT_DELAY mmTed_out_20$D_IN;
	if (mmTed_out_21$EN)
	  mmTed_out_21 <= `BSV_ASSIGNMENT_DELAY mmTed_out_21$D_IN;
	if (mmTed_out_22$EN)
	  mmTed_out_22 <= `BSV_ASSIGNMENT_DELAY mmTed_out_22$D_IN;
	if (mmTed_out_23$EN)
	  mmTed_out_23 <= `BSV_ASSIGNMENT_DELAY mmTed_out_23$D_IN;
	if (mmTed_out_24$EN)
	  mmTed_out_24 <= `BSV_ASSIGNMENT_DELAY mmTed_out_24$D_IN;
	if (mmTed_out_3$EN)
	  mmTed_out_3 <= `BSV_ASSIGNMENT_DELAY mmTed_out_3$D_IN;
	if (mmTed_out_4$EN)
	  mmTed_out_4 <= `BSV_ASSIGNMENT_DELAY mmTed_out_4$D_IN;
	if (mmTed_out_5$EN)
	  mmTed_out_5 <= `BSV_ASSIGNMENT_DELAY mmTed_out_5$D_IN;
	if (mmTed_out_6$EN)
	  mmTed_out_6 <= `BSV_ASSIGNMENT_DELAY mmTed_out_6$D_IN;
	if (mmTed_out_7$EN)
	  mmTed_out_7 <= `BSV_ASSIGNMENT_DELAY mmTed_out_7$D_IN;
	if (mmTed_out_8$EN)
	  mmTed_out_8 <= `BSV_ASSIGNMENT_DELAY mmTed_out_8$D_IN;
	if (mmTed_out_9$EN)
	  mmTed_out_9 <= `BSV_ASSIGNMENT_DELAY mmTed_out_9$D_IN;
	if (mmTed_samples_0$EN)
	  mmTed_samples_0 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_0$D_IN;
	if (mmTed_samples_1$EN)
	  mmTed_samples_1 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_1$D_IN;
	if (mmTed_samples_10$EN)
	  mmTed_samples_10 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_10$D_IN;
	if (mmTed_samples_11$EN)
	  mmTed_samples_11 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_11$D_IN;
	if (mmTed_samples_12$EN)
	  mmTed_samples_12 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_12$D_IN;
	if (mmTed_samples_13$EN)
	  mmTed_samples_13 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_13$D_IN;
	if (mmTed_samples_14$EN)
	  mmTed_samples_14 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_14$D_IN;
	if (mmTed_samples_15$EN)
	  mmTed_samples_15 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_15$D_IN;
	if (mmTed_samples_16$EN)
	  mmTed_samples_16 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_16$D_IN;
	if (mmTed_samples_17$EN)
	  mmTed_samples_17 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_17$D_IN;
	if (mmTed_samples_18$EN)
	  mmTed_samples_18 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_18$D_IN;
	if (mmTed_samples_19$EN)
	  mmTed_samples_19 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_19$D_IN;
	if (mmTed_samples_2$EN)
	  mmTed_samples_2 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_2$D_IN;
	if (mmTed_samples_20$EN)
	  mmTed_samples_20 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_20$D_IN;
	if (mmTed_samples_21$EN)
	  mmTed_samples_21 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_21$D_IN;
	if (mmTed_samples_22$EN)
	  mmTed_samples_22 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_22$D_IN;
	if (mmTed_samples_23$EN)
	  mmTed_samples_23 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_23$D_IN;
	if (mmTed_samples_24$EN)
	  mmTed_samples_24 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_24$D_IN;
	if (mmTed_samples_3$EN)
	  mmTed_samples_3 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_3$D_IN;
	if (mmTed_samples_4$EN)
	  mmTed_samples_4 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_4$D_IN;
	if (mmTed_samples_5$EN)
	  mmTed_samples_5 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_5$D_IN;
	if (mmTed_samples_6$EN)
	  mmTed_samples_6 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_6$D_IN;
	if (mmTed_samples_7$EN)
	  mmTed_samples_7 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_7$D_IN;
	if (mmTed_samples_8$EN)
	  mmTed_samples_8 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_8$D_IN;
	if (mmTed_samples_9$EN)
	  mmTed_samples_9 <= `BSV_ASSIGNMENT_DELAY mmTed_samples_9$D_IN;
	if (mmTed_tedErrorCalc_start_reg$EN)
	  mmTed_tedErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_start_reg$D_IN;
	if (mmTed_tedErrorCalc_start_reg_1$EN)
	  mmTed_tedErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_start_reg_1$D_IN;
	if (mmTed_tedErrorCalc_state_can_overlap$EN)
	  mmTed_tedErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_can_overlap$D_IN;
	if (mmTed_tedErrorCalc_state_fired$EN)
	  mmTed_tedErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_fired$D_IN;
	if (mmTed_tedErrorCalc_state_mkFSMstate$EN)
	  mmTed_tedErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      mmTed_tedErrorCalc_state_mkFSMstate$D_IN;
	if (mmTed_x$EN) mmTed_x <= `BSV_ASSIGNMENT_DELAY mmTed_x$D_IN;
	if (mmTed_xx$EN) mmTed_xx <= `BSV_ASSIGNMENT_DELAY mmTed_xx$D_IN;
	if (mmTed_y$EN) mmTed_y <= `BSV_ASSIGNMENT_DELAY mmTed_y$D_IN;
	if (mmTed_yy$EN) mmTed_yy <= `BSV_ASSIGNMENT_DELAY mmTed_yy$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    fV = 16'hAAAA;
    inV = 12'hAAA;
    mmTed_iIn = 12'hAAA;
    mmTed_iOut = 12'hAAA;
    mmTed_mmVal = 16'hAAAA;
    mmTed_mu = 24'hAAAAAA;
    mmTed_n = 12'hAAA;
    mmTed_outRail_0 = 32'hAAAAAAAA;
    mmTed_outRail_1 = 32'hAAAAAAAA;
    mmTed_outRail_10 = 32'hAAAAAAAA;
    mmTed_outRail_11 = 32'hAAAAAAAA;
    mmTed_outRail_12 = 32'hAAAAAAAA;
    mmTed_outRail_13 = 32'hAAAAAAAA;
    mmTed_outRail_14 = 32'hAAAAAAAA;
    mmTed_outRail_15 = 32'hAAAAAAAA;
    mmTed_outRail_16 = 32'hAAAAAAAA;
    mmTed_outRail_17 = 32'hAAAAAAAA;
    mmTed_outRail_18 = 32'hAAAAAAAA;
    mmTed_outRail_19 = 32'hAAAAAAAA;
    mmTed_outRail_2 = 32'hAAAAAAAA;
    mmTed_outRail_20 = 32'hAAAAAAAA;
    mmTed_outRail_21 = 32'hAAAAAAAA;
    mmTed_outRail_22 = 32'hAAAAAAAA;
    mmTed_outRail_23 = 32'hAAAAAAAA;
    mmTed_outRail_24 = 32'hAAAAAAAA;
    mmTed_outRail_3 = 32'hAAAAAAAA;
    mmTed_outRail_4 = 32'hAAAAAAAA;
    mmTed_outRail_5 = 32'hAAAAAAAA;
    mmTed_outRail_6 = 32'hAAAAAAAA;
    mmTed_outRail_7 = 32'hAAAAAAAA;
    mmTed_outRail_8 = 32'hAAAAAAAA;
    mmTed_outRail_9 = 32'hAAAAAAAA;
    mmTed_out_0 = 32'hAAAAAAAA;
    mmTed_out_1 = 32'hAAAAAAAA;
    mmTed_out_10 = 32'hAAAAAAAA;
    mmTed_out_11 = 32'hAAAAAAAA;
    mmTed_out_12 = 32'hAAAAAAAA;
    mmTed_out_13 = 32'hAAAAAAAA;
    mmTed_out_14 = 32'hAAAAAAAA;
    mmTed_out_15 = 32'hAAAAAAAA;
    mmTed_out_16 = 32'hAAAAAAAA;
    mmTed_out_17 = 32'hAAAAAAAA;
    mmTed_out_18 = 32'hAAAAAAAA;
    mmTed_out_19 = 32'hAAAAAAAA;
    mmTed_out_2 = 32'hAAAAAAAA;
    mmTed_out_20 = 32'hAAAAAAAA;
    mmTed_out_21 = 32'hAAAAAAAA;
    mmTed_out_22 = 32'hAAAAAAAA;
    mmTed_out_23 = 32'hAAAAAAAA;
    mmTed_out_24 = 32'hAAAAAAAA;
    mmTed_out_3 = 32'hAAAAAAAA;
    mmTed_out_4 = 32'hAAAAAAAA;
    mmTed_out_5 = 32'hAAAAAAAA;
    mmTed_out_6 = 32'hAAAAAAAA;
    mmTed_out_7 = 32'hAAAAAAAA;
    mmTed_out_8 = 32'hAAAAAAAA;
    mmTed_out_9 = 32'hAAAAAAAA;
    mmTed_samples_0 = 32'hAAAAAAAA;
    mmTed_samples_1 = 32'hAAAAAAAA;
    mmTed_samples_10 = 32'hAAAAAAAA;
    mmTed_samples_11 = 32'hAAAAAAAA;
    mmTed_samples_12 = 32'hAAAAAAAA;
    mmTed_samples_13 = 32'hAAAAAAAA;
    mmTed_samples_14 = 32'hAAAAAAAA;
    mmTed_samples_15 = 32'hAAAAAAAA;
    mmTed_samples_16 = 32'hAAAAAAAA;
    mmTed_samples_17 = 32'hAAAAAAAA;
    mmTed_samples_18 = 32'hAAAAAAAA;
    mmTed_samples_19 = 32'hAAAAAAAA;
    mmTed_samples_2 = 32'hAAAAAAAA;
    mmTed_samples_20 = 32'hAAAAAAAA;
    mmTed_samples_21 = 32'hAAAAAAAA;
    mmTed_samples_22 = 32'hAAAAAAAA;
    mmTed_samples_23 = 32'hAAAAAAAA;
    mmTed_samples_24 = 32'hAAAAAAAA;
    mmTed_samples_3 = 32'hAAAAAAAA;
    mmTed_samples_4 = 32'hAAAAAAAA;
    mmTed_samples_5 = 32'hAAAAAAAA;
    mmTed_samples_6 = 32'hAAAAAAAA;
    mmTed_samples_7 = 32'hAAAAAAAA;
    mmTed_samples_8 = 32'hAAAAAAAA;
    mmTed_samples_9 = 32'hAAAAAAAA;
    mmTed_tedErrorCalc_start_reg = 1'h0;
    mmTed_tedErrorCalc_start_reg_1 = 1'h0;
    mmTed_tedErrorCalc_state_can_overlap = 1'h0;
    mmTed_tedErrorCalc_state_fired = 1'h0;
    mmTed_tedErrorCalc_state_mkFSMstate = 5'h0A;
    mmTed_x = 32'hAAAAAAAA;
    mmTed_xx = 32'hAAAAAAAA;
    mmTed_y = 32'hAAAAAAAA;
    mmTed_yy = 32'hAAAAAAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_action_l38c18 || WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 36, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l36c9] and\n  [RL_action_l38c18, RL_action_l39c13, RL_action_f_update_l36c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l38c18 &&
	  (WILL_FIRE_RL_action_l39c13 || state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 38, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l38c18] and\n  [RL_action_l39c13, RL_action_f_update_l36c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l39c13 && state_mkFSMstate == 3'd4)
	$display("Error: \"Tb_tang.bsv\", line 39, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l39c13] and\n  [RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 3'd1 || WILL_FIRE_RL_action_l38c18 ||
	   WILL_FIRE_RL_action_l39c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_f_init_l36c9, RL_action_l38c18, RL_action_l39c13,\n  RL_action_f_update_l36c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__291_AND_abort_wget__292_293_OR_sta_ETC___d1363 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141[4] &&
	  fpart__h103585 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141 == 5'd31)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141[4] &&
	  fpart__h103585 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141 != 5'd31)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141 +
		       5'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141[4] ||
	   fpart__h103585 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_64_BITS_31_TO_28_65_m_ETC___d1141));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h103816);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h103883);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h103972);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104061);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104150);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104239);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207[4] &&
	  fpart__h104376 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207 == 5'd31)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207[4] &&
	  fpart__h104376 != 12'd0 &&
	  SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207 != 5'd31)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207 +
		       5'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  (!SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207[4] ||
	   fpart__h104376 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_mmTed_out_0_64_BITS_15_TO_12_46_m_ETC___d1207));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104601);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104668);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104757);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104846);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h104935);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44)
	$write("%0d", digit__h105024);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 &&
	  mmTed_tedErrorCalc_state_mkFSMstate == 5'd17)
	$display("Error: \"MMTED_optimal.bsv\", line 57, column 44: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l57c44] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l37c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 37, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l37c9] and\n  [RL_mmTed_tedErrorCalc_action_l38c20, RL_mmTed_tedErrorCalc_action_l39c22,\n  RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l38c20 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 38, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l38c20] and\n  [RL_mmTed_tedErrorCalc_action_l39c22,\n  RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l39c22 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 39, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l39c22] and\n  [RL_mmTed_tedErrorCalc_action_f_update_l37c9,\n  RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd3 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 37, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_update_l37c9] and\n  [RL_mmTed_tedErrorCalc_action_l42c16, RL_mmTed_tedErrorCalc_action_l43c20,\n  RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l42c16 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 42, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l42c16] and\n  [RL_mmTed_tedErrorCalc_action_l43c20, RL_mmTed_tedErrorCalc_action_l45c16,\n  RL_mmTed_tedErrorCalc_action_l46c15, RL_mmTed_tedErrorCalc_action_l47c16,\n  RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd5 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 43, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l43c20] and\n  [RL_mmTed_tedErrorCalc_action_l45c16, RL_mmTed_tedErrorCalc_action_l46c15,\n  RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 46, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l46c15] and\n  [RL_mmTed_tedErrorCalc_action_l47c16, RL_mmTed_tedErrorCalc_action_l48c15,\n  RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd6 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd7 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 45, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l45c16] and\n  [RL_mmTed_tedErrorCalc_action_l46c15, RL_mmTed_tedErrorCalc_action_l47c16,\n  RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd8 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 47, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l47c16] and\n  [RL_mmTed_tedErrorCalc_action_l48c15, RL_mmTed_tedErrorCalc_action_l50c19,\n  RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd9 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 48, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l48c15] and\n  [RL_mmTed_tedErrorCalc_action_l50c19, RL_mmTed_tedErrorCalc_action_l51c16,\n  RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd10 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 50, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l50c19] and\n  [RL_mmTed_tedErrorCalc_action_l51c16, RL_mmTed_tedErrorCalc_action_l52c17,\n  RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd11 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 51, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l51c16] and\n  [RL_mmTed_tedErrorCalc_action_l52c17, RL_mmTed_tedErrorCalc_action_l53c15,\n  RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd12 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 52, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l52c17] and\n  [RL_mmTed_tedErrorCalc_action_l53c15, RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd13 &&
	  (mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 53, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l53c15] and\n  [RL_mmTed_tedErrorCalc_action_l54c18,\n  RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (mmTed_tedErrorCalc_state_mkFSMstate == 5'd14 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 ||
	   WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 54, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_l54c18] and\n  [RL_mmTed_tedErrorCalc_action_f_init_l57c9,\n  RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_mmTed_tedErrorCalc_action_f_init_l57c9 &&
	  (WILL_FIRE_RL_mmTed_tedErrorCalc_action_l57c44 ||
	   mmTed_tedErrorCalc_state_mkFSMstate == 5'd17))
	$display("Error: \"MMTED_optimal.bsv\", line 57, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_mmTed_tedErrorCalc_action_f_init_l57c9] and\n  [RL_mmTed_tedErrorCalc_action_l57c44,\n  RL_mmTed_tedErrorCalc_action_f_update_l57c9] ) fired in the same clock\n  cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

