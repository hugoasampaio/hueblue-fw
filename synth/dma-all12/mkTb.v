//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 14:29:04 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// IN                             O    12 reg
// OUT                            O    12 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N,

	    IN,

	    OUT);
  input  CLK;
  input  RST_N;

  // value method inM
  output [11 : 0] IN;

  // value method outM
  output [11 : 0] OUT;

  // signals for module outputs
  wire [11 : 0] IN, OUT;

  // inlined wires
  wire coarseFreq_coarseErrorCalc_start_wire$whas,
       coarseFreq_coarseErrorCalc_state_set_pw$whas,
       coarseFreq_cordic_atanCalc_start_wire$whas,
       coarseFreq_cordic_atanCalc_state_set_pw$whas,
       start_wire$whas,
       state_set_pw$whas;

  // register coarseFreq_accumError
  reg [47 : 0] coarseFreq_accumError;
  wire [47 : 0] coarseFreq_accumError$D_IN;
  wire coarseFreq_accumError$EN;

  // register coarseFreq_coarseErrorCalc_start_reg
  reg coarseFreq_coarseErrorCalc_start_reg;
  wire coarseFreq_coarseErrorCalc_start_reg$D_IN,
       coarseFreq_coarseErrorCalc_start_reg$EN;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  reg coarseFreq_coarseErrorCalc_start_reg_1;
  wire coarseFreq_coarseErrorCalc_start_reg_1$D_IN,
       coarseFreq_coarseErrorCalc_start_reg_1$EN;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  reg coarseFreq_coarseErrorCalc_state_can_overlap;
  wire coarseFreq_coarseErrorCalc_state_can_overlap$D_IN,
       coarseFreq_coarseErrorCalc_state_can_overlap$EN;

  // register coarseFreq_coarseErrorCalc_state_fired
  reg coarseFreq_coarseErrorCalc_state_fired;
  wire coarseFreq_coarseErrorCalc_state_fired$D_IN,
       coarseFreq_coarseErrorCalc_state_fired$EN;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate;
  reg [4 : 0] coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_coarseErrorCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_atanCalc_start_reg
  reg coarseFreq_cordic_atanCalc_start_reg;
  wire coarseFreq_cordic_atanCalc_start_reg$D_IN,
       coarseFreq_cordic_atanCalc_start_reg$EN;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  reg coarseFreq_cordic_atanCalc_start_reg_1;
  wire coarseFreq_cordic_atanCalc_start_reg_1$D_IN,
       coarseFreq_cordic_atanCalc_start_reg_1$EN;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  reg coarseFreq_cordic_atanCalc_state_can_overlap;
  wire coarseFreq_cordic_atanCalc_state_can_overlap$D_IN,
       coarseFreq_cordic_atanCalc_state_can_overlap$EN;

  // register coarseFreq_cordic_atanCalc_state_fired
  reg coarseFreq_cordic_atanCalc_state_fired;
  wire coarseFreq_cordic_atanCalc_state_fired$D_IN,
       coarseFreq_cordic_atanCalc_state_fired$EN;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate;
  reg [3 : 0] coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
  wire coarseFreq_cordic_atanCalc_state_mkFSMstate$EN;

  // register coarseFreq_cordic_n
  reg [3 : 0] coarseFreq_cordic_n;
  wire [3 : 0] coarseFreq_cordic_n$D_IN;
  wire coarseFreq_cordic_n$EN;

  // register coarseFreq_cordic_x_
  reg [23 : 0] coarseFreq_cordic_x_;
  reg [23 : 0] coarseFreq_cordic_x_$D_IN;
  wire coarseFreq_cordic_x_$EN;

  // register coarseFreq_cordic_y_
  reg [23 : 0] coarseFreq_cordic_y_;
  reg [23 : 0] coarseFreq_cordic_y_$D_IN;
  wire coarseFreq_cordic_y_$EN;

  // register coarseFreq_cordic_z_
  reg [23 : 0] coarseFreq_cordic_z_;
  reg [23 : 0] coarseFreq_cordic_z_$D_IN;
  wire coarseFreq_cordic_z_$EN;

  // register coarseFreq_currSample
  reg [47 : 0] coarseFreq_currSample;
  wire [47 : 0] coarseFreq_currSample$D_IN;
  wire coarseFreq_currSample$EN;

  // register coarseFreq_fsError
  reg [23 : 0] coarseFreq_fsError;
  wire [23 : 0] coarseFreq_fsError$D_IN;
  wire coarseFreq_fsError$EN;

  // register coarseFreq_lastSample
  reg [47 : 0] coarseFreq_lastSample;
  reg [47 : 0] coarseFreq_lastSample$D_IN;
  wire coarseFreq_lastSample$EN;

  // register coarseFreq_n
  reg [9 : 0] coarseFreq_n;
  wire [9 : 0] coarseFreq_n$D_IN;
  wire coarseFreq_n$EN;

  // register coarseFreq_samples_0
  reg [47 : 0] coarseFreq_samples_0;
  reg [47 : 0] coarseFreq_samples_0$D_IN;
  wire coarseFreq_samples_0$EN;

  // register coarseFreq_samples_1
  reg [47 : 0] coarseFreq_samples_1;
  reg [47 : 0] coarseFreq_samples_1$D_IN;
  wire coarseFreq_samples_1$EN;

  // register coarseFreq_samples_10
  reg [47 : 0] coarseFreq_samples_10;
  reg [47 : 0] coarseFreq_samples_10$D_IN;
  wire coarseFreq_samples_10$EN;

  // register coarseFreq_samples_11
  reg [47 : 0] coarseFreq_samples_11;
  reg [47 : 0] coarseFreq_samples_11$D_IN;
  wire coarseFreq_samples_11$EN;

  // register coarseFreq_samples_12
  reg [47 : 0] coarseFreq_samples_12;
  reg [47 : 0] coarseFreq_samples_12$D_IN;
  wire coarseFreq_samples_12$EN;

  // register coarseFreq_samples_13
  reg [47 : 0] coarseFreq_samples_13;
  reg [47 : 0] coarseFreq_samples_13$D_IN;
  wire coarseFreq_samples_13$EN;

  // register coarseFreq_samples_14
  reg [47 : 0] coarseFreq_samples_14;
  reg [47 : 0] coarseFreq_samples_14$D_IN;
  wire coarseFreq_samples_14$EN;

  // register coarseFreq_samples_15
  reg [47 : 0] coarseFreq_samples_15;
  reg [47 : 0] coarseFreq_samples_15$D_IN;
  wire coarseFreq_samples_15$EN;

  // register coarseFreq_samples_16
  reg [47 : 0] coarseFreq_samples_16;
  reg [47 : 0] coarseFreq_samples_16$D_IN;
  wire coarseFreq_samples_16$EN;

  // register coarseFreq_samples_17
  reg [47 : 0] coarseFreq_samples_17;
  reg [47 : 0] coarseFreq_samples_17$D_IN;
  wire coarseFreq_samples_17$EN;

  // register coarseFreq_samples_18
  reg [47 : 0] coarseFreq_samples_18;
  reg [47 : 0] coarseFreq_samples_18$D_IN;
  wire coarseFreq_samples_18$EN;

  // register coarseFreq_samples_19
  reg [47 : 0] coarseFreq_samples_19;
  reg [47 : 0] coarseFreq_samples_19$D_IN;
  wire coarseFreq_samples_19$EN;

  // register coarseFreq_samples_2
  reg [47 : 0] coarseFreq_samples_2;
  reg [47 : 0] coarseFreq_samples_2$D_IN;
  wire coarseFreq_samples_2$EN;

  // register coarseFreq_samples_3
  reg [47 : 0] coarseFreq_samples_3;
  reg [47 : 0] coarseFreq_samples_3$D_IN;
  wire coarseFreq_samples_3$EN;

  // register coarseFreq_samples_4
  reg [47 : 0] coarseFreq_samples_4;
  reg [47 : 0] coarseFreq_samples_4$D_IN;
  wire coarseFreq_samples_4$EN;

  // register coarseFreq_samples_5
  reg [47 : 0] coarseFreq_samples_5;
  reg [47 : 0] coarseFreq_samples_5$D_IN;
  wire coarseFreq_samples_5$EN;

  // register coarseFreq_samples_6
  reg [47 : 0] coarseFreq_samples_6;
  reg [47 : 0] coarseFreq_samples_6$D_IN;
  wire coarseFreq_samples_6$EN;

  // register coarseFreq_samples_7
  reg [47 : 0] coarseFreq_samples_7;
  reg [47 : 0] coarseFreq_samples_7$D_IN;
  wire coarseFreq_samples_7$EN;

  // register coarseFreq_samples_8
  reg [47 : 0] coarseFreq_samples_8;
  reg [47 : 0] coarseFreq_samples_8$D_IN;
  wire coarseFreq_samples_8$EN;

  // register coarseFreq_samples_9
  reg [47 : 0] coarseFreq_samples_9;
  reg [47 : 0] coarseFreq_samples_9$D_IN;
  wire coarseFreq_samples_9$EN;

  // register coarseFreq_xFix
  reg [23 : 0] coarseFreq_xFix;
  wire [23 : 0] coarseFreq_xFix$D_IN;
  wire coarseFreq_xFix$EN;

  // register coarseFreq_yFix
  reg [23 : 0] coarseFreq_yFix;
  wire [23 : 0] coarseFreq_yFix$D_IN;
  wire coarseFreq_yFix$EN;

  // register fV
  reg [23 : 0] fV;
  wire [23 : 0] fV$D_IN;
  wire fV$EN;

  // register inV
  reg [11 : 0] inV;
  wire [11 : 0] inV$D_IN;
  wire inV$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register outV
  reg [23 : 0] outV;
  wire [23 : 0] outV$D_IN;
  wire outV$EN;

  // register running
  reg running;
  wire running$D_IN, running$EN;

  // register start_reg
  reg start_reg;
  wire start_reg$D_IN, start_reg$EN;

  // register start_reg_1
  reg start_reg_1;
  wire start_reg_1$D_IN, start_reg_1$EN;

  // register state_can_overlap
  reg state_can_overlap;
  wire state_can_overlap$D_IN, state_can_overlap$EN;

  // register state_fired
  reg state_fired;
  wire state_fired$D_IN, state_fired$EN;

  // register state_mkFSMstate
  reg [2 : 0] state_mkFSMstate;
  reg [2 : 0] state_mkFSMstate$D_IN;
  wire state_mkFSMstate$EN;

  // ports of submodule coarseFreq_cordic_ix
  wire [23 : 0] coarseFreq_cordic_ix$D_IN, coarseFreq_cordic_ix$D_OUT;
  wire coarseFreq_cordic_ix$CLR,
       coarseFreq_cordic_ix$DEQ,
       coarseFreq_cordic_ix$EMPTY_N,
       coarseFreq_cordic_ix$ENQ,
       coarseFreq_cordic_ix$FULL_N;

  // ports of submodule coarseFreq_cordic_iy
  wire [23 : 0] coarseFreq_cordic_iy$D_IN, coarseFreq_cordic_iy$D_OUT;
  wire coarseFreq_cordic_iy$CLR,
       coarseFreq_cordic_iy$DEQ,
       coarseFreq_cordic_iy$EMPTY_N,
       coarseFreq_cordic_iy$ENQ,
       coarseFreq_cordic_iy$FULL_N;

  // ports of submodule coarseFreq_cordic_iz
  wire [23 : 0] coarseFreq_cordic_iz$D_IN, coarseFreq_cordic_iz$D_OUT;
  wire coarseFreq_cordic_iz$CLR,
       coarseFreq_cordic_iz$DEQ,
       coarseFreq_cordic_iz$EMPTY_N,
       coarseFreq_cordic_iz$ENQ,
       coarseFreq_cordic_iz$FULL_N;

  // ports of submodule coarseFreq_newSample
  wire [47 : 0] coarseFreq_newSample$D_IN, coarseFreq_newSample$D_OUT;
  wire coarseFreq_newSample$CLR,
       coarseFreq_newSample$DEQ,
       coarseFreq_newSample$EMPTY_N,
       coarseFreq_newSample$ENQ,
       coarseFreq_newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_action_l28c11,
       WILL_FIRE_RL_action_l40c23,
       WILL_FIRE_RL_action_l41c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22,
       WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22,
       WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1,
       WILL_FIRE_RL_fsm_start,
       WILL_FIRE_RL_idle_l27c17,
       WILL_FIRE_RL_idle_l27c17_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_coarseFreq_accumError$write_1__VAL_1,
		MUX_coarseFreq_currSample$write_1__VAL_1,
		MUX_coarseFreq_lastSample$write_1__VAL_2,
		MUX_coarseFreq_samples_0$write_1__VAL_3;
  wire [23 : 0] MUX_coarseFreq_cordic_x_$write_1__VAL_2,
		MUX_coarseFreq_cordic_x_$write_1__VAL_3,
		MUX_coarseFreq_cordic_x_$write_1__VAL_4,
		MUX_coarseFreq_cordic_y_$write_1__VAL_2,
		MUX_coarseFreq_cordic_y_$write_1__VAL_3,
		MUX_coarseFreq_cordic_y_$write_1__VAL_4,
		MUX_coarseFreq_cordic_z_$write_1__VAL_1,
		MUX_coarseFreq_cordic_z_$write_1__VAL_2,
		MUX_coarseFreq_cordic_z_$write_1__VAL_4,
		MUX_coarseFreq_fsError$write_1__VAL_1;
  wire [9 : 0] MUX_coarseFreq_n$write_1__VAL_1, MUX_n$write_1__VAL_1;
  wire [3 : 0] MUX_coarseFreq_cordic_n$write_1__VAL_1;
  wire MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_coarseFreq_n$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_1,
       MUX_coarseFreq_samples_0$write_1__SEL_2,
       MUX_coarseFreq_samples_0$write_1__SEL_3,
       MUX_coarseFreq_samples_1$write_1__SEL_1,
       MUX_coarseFreq_samples_1$write_1__SEL_2,
       MUX_coarseFreq_samples_1$write_1__SEL_3,
       MUX_coarseFreq_samples_10$write_1__SEL_1,
       MUX_coarseFreq_samples_10$write_1__SEL_2,
       MUX_coarseFreq_samples_10$write_1__SEL_3,
       MUX_coarseFreq_samples_11$write_1__SEL_1,
       MUX_coarseFreq_samples_11$write_1__SEL_2,
       MUX_coarseFreq_samples_11$write_1__SEL_3,
       MUX_coarseFreq_samples_12$write_1__SEL_1,
       MUX_coarseFreq_samples_12$write_1__SEL_2,
       MUX_coarseFreq_samples_12$write_1__SEL_3,
       MUX_coarseFreq_samples_13$write_1__SEL_1,
       MUX_coarseFreq_samples_13$write_1__SEL_2,
       MUX_coarseFreq_samples_13$write_1__SEL_3,
       MUX_coarseFreq_samples_14$write_1__SEL_1,
       MUX_coarseFreq_samples_14$write_1__SEL_2,
       MUX_coarseFreq_samples_14$write_1__SEL_3,
       MUX_coarseFreq_samples_15$write_1__SEL_1,
       MUX_coarseFreq_samples_15$write_1__SEL_2,
       MUX_coarseFreq_samples_15$write_1__SEL_3,
       MUX_coarseFreq_samples_16$write_1__SEL_1,
       MUX_coarseFreq_samples_16$write_1__SEL_2,
       MUX_coarseFreq_samples_16$write_1__SEL_3,
       MUX_coarseFreq_samples_17$write_1__SEL_1,
       MUX_coarseFreq_samples_17$write_1__SEL_2,
       MUX_coarseFreq_samples_17$write_1__SEL_3,
       MUX_coarseFreq_samples_18$write_1__SEL_1,
       MUX_coarseFreq_samples_18$write_1__SEL_2,
       MUX_coarseFreq_samples_18$write_1__SEL_3,
       MUX_coarseFreq_samples_19$write_1__SEL_1,
       MUX_coarseFreq_samples_19$write_1__SEL_2,
       MUX_coarseFreq_samples_19$write_1__SEL_3,
       MUX_coarseFreq_samples_2$write_1__SEL_1,
       MUX_coarseFreq_samples_2$write_1__SEL_2,
       MUX_coarseFreq_samples_2$write_1__SEL_3,
       MUX_coarseFreq_samples_3$write_1__SEL_1,
       MUX_coarseFreq_samples_3$write_1__SEL_2,
       MUX_coarseFreq_samples_3$write_1__SEL_3,
       MUX_coarseFreq_samples_4$write_1__SEL_1,
       MUX_coarseFreq_samples_4$write_1__SEL_2,
       MUX_coarseFreq_samples_4$write_1__SEL_3,
       MUX_coarseFreq_samples_5$write_1__SEL_1,
       MUX_coarseFreq_samples_5$write_1__SEL_2,
       MUX_coarseFreq_samples_5$write_1__SEL_3,
       MUX_coarseFreq_samples_6$write_1__SEL_1,
       MUX_coarseFreq_samples_6$write_1__SEL_2,
       MUX_coarseFreq_samples_6$write_1__SEL_3,
       MUX_coarseFreq_samples_7$write_1__SEL_1,
       MUX_coarseFreq_samples_7$write_1__SEL_2,
       MUX_coarseFreq_samples_7$write_1__SEL_3,
       MUX_coarseFreq_samples_8$write_1__SEL_1,
       MUX_coarseFreq_samples_8$write_1__SEL_2,
       MUX_coarseFreq_samples_8$write_1__SEL_3,
       MUX_coarseFreq_samples_9$write_1__SEL_1,
       MUX_coarseFreq_samples_9$write_1__SEL_2,
       MUX_coarseFreq_samples_9$write_1__SEL_3,
       MUX_start_reg$write_1__SEL_2,
       MUX_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423,
	       fpart__h427088,
	       fpart__h427874;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1473,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1476,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1484,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1493,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1502,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1511,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1537,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1540,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1548,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1557,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1566,
		_0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1575,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1479,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1543,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1488,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1552,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1497,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1561,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1506,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1570,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1515,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1579;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1010,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d916,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1211,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1288,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1164,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1250,
		IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d808,
		IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1381,
		IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172,
		IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1419,
		IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124,
		IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d598,
		IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d677,
		IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d554,
		IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d639,
		IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342,
		_25734_MUL_IF_coarseFreq_fsError_336_BIT_23_337_ETC___d1340,
		_651_MUL_IF_IF_coarseFreq_accumError_39_BIT_23__ETC___d1112,
		x__h103136,
		x__h106366,
		x__h109090,
		x__h111840,
		x__h114552,
		x__h119081,
		x__h120008,
		x__h122863,
		x__h126795,
		x__h129522,
		x__h132234,
		x__h132900,
		x__h145894,
		x__h39584,
		x__h407895,
		x__h410620,
		x__h413335,
		x__h42762,
		x__h45507;
  wire [44 : 0] digit__h427314,
		digit__h427381,
		digit__h427470,
		digit__h427559,
		digit__h427648,
		digit__h427737,
		digit__h428094,
		digit__h428161,
		digit__h428250,
		digit__h428339,
		digit__h428428,
		digit__h428517,
		tx27379_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2,
		tx27468_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3,
		tx27557_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4,
		tx27646_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5,
		tx27735_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6,
		tx28159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7,
		tx28248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8,
		tx28337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9,
		tx28426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10,
		tx28515_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11,
		tx__h427379,
		tx__h427468,
		tx__h427557,
		tx__h427646,
		tx__h427735,
		tx__h428159,
		tx__h428248,
		tx__h428337,
		tx__h428426,
		tx__h428515,
		y__h427527,
		y__h427616,
		y__h427705,
		y__h427794,
		y__h428307,
		y__h428396,
		y__h428485,
		y__h428574;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1053,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d968,
		x__h126115,
		x__h137072,
		x__h139775;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1065,
		IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d980,
		x__h125776,
		x__h139436;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1024,
		IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d930,
		IF_IF_coarseFreq_accumError_39_BIT_23_22_AND_N_ETC___d1126,
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181,
		IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398,
		IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102,
		IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436,
		IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1225,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1302,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1178,
		IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1264,
		IF_coarseFreq_accumError_39_BIT_23_22_THEN_0_C_ETC___d739,
		IF_coarseFreq_accumError_39_BIT_23_22_THEN_NEG_ETC___d857,
		IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d822,
		IF_coarseFreq_accumError_39_BIT_47_61_THEN_0_C_ETC___d778,
		IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d890,
		IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1395,
		IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99,
		IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186,
		IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1433,
		IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225,
		IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138,
		IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d612,
		IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d691,
		IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d568,
		IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d653,
		IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1354,
		IF_coarseFreq_lastSample_95_BIT_23_97_THEN_0_C_ETC___d515,
		x__h102807,
		x__h106037,
		x__h108761,
		x__h111511,
		x__h114223,
		x__h118752,
		x__h119679,
		x__h122534,
		x__h126466,
		x__h129193,
		x__h131905,
		x__h132571,
		x__h145565,
		x__h39255,
		x__h407566,
		x__h410291,
		x__h413006,
		x__h42433,
		x__h45178;
  wire [25 : 0] ax2_f__h126138;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1000,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1085,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910,
		IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951,
		IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1093,
		IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1095,
		IF_coarseFreq_accumError_39_BIT_23_22_THEN_IF__ETC___d760,
		IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1094,
		IF_coarseFreq_accumError_39_BIT_47_61_THEN_IF__ETC___d799,
		_0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1001,
		ax1_f__h126143,
		coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81,
		coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168,
		coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207,
		coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120,
		x__h105674,
		x__h105707,
		x__h106442,
		x__h109141,
		x__h109160,
		x__h111162,
		x__h111181,
		x__h111885,
		x__h125154,
		x__h125186,
		x__h125319,
		x__h126840,
		x__h126859,
		x__h135043,
		x__h137091,
		x__h148693,
		x__h150741,
		x__h193474,
		x__h36891,
		x__h39639,
		x__h404490,
		x__h405243,
		x__h407942,
		x__h409961,
		x__h410667,
		x__h410686,
		x__h413401,
		x__h418429,
		x__h421721,
		x__h424516,
		x__h42817,
		x__h45562,
		x__h48620,
		x__h48720,
		x__h48791,
		x__h49682,
		x__h49697,
		x__h49753,
		x__h49768,
		x__h49824;
  wire [12 : 0] SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520,
		SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456,
		ax2_i__h126137;
  wire [11 : 0] IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1106,
		IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1108,
		IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1107,
		res_f__h128840,
		res_i__h138967,
		x__h126145,
		x__h427344,
		x__h428124,
		y_avValue_snd__h427278,
		y_avValue_snd__h428058,
		y_f__h104091,
		y_f__h107271,
		y_f__h109989,
		y_f__h112733,
		y_f__h115445,
		y_f__h120957,
		y_f__h123812,
		y_f__h127688,
		y_f__h130415,
		y_f__h133793,
		y_f__h135885,
		y_f__h137795,
		y_f__h149535,
		y_f__h151445,
		y_f__h194304,
		y_f__h37736,
		y_f__h40481,
		y_f__h406076,
		y_f__h408791,
		y_f__h411516,
		y_f__h414231,
		y_f__h419259,
		y_f__h422563,
		y_f__h425358,
		y_f__h43659,
		y_f__h46404;
  wire NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801,
       NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003,
       abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675,
       coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1595,
       coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283,
       coarseFreq_cordic_n_8_ULT_14___d39,
       coarseFreq_cordic_z__1_SLE_0___d256,
       coarseFreq_cordic_z__1_SLE_3216___d72,
       coarseFreq_cordic_z__1_SLT_3216___d160,
       coarseFreq_n_21_ULT_20___d322,
       n_635_ULT_20___d1636;

  // value method inM
  assign IN = inV ;

  // value method outM
  assign OUT = outV[11:0] ;

  // submodule coarseFreq_cordic_ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_ix(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_ix$D_IN),
							       .ENQ(coarseFreq_cordic_ix$ENQ),
							       .DEQ(coarseFreq_cordic_ix$DEQ),
							       .CLR(coarseFreq_cordic_ix$CLR),
							       .D_OUT(coarseFreq_cordic_ix$D_OUT),
							       .FULL_N(coarseFreq_cordic_ix$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_ix$EMPTY_N));

  // submodule coarseFreq_cordic_iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iy(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iy$D_IN),
							       .ENQ(coarseFreq_cordic_iy$ENQ),
							       .DEQ(coarseFreq_cordic_iy$DEQ),
							       .CLR(coarseFreq_cordic_iy$CLR),
							       .D_OUT(coarseFreq_cordic_iy$D_OUT),
							       .FULL_N(coarseFreq_cordic_iy$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iy$EMPTY_N));

  // submodule coarseFreq_cordic_iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) coarseFreq_cordic_iz(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_cordic_iz$D_IN),
							       .ENQ(coarseFreq_cordic_iz$ENQ),
							       .DEQ(coarseFreq_cordic_iz$DEQ),
							       .CLR(coarseFreq_cordic_iz$CLR),
							       .D_OUT(coarseFreq_cordic_iz$D_OUT),
							       .FULL_N(coarseFreq_cordic_iz$FULL_N),
							       .EMPTY_N(coarseFreq_cordic_iz$EMPTY_N));

  // submodule coarseFreq_newSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) coarseFreq_newSample(.RST(RST_N),
							       .CLK(CLK),
							       .D_IN(coarseFreq_newSample$D_IN),
							       .ENQ(coarseFreq_newSample$ENQ),
							       .DEQ(coarseFreq_newSample$DEQ),
							       .CLR(coarseFreq_newSample$CLR),
							       .D_OUT(coarseFreq_newSample$D_OUT),
							       .FULL_N(coarseFreq_newSample$FULL_N),
							       .EMPTY_N(coarseFreq_newSample$EMPTY_N));

  // rule RL_action_l40c23
  assign WILL_FIRE_RL_action_l40c23 =
	     coarseFreq_newSample$FULL_N && n_635_ULT_20___d1636 &&
	     (state_mkFSMstate == 3'd2 || state_mkFSMstate == 3'd5) ;

  // rule RL_action_l41c13
  assign WILL_FIRE_RL_action_l41c13 =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1595 &&
	     !coarseFreq_coarseErrorCalc_start_reg &&
	     state_mkFSMstate == 3'd3 ;

  // rule RL_fsm_start
  assign WILL_FIRE_RL_fsm_start =
	     abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675 &&
	     start_reg ;

  // rule RL_action_l28c11
  assign WILL_FIRE_RL_action_l28c11 =
	     start_wire$whas && state_mkFSMstate == 3'd0 ||
	     !n_635_ULT_20___d1636 && start_wire$whas &&
	     state_mkFSMstate == 3'd2 ||
	     !n_635_ULT_20___d1636 && start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_idle_l27c17
  assign WILL_FIRE_RL_idle_l27c17 =
	     !n_635_ULT_20___d1636 && !start_wire$whas &&
	     state_mkFSMstate == 3'd2 ;

  // rule RL_idle_l27c17_1
  assign WILL_FIRE_RL_idle_l27c17_1 =
	     !n_635_ULT_20___d1636 && !start_wire$whas &&
	     state_mkFSMstate == 3'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l47c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd1 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l48c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd2 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l49c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 =
	     coarseFreq_cordic_iy$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd3 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l50c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd4 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l51c11
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 =
	     coarseFreq_cordic_iz$EMPTY_N &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd5 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l53c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 =
	     !coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l66c13
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 =
	     coarseFreq_cordic_n_8_ULT_14___d39 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_cordic_atanCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     coarseFreq_cordic_atanCalc_start_reg ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l59c32
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 =
	     coarseFreq_cordic_z__1_SLE_3216___d72 &&
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd6 ||
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd7) ||
	     !coarseFreq_cordic_z__1_SLT_3216___d160 &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ;

  // rule RL_coarseFreq_cordic_atanCalc_idle_l45c22_1
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 =
	     !coarseFreq_cordic_n_8_ULT_14___d39 &&
	     !coarseFreq_cordic_atanCalc_start_wire$whas &&
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l87c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 =
	     coarseFreq_newSample$EMPTY_N && coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l88c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 =
	     coarseFreq_newSample$EMPTY_N &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd6 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l91c24
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 =
	     coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l98c17
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd15) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l101c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 =
	     coarseFreq_n_21_ULT_20___d322 &&
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22) ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l102c19
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 =
	     coarseFreq_cordic_ix$FULL_N && coarseFreq_cordic_iy$FULL_N &&
	     coarseFreq_cordic_iz$FULL_N &&
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l103c13
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 =
	     coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 &&
	     !coarseFreq_cordic_atanCalc_start_reg &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd19 ;

  // rule RL_coarseFreq_cordic_atanCalc_action_l46c12
  assign WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 =
	     coarseFreq_cordic_ix$EMPTY_N &&
	     (coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_start_wire$whas &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_coarseFreq_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start =
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1595 &&
	     coarseFreq_coarseErrorCalc_start_reg ;

  // rule RL_coarseFreq_coarseErrorCalc_action_l82c20
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 =
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	     !coarseFreq_n_21_ULT_20___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     !coarseFreq_n_21_ULT_20___d322 &&
	     coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ;

  // rule RL_coarseFreq_coarseErrorCalc_idle_l81c22_1
  assign WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 =
	     !coarseFreq_n_21_ULT_20___d322 &&
	     !coarseFreq_coarseErrorCalc_start_wire$whas &&
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ;
  assign MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ;
  assign MUX_coarseFreq_n$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_0$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd0 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd1 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_10$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd10 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_11$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd11 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_12$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd12 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_13$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd13 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_14$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd14 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_15$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd15 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_16$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd16 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_17$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd17 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_18$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd18 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_19$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd19 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd2 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd3 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd4 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd5 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd6 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd7 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd8 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_1 =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_coarseFreq_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd9 ;
  assign MUX_start_reg$write_1__SEL_2 =
	     abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675 &&
	     !start_reg &&
	     !running ;
  assign MUX_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ;
  assign MUX_coarseFreq_accumError$write_1__VAL_1 =
	     { x__h105674, x__h111162 } ;
  assign MUX_coarseFreq_cordic_n$write_1__VAL_1 = coarseFreq_cordic_n + 4'd1 ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_3 =
	     (!x__h42433[35] &&
	      (x__h42433[23] || x__h42433[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h42433[35] &&
		 (!x__h42433[23] || ~x__h42433[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h42433[23:0]) ;
  assign MUX_coarseFreq_cordic_x_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49682 : x__h48620 ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_2 =
	     (!x__h39255[35] &&
	      (x__h39255[23] || x__h39255[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h39255[35] &&
		 (!x__h39255[23] || ~x__h39255[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h39255[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_3 =
	     (!x__h45178[35] &&
	      (x__h45178[23] || x__h45178[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h45178[35] &&
		 (!x__h45178[23] || ~x__h45178[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h45178[23:0]) ;
  assign MUX_coarseFreq_cordic_y_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49753 : x__h48720 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_1 =
	     coarseFreq_cordic_z_ + 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_2 =
	     coarseFreq_cordic_z_ - 24'd3216 ;
  assign MUX_coarseFreq_cordic_z_$write_1__VAL_4 =
	     coarseFreq_cordic_z__1_SLE_0___d256 ? x__h49824 : x__h48791 ;
  assign MUX_coarseFreq_currSample$write_1__VAL_1 =
	     { x__h405243,
	       SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468,
	       fpart__h427874 } ;
  assign MUX_coarseFreq_fsError$write_1__VAL_1 =
	     (!x__h118752[35] &&
	      (x__h118752[23] || x__h118752[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h118752[35] &&
		 (!x__h118752[23] || ~x__h118752[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h118752[23:0]) ;
  assign MUX_coarseFreq_lastSample$write_1__VAL_2 =
	     { coarseFreq_lastSample[47:24],
	       (!x__h102807[35] &&
		(x__h102807[23] || x__h102807[35:24] != 12'd0)) ?
		 24'd8388607 :
		 ((x__h102807[35] &&
		   (!x__h102807[23] || ~x__h102807[35:24] != 12'd0)) ?
		    24'd8388608 :
		    x__h102807[23:0]) } ;
  assign MUX_coarseFreq_n$write_1__VAL_1 = coarseFreq_n + 10'd1 ;
  assign MUX_coarseFreq_samples_0$write_1__VAL_3 =
	     { x__h404490, x__h409961 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;

  // inlined wires
  assign coarseFreq_cordic_atanCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     coarseFreq_cordic_atanCalc_start_reg_1 &&
	     !coarseFreq_cordic_atanCalc_state_fired ;
  assign coarseFreq_coarseErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_start_reg_1 &&
	     !coarseFreq_coarseErrorCalc_state_fired ;
  assign start_wire$whas =
	     WILL_FIRE_RL_fsm_start || start_reg_1 && !state_fired ;
  assign coarseFreq_cordic_atanCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ;
  assign coarseFreq_coarseErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;
  assign state_set_pw$whas =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     state_mkFSMstate == 3'd4 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l28c11 ;

  // register coarseFreq_accumError
  assign coarseFreq_accumError$D_IN =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11) ?
	       MUX_coarseFreq_accumError$write_1__VAL_1 :
	       48'd0 ;
  assign coarseFreq_accumError$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ;

  // register coarseFreq_coarseErrorCalc_start_reg
  assign coarseFreq_coarseErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ;
  assign coarseFreq_coarseErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_fsm_start ||
	     coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1595 &&
	     !coarseFreq_coarseErrorCalc_start_reg ;

  // register coarseFreq_coarseErrorCalc_start_reg_1
  assign coarseFreq_coarseErrorCalc_start_reg_1$D_IN =
	     coarseFreq_coarseErrorCalc_start_wire$whas ;
  assign coarseFreq_coarseErrorCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_can_overlap
  assign coarseFreq_coarseErrorCalc_state_can_overlap$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ||
	     coarseFreq_coarseErrorCalc_state_can_overlap ;
  assign coarseFreq_coarseErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_fired
  assign coarseFreq_coarseErrorCalc_state_fired$D_IN =
	     coarseFreq_coarseErrorCalc_state_set_pw$whas ;
  assign coarseFreq_coarseErrorCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_coarseErrorCalc_state_mkFSMstate
  always@(MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 or
	  coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd20;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd21;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21:
	  coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN = 5'd22;
      default: coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_coarseErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_idle_l81c22 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ;

  // register coarseFreq_cordic_atanCalc_start_reg
  assign coarseFreq_cordic_atanCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ;
  assign coarseFreq_cordic_atanCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_fsm_start ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ;

  // register coarseFreq_cordic_atanCalc_start_reg_1
  assign coarseFreq_cordic_atanCalc_start_reg_1$D_IN =
	     coarseFreq_cordic_atanCalc_start_wire$whas ;
  assign coarseFreq_cordic_atanCalc_start_reg_1$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_can_overlap
  assign coarseFreq_cordic_atanCalc_state_can_overlap$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ||
	     coarseFreq_cordic_atanCalc_state_can_overlap ;
  assign coarseFreq_cordic_atanCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_fired
  assign coarseFreq_cordic_atanCalc_state_fired$D_IN =
	     coarseFreq_cordic_atanCalc_state_set_pw$whas ;
  assign coarseFreq_cordic_atanCalc_state_fired$EN = 1'd1 ;

  // register coarseFreq_cordic_atanCalc_state_mkFSMstate
  always@(MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  coarseFreq_cordic_atanCalc_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_cordic_atanCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd10;
      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10:
	  coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN = 4'd11;
      default: coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_atanCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_idle_l45c22 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ;

  // register coarseFreq_cordic_n
  assign coarseFreq_cordic_n$D_IN =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10) ?
	       MUX_coarseFreq_cordic_n$write_1__VAL_1 :
	       4'd0 ;
  assign coarseFreq_cordic_n$EN =
	     coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ;

  // register coarseFreq_cordic_x_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 or
	  coarseFreq_cordic_ix$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_x_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12:
	  coarseFreq_cordic_x_$D_IN = coarseFreq_cordic_ix$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_x_$D_IN = MUX_coarseFreq_cordic_x_$write_1__VAL_4;
      default: coarseFreq_cordic_x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_x_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_y_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 or
	  coarseFreq_cordic_iy$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_y_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12:
	  coarseFreq_cordic_y_$D_IN = coarseFreq_cordic_iy$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_3;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_y_$D_IN = MUX_coarseFreq_cordic_y_$write_1__VAL_4;
      default: coarseFreq_cordic_y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_y_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_cordic_z_
  always@(WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 or
	  coarseFreq_cordic_iz$D_OUT or
	  WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 or
	  MUX_coarseFreq_cordic_z_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_1;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12:
	  coarseFreq_cordic_z_$D_IN = coarseFreq_cordic_iz$D_OUT;
      WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13:
	  coarseFreq_cordic_z_$D_IN = MUX_coarseFreq_cordic_z_$write_1__VAL_4;
      default: coarseFreq_cordic_z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_cordic_z_$EN =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ;

  // register coarseFreq_currSample
  assign coarseFreq_currSample$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ?
	       MUX_coarseFreq_currSample$write_1__VAL_1 :
	       48'd0 ;
  assign coarseFreq_currSample$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ;

  // register coarseFreq_fsError
  assign coarseFreq_fsError$D_IN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ?
	       MUX_coarseFreq_fsError$write_1__VAL_1 :
	       24'd0 ;
  assign coarseFreq_fsError$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ;

  // register coarseFreq_lastSample
  always@(coarseFreq_coarseErrorCalc_state_mkFSMstate or
	  coarseFreq_currSample or
	  MUX_coarseFreq_lastSample$write_1__VAL_2 or
	  WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12:
	  coarseFreq_lastSample$D_IN = coarseFreq_currSample;
      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseFreq_lastSample$D_IN =
	      MUX_coarseFreq_lastSample$write_1__VAL_2;
      WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20:
	  coarseFreq_lastSample$D_IN = 48'd0;
      default: coarseFreq_lastSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_lastSample$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 ;

  // register coarseFreq_n
  assign coarseFreq_n$D_IN =
	     MUX_coarseFreq_n$write_1__SEL_1 ?
	       MUX_coarseFreq_n$write_1__VAL_1 :
	       10'd0 ;
  assign coarseFreq_n$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ;

  // register coarseFreq_samples_0
  always@(MUX_coarseFreq_samples_0$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_0$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_0$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_0$write_1__SEL_1:
	  coarseFreq_samples_0$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_0$write_1__SEL_2:
	  coarseFreq_samples_0$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_0$write_1__SEL_3:
	  coarseFreq_samples_0$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_0$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_0$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd0 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd0 ;

  // register coarseFreq_samples_1
  always@(MUX_coarseFreq_samples_1$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_1$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_1$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_1$write_1__SEL_1:
	  coarseFreq_samples_1$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_1$write_1__SEL_2:
	  coarseFreq_samples_1$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_1$write_1__SEL_3:
	  coarseFreq_samples_1$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_1$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_1$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd1 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd1 ;

  // register coarseFreq_samples_10
  always@(MUX_coarseFreq_samples_10$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_10$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_10$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_10$write_1__SEL_1:
	  coarseFreq_samples_10$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_10$write_1__SEL_2:
	  coarseFreq_samples_10$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_10$write_1__SEL_3:
	  coarseFreq_samples_10$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_10$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_10$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd10 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd10 ;

  // register coarseFreq_samples_11
  always@(MUX_coarseFreq_samples_11$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_11$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_11$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_11$write_1__SEL_1:
	  coarseFreq_samples_11$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_11$write_1__SEL_2:
	  coarseFreq_samples_11$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_11$write_1__SEL_3:
	  coarseFreq_samples_11$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_11$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_11$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd11 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd11 ;

  // register coarseFreq_samples_12
  always@(MUX_coarseFreq_samples_12$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_12$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_12$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_12$write_1__SEL_1:
	  coarseFreq_samples_12$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_12$write_1__SEL_2:
	  coarseFreq_samples_12$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_12$write_1__SEL_3:
	  coarseFreq_samples_12$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_12$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_12$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd12 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd12 ;

  // register coarseFreq_samples_13
  always@(MUX_coarseFreq_samples_13$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_13$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_13$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_13$write_1__SEL_1:
	  coarseFreq_samples_13$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_13$write_1__SEL_2:
	  coarseFreq_samples_13$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_13$write_1__SEL_3:
	  coarseFreq_samples_13$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_13$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_13$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd13 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd13 ;

  // register coarseFreq_samples_14
  always@(MUX_coarseFreq_samples_14$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_14$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_14$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_14$write_1__SEL_1:
	  coarseFreq_samples_14$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_14$write_1__SEL_2:
	  coarseFreq_samples_14$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_14$write_1__SEL_3:
	  coarseFreq_samples_14$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_14$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_14$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd14 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd14 ;

  // register coarseFreq_samples_15
  always@(MUX_coarseFreq_samples_15$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_15$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_15$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_15$write_1__SEL_1:
	  coarseFreq_samples_15$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_15$write_1__SEL_2:
	  coarseFreq_samples_15$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_15$write_1__SEL_3:
	  coarseFreq_samples_15$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_15$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_15$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd15 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd15 ;

  // register coarseFreq_samples_16
  always@(MUX_coarseFreq_samples_16$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_16$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_16$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_16$write_1__SEL_1:
	  coarseFreq_samples_16$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_16$write_1__SEL_2:
	  coarseFreq_samples_16$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_16$write_1__SEL_3:
	  coarseFreq_samples_16$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_16$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_16$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd16 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd16 ;

  // register coarseFreq_samples_17
  always@(MUX_coarseFreq_samples_17$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_17$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_17$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_17$write_1__SEL_1:
	  coarseFreq_samples_17$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_17$write_1__SEL_2:
	  coarseFreq_samples_17$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_17$write_1__SEL_3:
	  coarseFreq_samples_17$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_17$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_17$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd17 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd17 ;

  // register coarseFreq_samples_18
  always@(MUX_coarseFreq_samples_18$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_18$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_18$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_18$write_1__SEL_1:
	  coarseFreq_samples_18$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_18$write_1__SEL_2:
	  coarseFreq_samples_18$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_18$write_1__SEL_3:
	  coarseFreq_samples_18$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_18$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_18$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd18 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd18 ;

  // register coarseFreq_samples_19
  always@(MUX_coarseFreq_samples_19$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_19$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_19$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_19$write_1__SEL_1:
	  coarseFreq_samples_19$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_19$write_1__SEL_2:
	  coarseFreq_samples_19$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_19$write_1__SEL_3:
	  coarseFreq_samples_19$D_IN =
	      MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_19$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_19$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd19 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd19 ;

  // register coarseFreq_samples_2
  always@(MUX_coarseFreq_samples_2$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_2$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_2$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_2$write_1__SEL_1:
	  coarseFreq_samples_2$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_2$write_1__SEL_2:
	  coarseFreq_samples_2$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_2$write_1__SEL_3:
	  coarseFreq_samples_2$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_2$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_2$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd2 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd2 ;

  // register coarseFreq_samples_3
  always@(MUX_coarseFreq_samples_3$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_3$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_3$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_3$write_1__SEL_1:
	  coarseFreq_samples_3$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_3$write_1__SEL_2:
	  coarseFreq_samples_3$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_3$write_1__SEL_3:
	  coarseFreq_samples_3$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_3$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_3$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd3 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd3 ;

  // register coarseFreq_samples_4
  always@(MUX_coarseFreq_samples_4$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_4$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_4$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_4$write_1__SEL_1:
	  coarseFreq_samples_4$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_4$write_1__SEL_2:
	  coarseFreq_samples_4$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_4$write_1__SEL_3:
	  coarseFreq_samples_4$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_4$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_4$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd4 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd4 ;

  // register coarseFreq_samples_5
  always@(MUX_coarseFreq_samples_5$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_5$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_5$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_5$write_1__SEL_1:
	  coarseFreq_samples_5$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_5$write_1__SEL_2:
	  coarseFreq_samples_5$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_5$write_1__SEL_3:
	  coarseFreq_samples_5$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_5$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_5$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd5 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd5 ;

  // register coarseFreq_samples_6
  always@(MUX_coarseFreq_samples_6$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_6$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_6$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_6$write_1__SEL_1:
	  coarseFreq_samples_6$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_6$write_1__SEL_2:
	  coarseFreq_samples_6$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_6$write_1__SEL_3:
	  coarseFreq_samples_6$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_6$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_6$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd6 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd6 ;

  // register coarseFreq_samples_7
  always@(MUX_coarseFreq_samples_7$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_7$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_7$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_7$write_1__SEL_1:
	  coarseFreq_samples_7$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_7$write_1__SEL_2:
	  coarseFreq_samples_7$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_7$write_1__SEL_3:
	  coarseFreq_samples_7$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_7$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_7$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd7 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd7 ;

  // register coarseFreq_samples_8
  always@(MUX_coarseFreq_samples_8$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_8$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_8$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_8$write_1__SEL_1:
	  coarseFreq_samples_8$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_8$write_1__SEL_2:
	  coarseFreq_samples_8$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_8$write_1__SEL_3:
	  coarseFreq_samples_8$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_8$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_8$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd8 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd8 ;

  // register coarseFreq_samples_9
  always@(MUX_coarseFreq_samples_9$write_1__SEL_1 or
	  coarseFreq_currSample or
	  MUX_coarseFreq_samples_9$write_1__SEL_2 or
	  coarseFreq_newSample$D_OUT or
	  MUX_coarseFreq_samples_9$write_1__SEL_3 or
	  MUX_coarseFreq_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseFreq_samples_9$write_1__SEL_1:
	  coarseFreq_samples_9$D_IN = coarseFreq_currSample;
      MUX_coarseFreq_samples_9$write_1__SEL_2:
	  coarseFreq_samples_9$D_IN = coarseFreq_newSample$D_OUT;
      MUX_coarseFreq_samples_9$write_1__SEL_3:
	  coarseFreq_samples_9$D_IN = MUX_coarseFreq_samples_0$write_1__VAL_3;
      default: coarseFreq_samples_9$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseFreq_samples_9$EN =
	     coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	     coarseFreq_n == 10'd9 ||
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	     coarseFreq_n == 10'd9 ;

  // register coarseFreq_xFix
  assign coarseFreq_xFix$D_IN =
	     (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[23] ||
	       IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398[23:0]) ;
  assign coarseFreq_xFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ;

  // register coarseFreq_yFix
  assign coarseFreq_yFix$D_IN =
	     (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[35] &&
	      (IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[23] ||
	       IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[35] &&
		 (!IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[23] ||
		  ~IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436[23:0]) ;
  assign coarseFreq_yFix$EN =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ;

  // register fV
  assign fV$D_IN = { fV[23:12], inV } ;
  assign fV$EN = WILL_FIRE_RL_action_l28c11 ;

  // register inV
  assign inV$D_IN = 12'h0 ;
  assign inV$EN = 1'b0 ;

  // register n
  assign n$D_IN = (state_mkFSMstate == 3'd4) ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN = state_mkFSMstate == 3'd4 || state_mkFSMstate == 3'd1 ;

  // register outV
  assign outV$D_IN = coarseFreq_fsError ;
  assign outV$EN = WILL_FIRE_RL_action_l41c13 ;

  // register running
  assign running$D_IN = 1'd1 ;
  assign running$EN = MUX_start_reg$write_1__SEL_2 ;

  // register start_reg
  assign start_reg$D_IN = !WILL_FIRE_RL_fsm_start ;
  assign start_reg$EN =
	     WILL_FIRE_RL_fsm_start ||
	     abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675 &&
	     !start_reg &&
	     !running ;

  // register start_reg_1
  assign start_reg_1$D_IN = start_wire$whas ;
  assign start_reg_1$EN = 1'd1 ;

  // register state_can_overlap
  assign state_can_overlap$D_IN = state_set_pw$whas || state_can_overlap ;
  assign state_can_overlap$EN = 1'd1 ;

  // register state_fired
  assign state_fired$D_IN = state_set_pw$whas ;
  assign state_fired$EN = 1'd1 ;

  // register state_mkFSMstate
  always@(MUX_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_action_l28c11 or
	  state_mkFSMstate or
	  WILL_FIRE_RL_action_l40c23 or WILL_FIRE_RL_action_l41c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state_mkFSMstate$write_1__SEL_1: state_mkFSMstate$D_IN = 3'd0;
      WILL_FIRE_RL_action_l28c11: state_mkFSMstate$D_IN = 3'd1;
      state_mkFSMstate == 3'd1: state_mkFSMstate$D_IN = 3'd2;
      WILL_FIRE_RL_action_l40c23: state_mkFSMstate$D_IN = 3'd3;
      WILL_FIRE_RL_action_l41c13: state_mkFSMstate$D_IN = 3'd4;
      state_mkFSMstate == 3'd4: state_mkFSMstate$D_IN = 3'd5;
      default: state_mkFSMstate$D_IN = 3'bxxx /* unspecified value */ ;
    endcase
  end
  assign state_mkFSMstate$EN =
	     WILL_FIRE_RL_idle_l27c17_1 || WILL_FIRE_RL_idle_l27c17 ||
	     WILL_FIRE_RL_action_l28c11 ||
	     state_mkFSMstate == 3'd1 ||
	     WILL_FIRE_RL_action_l40c23 ||
	     WILL_FIRE_RL_action_l41c13 ||
	     state_mkFSMstate == 3'd4 ;

  // submodule coarseFreq_cordic_ix
  assign coarseFreq_cordic_ix$D_IN = coarseFreq_xFix ;
  assign coarseFreq_cordic_ix$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ;
  assign coarseFreq_cordic_ix$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ;
  assign coarseFreq_cordic_ix$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iy
  assign coarseFreq_cordic_iy$D_IN = coarseFreq_yFix ;
  assign coarseFreq_cordic_iy$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ;
  assign coarseFreq_cordic_iy$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ;
  assign coarseFreq_cordic_iy$CLR = 1'b0 ;

  // submodule coarseFreq_cordic_iz
  assign coarseFreq_cordic_iz$D_IN =
	     (!IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[35] &&
	      (IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[23] ||
	       IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[35] &&
		 (!IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[23] ||
		  ~IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357[23:0]) ;
  assign coarseFreq_cordic_iz$ENQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ;
  assign coarseFreq_cordic_iz$DEQ =
	     WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ;
  assign coarseFreq_cordic_iz$CLR = 1'b0 ;

  // submodule coarseFreq_newSample
  assign coarseFreq_newSample$D_IN = {2{fV}} ;
  assign coarseFreq_newSample$ENQ = WILL_FIRE_RL_action_l40c23 ;
  assign coarseFreq_newSample$DEQ =
	     WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ;
  assign coarseFreq_newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1010 =
	     x__h135043 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1024 =
	     x__h132234[47:12] + { 24'd0, y_f__h135885 } ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d916 =
	     x__h148693 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d930 =
	     x__h145894[47:12] + { 24'd0, y_f__h149535 } ;
  assign IF_IF_coarseFreq_accumError_39_BIT_23_22_AND_N_ETC___d1126 =
	     x__h119081[47:12] + { 24'd0, y_f__h194304 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1000 =
	     (!x__h139436[36] &&
	      (x__h139436[23] || x__h139436[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h139436[36] &&
		 (!x__h139436[23] || ~x__h139436[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h139436[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1085 =
	     (!x__h125776[36] &&
	      (x__h125776[23] || x__h125776[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h125776[36] &&
		 (!x__h125776[23] || ~x__h125776[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h125776[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910 +
	     ((!x__h131905[35] &&
	       (x__h131905[23] || x__h131905[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h131905[35] &&
		  (!x__h131905[23] || ~x__h131905[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h131905[23:0])) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877 =
	     (!x__h132571[35] &&
	      (x__h132571[23] || x__h132571[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h132571[35] &&
		 (!x__h132571[23] || ~x__h132571[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h132571[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910 =
	     (!x__h129193[35] &&
	      (x__h129193[23] || x__h129193[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h129193[35] &&
		 (!x__h129193[23] || ~x__h129193[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h129193[23:0]) ;
  assign IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877 +
	     ((!x__h145565[35] &&
	       (x__h145565[23] || x__h145565[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h145565[35] &&
		  (!x__h145565[23] || ~x__h145565[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h145565[23:0])) ;
  assign IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181 =
	     (!IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166[47] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1178[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1178 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_BIT_23_378_TH_ETC___d1398 =
	     (!IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383[47] &&
	      IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1395[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1395 ;
  assign IF_NOT_IF_coarseFreq_cordic_x__9_MINUS_coarseF_ETC___d102 =
	     (!IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] &&
	      IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 ;
  assign IF_NOT_IF_coarseFreq_cordic_y__0_BIT_23_416_TH_ETC___d1436 =
	     (!IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421[47] &&
	      IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1433[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1433 ;
  assign IF_NOT_IF_coarseFreq_fsError_336_BIT_23_337_TH_ETC___d1357 =
	     (!IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342[47] &&
	      IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1354[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1354 ;
  assign IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1093 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801) ?
	       x__h125319 :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1085 :
		  24'd0) ;
  assign IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1106 =
	     (!coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801) ?
	       x__h125319[23:12] :
	       ((!coarseFreq_accumError[47] &&
		 NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003) ?
		  res_i__h138967 :
		  12'd0) ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1211 =
	     x__h407942 * x__h410686 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1225 =
	     x__h407895[47:12] + { 24'd0, y_f__h408791 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1288 =
	     x__h407942 * x__h413401 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1302 =
	     x__h413335[47:12] + { 24'd0, y_f__h414231 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1164 =
	     x__h410667 * x__h413401 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1164 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1164 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1178 =
	     IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166[47:12] +
	     { 24'd0, y_f__h406076 } ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1250 =
	     x__h410667 * x__h410686 ;
  assign IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1264 =
	     x__h410620[47:12] + { 24'd0, y_f__h411516 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1053 =
	     x__h137072 / x__h137091 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1065 =
	     x__h126115[38:2] + { 25'd0, y_f__h137795 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d968 =
	     x__h137072 / x__h150741 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d980 =
	     x__h139775[38:2] + { 25'd0, y_f__h151445 } ;
  assign IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1095 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1001 :
	       IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1094 ;
  assign IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1108 =
	     (coarseFreq_accumError[23] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1001[23:12] :
	       IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1107 ;
  assign IF_coarseFreq_accumError_39_BIT_23_22_THEN_0_C_ETC___d739 =
	     x__h120008[47:12] + { 24'd0, y_f__h120957 } ;
  assign IF_coarseFreq_accumError_39_BIT_23_22_THEN_IF__ETC___d760 =
	     coarseFreq_accumError[23] ?
	       ((!x__h119679[35] &&
		 (x__h119679[23] || x__h119679[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h119679[35] &&
		    (!x__h119679[23] || ~x__h119679[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h119679[23:0])) :
	       coarseFreq_accumError[23:0] ;
  assign IF_coarseFreq_accumError_39_BIT_23_22_THEN_NEG_ETC___d857 =
	     x__h132900[47:12] + { 24'd0, y_f__h133793 } ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1094 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003) ?
	       (coarseFreq_accumError[23] ? x__h125186 : x__h125154) :
	       IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1093 ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d1107 =
	     (coarseFreq_accumError[47] &&
	      NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003) ?
	       (coarseFreq_accumError[23] ?
		  x__h125186[23:12] :
		  x__h125154[23:12]) :
	       IF_NOT_coarseFreq_accumError_39_BIT_23_22_03_A_ETC___d1106 ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d822 =
	     x__h126795[47:12] + { 24'd0, y_f__h127688 } ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_THEN_0_C_ETC___d778 =
	     x__h122863[47:12] + { 24'd0, y_f__h123812 } ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_THEN_IF__ETC___d799 =
	     coarseFreq_accumError[47] ?
	       ((!x__h122534[35] &&
		 (x__h122534[23] || x__h122534[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h122534[35] &&
		    (!x__h122534[23] || ~x__h122534[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h122534[23:0])) :
	       coarseFreq_accumError[47:24] ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d808 =
	     x__h126840 * x__h126859 ;
  assign IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d890 =
	     x__h129522[47:12] + { 24'd0, y_f__h130415 } ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1381 =
	     x__h421721 * 24'd2487 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383 =
	     coarseFreq_cordic_x_[23] ?
	       -IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1381 :
	       IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1381 ;
  assign IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1395 =
	     IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383[47:12] +
	     { 24'd0, y_f__h422563 } ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 =
	     x__h36891 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 :
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d85 ;
  assign IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d99 =
	     IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47:12] +
	     { 24'd0, y_f__h37736 } ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 =
	     x__h42817 * 24'd2896 ;
  assign IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 =
	     x__h42762[47:12] + { 24'd0, y_f__h43659 } ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1419 =
	     x__h424516 * 24'd2487 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421 =
	     coarseFreq_cordic_y_[23] ?
	       -IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1419 :
	       IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1419 ;
  assign IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1433 =
	     IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421[47:12] +
	     { 24'd0, y_f__h425358 } ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 =
	     x__h45562 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 =
	     x__h45507[47:12] + { 24'd0, y_f__h46404 } ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 =
	     x__h39639 * 24'd2896 ;
  assign IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 =
	     x__h39584[47:12] + { 24'd0, y_f__h40481 } ;
  assign IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d612 =
	     x__h109090[47:12] + { 24'd0, y_f__h109989 } ;
  assign IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d691 =
	     x__h114552[47:12] + { 24'd0, y_f__h115445 } ;
  assign IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d598 =
	     x__h109141 * x__h109160 ;
  assign IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d677 =
	     x__h109141 * x__h106442 ;
  assign IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d568 =
	     x__h106366[47:12] + { 24'd0, y_f__h107271 } ;
  assign IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d653 =
	     x__h111840[47:12] + { 24'd0, y_f__h112733 } ;
  assign IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d554 =
	     x__h111885 * x__h106442 ;
  assign IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d639 =
	     x__h111885 * x__h109160 ;
  assign IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342 =
	     coarseFreq_fsError[23] ?
	       _25734_MUL_IF_coarseFreq_fsError_336_BIT_23_337_ETC___d1340 :
	       -_25734_MUL_IF_coarseFreq_fsError_336_BIT_23_337_ETC___d1340 ;
  assign IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1354 =
	     IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342[47:12] +
	     { 24'd0, y_f__h419259 } ;
  assign IF_coarseFreq_lastSample_95_BIT_23_97_THEN_0_C_ETC___d515 =
	     x__h103136[47:12] + { 24'd0, y_f__h104091 } ;
  assign NOT_IF_coarseFreq_accumError_39_BIT_23_22_THEN_ETC___d801 =
	     (IF_coarseFreq_accumError_39_BIT_23_22_THEN_IF__ETC___d760 ^
	      24'h800000) >=
	     (IF_coarseFreq_accumError_39_BIT_47_61_THEN_IF__ETC___d799 ^
	      24'h800000) ;
  assign NOT_IF_coarseFreq_accumError_39_BIT_47_61_THEN_ETC___d1003 =
	     (IF_coarseFreq_accumError_39_BIT_47_61_THEN_IF__ETC___d799 ^
	      24'h800000) >
	     (IF_coarseFreq_accumError_39_BIT_23_22_THEN_IF__ETC___d760 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11],
	       SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 } ;
  assign SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11],
	       SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1473 =
	     { 33'd0, x__h427344 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1476 =
	     { 33'd0, x__h427344 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1484 =
	     { 33'd0, x__h427344 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1493 =
	     { 33'd0, x__h427344 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1502 =
	     { 33'd0, x__h427344 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1511 =
	     { 33'd0, x__h427344 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1537 =
	     { 33'd0, x__h428124 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1540 =
	     { 33'd0, x__h428124 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1548 =
	     { 33'd0, x__h428124 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1557 =
	     { 33'd0, x__h428124 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1566 =
	     { 33'd0, x__h428124 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1575 =
	     { 33'd0, x__h428124 } * 45'd1000000 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 } ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1479 =
	     45'd10 * digit__h427314 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1543 =
	     45'd10 * digit__h428094 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1488 =
	     45'd10 * y__h427527 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1552 =
	     45'd10 * y__h428307 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1497 =
	     45'd10 * y__h427616 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1561 =
	     45'd10 * y__h428396 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1506 =
	     45'd10 * y__h427705 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1570 =
	     45'd10 * y__h428485 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1515 =
	     45'd10 * y__h427794 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1579 =
	     45'd10 * y__h428574 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d1001 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1000 ;
  assign _25734_MUL_IF_coarseFreq_fsError_336_BIT_23_337_ETC___d1340 =
	     24'd25734 * x__h418429 ;
  assign _651_MUL_IF_IF_coarseFreq_accumError_39_BIT_23__ETC___d1112 =
	     24'd651 * x__h193474 ;
  assign abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675 =
	     (state_mkFSMstate == 3'd0 ||
	      !n_635_ULT_20___d1636 && state_mkFSMstate == 3'd2 ||
	      !n_635_ULT_20___d1636 && state_mkFSMstate == 3'd5) &&
	     (!start_reg_1 || state_fired) ;
  assign ax1_f__h126143 = { res_f__h128840, 12'd0 } ;
  assign ax2_f__h126138 = { ax1_f__h126143, 2'd0 } ;
  assign ax2_i__h126137 = { x__h126145[11], x__h126145 } ;
  assign coarseFreq_coarseErrorCalc_abort_whas__89_AND__ETC___d1595 =
	     (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	      !coarseFreq_n_21_ULT_20___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	      !coarseFreq_n_21_ULT_20___d322 &&
	      coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd22) &&
	     (!coarseFreq_coarseErrorCalc_start_reg_1 ||
	      coarseFreq_coarseErrorCalc_state_fired) ;
  assign coarseFreq_cordic_atanCalc_abort_whas_AND_coar_ETC___d283 =
	     (coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd0 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd9 ||
	      !coarseFreq_cordic_n_8_ULT_14___d39 &&
	      coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd11) &&
	     (!coarseFreq_cordic_atanCalc_start_reg_1 ||
	      coarseFreq_cordic_atanCalc_state_fired) ;
  assign coarseFreq_cordic_n_8_ULT_14___d39 = coarseFreq_cordic_n < 4'd14 ;
  assign coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 =
	     coarseFreq_cordic_x_ - coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 =
	     coarseFreq_cordic_x_ + coarseFreq_cordic_y_ ;
  assign coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 =
	     coarseFreq_cordic_y_ - coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 =
	     coarseFreq_cordic_y_ + coarseFreq_cordic_x_ ;
  assign coarseFreq_cordic_z__1_SLE_0___d256 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8388608 ;
  assign coarseFreq_cordic_z__1_SLE_3216___d72 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) <= 24'd8391824 ;
  assign coarseFreq_cordic_z__1_SLT_3216___d160 =
	     (coarseFreq_cordic_z_ ^ 24'h800000) < 24'd8391824 ;
  assign coarseFreq_n_21_ULT_20___d322 = coarseFreq_n < 10'd20 ;
  assign digit__h427314 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1473[15:12] } ;
  assign digit__h427381 =
	     { 41'd0,
	       tx27379_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2[3:0] } ;
  assign digit__h427470 =
	     { 41'd0,
	       tx27468_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3[3:0] } ;
  assign digit__h427559 =
	     { 41'd0,
	       tx27557_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4[3:0] } ;
  assign digit__h427648 =
	     { 41'd0,
	       tx27646_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5[3:0] } ;
  assign digit__h427737 =
	     { 41'd0,
	       tx27735_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6[3:0] } ;
  assign digit__h428094 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1537[15:12] } ;
  assign digit__h428161 =
	     { 41'd0,
	       tx28159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7[3:0] } ;
  assign digit__h428250 =
	     { 41'd0,
	       tx28248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8[3:0] } ;
  assign digit__h428339 =
	     { 41'd0,
	       tx28337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9[3:0] } ;
  assign digit__h428428 =
	     { 41'd0,
	       tx28426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10[3:0] } ;
  assign digit__h428517 =
	     { 41'd0,
	       tx28515_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11[3:0] } ;
  assign n_635_ULT_20___d1636 = n < 10'd20 ;
  assign res_f__h128840 =
	     (!x__h126466[35] &&
	      (x__h126466[23] || x__h126466[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h126466[35] &&
		 (!x__h126466[23] || ~x__h126466[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h126466[11:0]) ;
  assign res_i__h138967 =
	     (!x__h125776[36] &&
	      (x__h125776[23] || x__h125776[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h125776[36] &&
		 (!x__h125776[23] || ~x__h125776[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h125776[23:12]) ;
  assign tx27379_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q2 =
	     tx__h427379 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1479[44:0] ;
  assign tx27468_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q3 =
	     tx__h427468 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1488[44:0] ;
  assign tx27557_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q4 =
	     tx__h427557 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1497[44:0] ;
  assign tx27646_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q5 =
	     tx__h427646 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1506[44:0] ;
  assign tx27735_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q6 =
	     tx__h427735 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1515[44:0] ;
  assign tx28159_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q7 =
	     tx__h428159 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1543[44:0] ;
  assign tx28248_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q8 =
	     tx__h428248 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1552[44:0] ;
  assign tx28337_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q9 =
	     tx__h428337 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1561[44:0] ;
  assign tx28426_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q10 =
	     tx__h428426 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1570[44:0] ;
  assign tx28515_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q11 =
	     tx__h428515 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1579[44:0] ;
  assign tx__h427379 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1476[44:12] } ;
  assign tx__h427468 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1484[44:12] } ;
  assign tx__h427557 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1493[44:12] } ;
  assign tx__h427646 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1502[44:12] } ;
  assign tx__h427735 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1511[44:12] } ;
  assign tx__h428159 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1540[44:12] } ;
  assign tx__h428248 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1548[44:12] } ;
  assign tx__h428337 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1557[44:12] } ;
  assign tx__h428426 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1566[44:12] } ;
  assign tx__h428515 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_coarseFreq_samples_0__ETC___d1575[44:12] } ;
  assign x__h102807 =
	     (!x__h103136[47] &&
	      IF_coarseFreq_lastSample_95_BIT_23_97_THEN_0_C_ETC___d515[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_lastSample_95_BIT_23_97_THEN_0_C_ETC___d515 ;
  assign x__h103136 =
	     coarseFreq_lastSample[23] ?
	       { 12'd0, x__h109160, 12'd0 } :
	       -{ 12'd0, x__h109160, 12'd0 } ;
  assign x__h105674 = coarseFreq_accumError[47:24] + x__h105707 ;
  assign x__h105707 =
	     ((!x__h106037[35] &&
	       (x__h106037[23] || x__h106037[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h106037[35] &&
		  (!x__h106037[23] || ~x__h106037[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h106037[23:0])) -
	     ((!x__h108761[35] &&
	       (x__h108761[23] || x__h108761[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h108761[35] &&
		  (!x__h108761[23] || ~x__h108761[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h108761[23:0])) ;
  assign x__h106037 =
	     (!x__h106366[47] &&
	      IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d568[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d568 ;
  assign x__h106366 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d554 :
	       IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d554 ;
  assign x__h106442 =
	     coarseFreq_lastSample[47] ?
	       -coarseFreq_lastSample[47:24] :
	       coarseFreq_lastSample[47:24] ;
  assign x__h108761 =
	     (!x__h109090[47] &&
	      IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d612[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d612 ;
  assign x__h109090 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d598 :
	       IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d598 ;
  assign x__h109141 =
	     coarseFreq_currSample[23] ?
	       -coarseFreq_currSample[23:0] :
	       coarseFreq_currSample[23:0] ;
  assign x__h109160 =
	     coarseFreq_lastSample[23] ?
	       -coarseFreq_lastSample[23:0] :
	       coarseFreq_lastSample[23:0] ;
  assign x__h111162 = coarseFreq_accumError[23:0] + x__h111181 ;
  assign x__h111181 =
	     ((!x__h111511[35] &&
	       (x__h111511[23] || x__h111511[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h111511[35] &&
		  (!x__h111511[23] || ~x__h111511[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h111511[23:0])) +
	     ((!x__h114223[35] &&
	       (x__h114223[23] || x__h114223[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h114223[35] &&
		  (!x__h114223[23] || ~x__h114223[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h114223[23:0])) ;
  assign x__h111511 =
	     (!x__h111840[47] &&
	      IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d653[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_41_BIT_47_42_AND_NOT__ETC___d653 ;
  assign x__h111840 =
	     (coarseFreq_currSample[47] && !coarseFreq_lastSample[23] ||
	      coarseFreq_lastSample[23] && !coarseFreq_currSample[47]) ?
	       -IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d639 :
	       IF_coarseFreq_currSample_41_BIT_47_42_THEN_NEG_ETC___d639 ;
  assign x__h111885 =
	     coarseFreq_currSample[47] ?
	       -coarseFreq_currSample[47:24] :
	       coarseFreq_currSample[47:24] ;
  assign x__h114223 =
	     (!x__h114552[47] &&
	      IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d691[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_currSample_41_BIT_23_89_AND_NOT__ETC___d691 ;
  assign x__h114552 =
	     (coarseFreq_currSample[23] && !coarseFreq_lastSample[47] ||
	      coarseFreq_lastSample[47] && !coarseFreq_currSample[23]) ?
	       -IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d677 :
	       IF_coarseFreq_currSample_41_BIT_23_89_THEN_NEG_ETC___d677 ;
  assign x__h118752 =
	     (!x__h119081[47] &&
	      IF_IF_coarseFreq_accumError_39_BIT_23_22_AND_N_ETC___d1126[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_coarseFreq_accumError_39_BIT_23_22_AND_N_ETC___d1126 ;
  assign x__h119081 =
	     IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1095[23] ?
	       -_651_MUL_IF_IF_coarseFreq_accumError_39_BIT_23__ETC___d1112 :
	       _651_MUL_IF_IF_coarseFreq_accumError_39_BIT_23__ETC___d1112 ;
  assign x__h119679 =
	     (!x__h120008[47] &&
	      IF_coarseFreq_accumError_39_BIT_23_22_THEN_0_C_ETC___d739[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_39_BIT_23_22_THEN_0_C_ETC___d739 ;
  assign x__h120008 =
	     coarseFreq_accumError[23] ?
	       { 12'd0, x__h126859, 12'd0 } :
	       -{ 12'd0, x__h126859, 12'd0 } ;
  assign x__h122534 =
	     (!x__h122863[47] &&
	      IF_coarseFreq_accumError_39_BIT_47_61_THEN_0_C_ETC___d778[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_39_BIT_47_61_THEN_0_C_ETC___d778 ;
  assign x__h122863 =
	     coarseFreq_accumError[47] ?
	       { 12'd0, x__h126840, 12'd0 } :
	       -{ 12'd0, x__h126840, 12'd0 } ;
  assign x__h125154 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1085 ;
  assign x__h125186 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1085 ;
  assign x__h125319 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_coarseF_ETC___d1000 ;
  assign x__h125776 =
	     (!x__h126115[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1065[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1065 ;
  assign x__h126115 =
	     (ax2_i__h126137[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045[23] ||
	      !ax2_i__h126137[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1053 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d1053 ;
  assign x__h126145 =
	     (!x__h126466[35] &&
	      (x__h126466[23] || x__h126466[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h126466[35] &&
		 (!x__h126466[23] || ~x__h126466[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h126466[23:12]) ;
  assign x__h126466 =
	     (!x__h126795[47] &&
	      IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d822[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_39_BIT_47_61_AND_NOT__ETC___d822 ;
  assign x__h126795 =
	     (coarseFreq_accumError[47] && !coarseFreq_accumError[23] ||
	      coarseFreq_accumError[23] && !coarseFreq_accumError[47]) ?
	       -IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d808 :
	       IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d808 ;
  assign x__h126840 =
	     coarseFreq_accumError[47] ?
	       -coarseFreq_accumError[47:24] :
	       coarseFreq_accumError[47:24] ;
  assign x__h126859 =
	     coarseFreq_accumError[23] ?
	       -coarseFreq_accumError[23:0] :
	       coarseFreq_accumError[23:0] ;
  assign x__h129193 =
	     (!x__h129522[47] &&
	      IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d890[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_39_BIT_47_61_THEN_NEG_ETC___d890 ;
  assign x__h129522 = x__h126840 * x__h126840 ;
  assign x__h131905 =
	     (!x__h132234[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1024[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1024 ;
  assign x__h132234 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1010 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d1010 ;
  assign x__h132571 =
	     (!x__h132900[47] &&
	      IF_coarseFreq_accumError_39_BIT_23_22_THEN_NEG_ETC___d857[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_accumError_39_BIT_23_22_THEN_NEG_ETC___d857 ;
  assign x__h132900 = x__h126859 * x__h126859 ;
  assign x__h135043 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877[23] ?
	       ((!x__h132571[35] &&
		 (x__h132571[23] || x__h132571[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h132571[35] &&
		    (!x__h132571[23] || ~x__h132571[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h132571[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d877 ;
  assign x__h137072 =
	     ax2_i__h126137[12] ?
	       -{ ax2_i__h126137, ax2_f__h126138 } :
	       { ax2_i__h126137, ax2_f__h126138 } ;
  assign x__h137091 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d1045 ;
  assign x__h139436 =
	     (!x__h139775[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d980[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d980 ;
  assign x__h139775 =
	     (ax2_i__h126137[12] &&
	      !IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951[23] ||
	      !ax2_i__h126137[12] &&
	      IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d968 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_coarseFreq_accumError_ETC___d968 ;
  assign x__h145565 =
	     (!x__h145894[47] &&
	      IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d930[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d930 ;
  assign x__h145894 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910[23] ?
	       -IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d916 :
	       IF_IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_B_ETC___d916 ;
  assign x__h148693 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910[23] ?
	       ((!x__h129193[35] &&
		 (x__h129193[23] || x__h129193[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h129193[35] &&
		    (!x__h129193[23] || ~x__h129193[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h129193[23:0])) :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d910 ;
  assign x__h150741 =
	     IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951[23] ?
	       -IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951 :
	       IF_NOT_IF_NOT_IF_coarseFreq_accumError_39_BIT__ETC___d951 ;
  assign x__h193474 =
	     IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1108[11] ?
	       -IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1095 :
	       IF_coarseFreq_accumError_39_BIT_23_22_AND_NOT__ETC___d1095 ;
  assign x__h36891 =
	     coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81[23] ?
	       -coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 :
	       coarseFreq_cordic_x__9_MINUS_coarseFreq_cordic_ETC___d81 ;
  assign x__h39255 =
	     (!x__h39584[47] &&
	      IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d138 ;
  assign x__h39584 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 :
	       IF_coarseFreq_cordic_y__0_PLUS_coarseFreq_cord_ETC___d124 ;
  assign x__h39639 =
	     coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120[23] ?
	       -coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 :
	       coarseFreq_cordic_y__0_PLUS_coarseFreq_cordic__ETC___d120 ;
  assign x__h404490 =
	     ((!IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[35] &&
	       (IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[23] ||
		IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[35] &&
		  (!IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[23] ||
		   ~IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_SEL_ARR_coarseFreq_samples_0_82_BITS_ETC___d1181[23:0])) -
	     ((!x__h407566[35] &&
	       (x__h407566[23] || x__h407566[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h407566[35] &&
		  (!x__h407566[23] || ~x__h407566[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h407566[23:0])) ;
  assign x__h405243 =
	     { SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423,
	       fpart__h427088 } ;
  assign x__h407566 =
	     (!x__h407895[47] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1225[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1225 ;
  assign x__h407895 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1211 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1211 ;
  assign x__h407942 =
	     SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11] ?
	       -{ SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468,
		  fpart__h427874 } :
	       { SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468,
		 fpart__h427874 } ;
  assign x__h409961 =
	     ((!x__h410291[35] &&
	       (x__h410291[23] || x__h410291[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h410291[35] &&
		  (!x__h410291[23] || ~x__h410291[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h410291[23:0])) +
	     ((!x__h413006[35] &&
	       (x__h413006[23] || x__h413006[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h413006[35] &&
		  (!x__h413006[23] || ~x__h413006[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h413006[23:0])) ;
  assign x__h410291 =
	     (!x__h410620[47] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1264[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1264 ;
  assign x__h410620 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11] &&
	      !coarseFreq_yFix[23] ||
	      coarseFreq_yFix[23] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1250 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1250 ;
  assign x__h410667 =
	     SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423[11] ?
	       -x__h405243 :
	       x__h405243 ;
  assign x__h410686 =
	     coarseFreq_yFix[23] ? -coarseFreq_yFix : coarseFreq_yFix ;
  assign x__h413006 =
	     (!x__h413335[47] &&
	      IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1302[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1302 ;
  assign x__h413335 =
	     (SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11] &&
	      !coarseFreq_xFix[23] ||
	      coarseFreq_xFix[23] &&
	      !SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468[11]) ?
	       -IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1288 :
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO__ETC___d1288 ;
  assign x__h413401 =
	     coarseFreq_xFix[23] ? -coarseFreq_xFix : coarseFreq_xFix ;
  assign x__h418429 =
	     coarseFreq_fsError[23] ?
	       -coarseFreq_fsError :
	       coarseFreq_fsError ;
  assign x__h421721 =
	     coarseFreq_cordic_x_[23] ?
	       -coarseFreq_cordic_x_ :
	       coarseFreq_cordic_x_ ;
  assign x__h42433 =
	     (!x__h42762[47] &&
	      IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d186 ;
  assign x__h424516 =
	     coarseFreq_cordic_y_[23] ?
	       -coarseFreq_cordic_y_ :
	       coarseFreq_cordic_y_ ;
  assign x__h427344 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456[12] &&
	      fpart__h427088 != 12'd0) ?
	       y_avValue_snd__h427278 :
	       fpart__h427088 ;
  assign x__h42762 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 :
	       IF_coarseFreq_cordic_x__9_PLUS_coarseFreq_cord_ETC___d172 ;
  assign x__h428124 =
	     (SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520[12] &&
	      fpart__h427874 != 12'd0) ?
	       y_avValue_snd__h428058 :
	       fpart__h427874 ;
  assign x__h42817 =
	     coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168[23] ?
	       -coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 :
	       coarseFreq_cordic_x__9_PLUS_coarseFreq_cordic__ETC___d168 ;
  assign x__h45178 =
	     (!x__h45507[47] &&
	      IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d225 ;
  assign x__h45507 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 :
	       IF_coarseFreq_cordic_y__0_MINUS_coarseFreq_cor_ETC___d211 ;
  assign x__h45562 =
	     coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207[23] ?
	       -coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 :
	       coarseFreq_cordic_y__0_MINUS_coarseFreq_cordic_ETC___d207 ;
  assign x__h48620 = coarseFreq_cordic_x_ - x__h49697 ;
  assign x__h48720 = coarseFreq_cordic_y_ + x__h49768 ;
  assign x__h48791 =
	     coarseFreq_cordic_z_ -
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h49682 = coarseFreq_cordic_x_ + x__h49697 ;
  assign x__h49697 =
	     coarseFreq_cordic_y_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_y_[23]}} ;
  assign x__h49753 = coarseFreq_cordic_y_ - x__h49768 ;
  assign x__h49768 =
	     coarseFreq_cordic_x_ >> coarseFreq_cordic_n |
	     ~(24'hFFFFFF >> coarseFreq_cordic_n) &
	     {24{coarseFreq_cordic_x_[23]}} ;
  assign x__h49824 =
	     coarseFreq_cordic_z_ +
	     _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign y__h427527 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1479[44:0] +
	     digit__h427381 ;
  assign y__h427616 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1488[44:0] +
	     digit__h427470 ;
  assign y__h427705 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1497[44:0] +
	     digit__h427559 ;
  assign y__h427794 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1506[44:0] +
	     digit__h427648 ;
  assign y__h428307 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_coars_ETC___d1543[44:0] +
	     digit__h428161 ;
  assign y__h428396 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1552[44:0] +
	     digit__h428250 ;
  assign y__h428485 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1561[44:0] +
	     digit__h428339 ;
  assign y__h428574 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1570[44:0] +
	     digit__h428428 ;
  assign y_avValue_snd__h427278 = 12'd0 - fpart__h427088 ;
  assign y_avValue_snd__h428058 = 12'd0 - fpart__h427874 ;
  assign y_f__h104091 =
	     (x__h103136[11] &&
	      (x__h103136[47] || x__h103136[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h107271 =
	     (x__h106366[11] &&
	      (x__h106366[47] || x__h106366[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h109989 =
	     (x__h109090[11] &&
	      (x__h109090[47] || x__h109090[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h112733 =
	     (x__h111840[11] &&
	      (x__h111840[47] || x__h111840[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h115445 =
	     (x__h114552[11] &&
	      (x__h114552[47] || x__h114552[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h120957 =
	     (x__h120008[11] &&
	      (x__h120008[47] || x__h120008[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h123812 =
	     (x__h122863[11] &&
	      (x__h122863[47] || x__h122863[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h127688 =
	     (x__h126795[11] &&
	      (x__h126795[47] || x__h126795[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h130415 =
	     (x__h129522[11] &&
	      (x__h129522[47] || x__h129522[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h133793 =
	     (x__h132900[11] &&
	      (x__h132900[47] || x__h132900[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h135885 =
	     (x__h132234[11] &&
	      (x__h132234[47] || x__h132234[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h137795 =
	     (x__h126115[1] && (x__h126115[38] || x__h126115[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h149535 =
	     (x__h145894[11] &&
	      (x__h145894[47] || x__h145894[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h151445 =
	     (x__h139775[1] && (x__h139775[38] || x__h139775[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h194304 =
	     (x__h119081[11] &&
	      (x__h119081[47] || x__h119081[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h37736 =
	     (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[11] &&
	      (IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[47] ||
	       IF_coarseFreq_cordic_x__9_MINUS_coarseFreq_cor_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h40481 =
	     (x__h39584[11] && (x__h39584[47] || x__h39584[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h406076 =
	     (IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166[11] &&
	      (IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166[47] ||
	       IF_SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO__ETC___d1166[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h408791 =
	     (x__h407895[11] &&
	      (x__h407895[47] || x__h407895[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h411516 =
	     (x__h410620[11] &&
	      (x__h410620[47] || x__h410620[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h414231 =
	     (x__h413335[11] &&
	      (x__h413335[47] || x__h413335[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h419259 =
	     (IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342[11] &&
	      (IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342[47] ||
	       IF_coarseFreq_fsError_336_BIT_23_337_THEN_2573_ETC___d1342[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h422563 =
	     (IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383[11] &&
	      (IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383[47] ||
	       IF_coarseFreq_cordic_x__9_BIT_23_378_THEN_NEG__ETC___d1383[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h425358 =
	     (IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421[11] &&
	      (IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421[47] ||
	       IF_coarseFreq_cordic_y__0_BIT_23_416_THEN_NEG__ETC___d1421[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h43659 =
	     (x__h42762[11] && (x__h42762[47] || x__h42762[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h46404 =
	     (x__h45507[11] && (x__h45507[47] || x__h45507[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h427088 = coarseFreq_samples_0[35:24];
      10'd1: fpart__h427088 = coarseFreq_samples_1[35:24];
      10'd2: fpart__h427088 = coarseFreq_samples_2[35:24];
      10'd3: fpart__h427088 = coarseFreq_samples_3[35:24];
      10'd4: fpart__h427088 = coarseFreq_samples_4[35:24];
      10'd5: fpart__h427088 = coarseFreq_samples_5[35:24];
      10'd6: fpart__h427088 = coarseFreq_samples_6[35:24];
      10'd7: fpart__h427088 = coarseFreq_samples_7[35:24];
      10'd8: fpart__h427088 = coarseFreq_samples_8[35:24];
      10'd9: fpart__h427088 = coarseFreq_samples_9[35:24];
      10'd10: fpart__h427088 = coarseFreq_samples_10[35:24];
      10'd11: fpart__h427088 = coarseFreq_samples_11[35:24];
      10'd12: fpart__h427088 = coarseFreq_samples_12[35:24];
      10'd13: fpart__h427088 = coarseFreq_samples_13[35:24];
      10'd14: fpart__h427088 = coarseFreq_samples_14[35:24];
      10'd15: fpart__h427088 = coarseFreq_samples_15[35:24];
      10'd16: fpart__h427088 = coarseFreq_samples_16[35:24];
      10'd17: fpart__h427088 = coarseFreq_samples_17[35:24];
      10'd18: fpart__h427088 = coarseFreq_samples_18[35:24];
      10'd19: fpart__h427088 = coarseFreq_samples_19[35:24];
      default: fpart__h427088 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0: fpart__h427874 = coarseFreq_samples_0[11:0];
      10'd1: fpart__h427874 = coarseFreq_samples_1[11:0];
      10'd2: fpart__h427874 = coarseFreq_samples_2[11:0];
      10'd3: fpart__h427874 = coarseFreq_samples_3[11:0];
      10'd4: fpart__h427874 = coarseFreq_samples_4[11:0];
      10'd5: fpart__h427874 = coarseFreq_samples_5[11:0];
      10'd6: fpart__h427874 = coarseFreq_samples_6[11:0];
      10'd7: fpart__h427874 = coarseFreq_samples_7[11:0];
      10'd8: fpart__h427874 = coarseFreq_samples_8[11:0];
      10'd9: fpart__h427874 = coarseFreq_samples_9[11:0];
      10'd10: fpart__h427874 = coarseFreq_samples_10[11:0];
      10'd11: fpart__h427874 = coarseFreq_samples_11[11:0];
      10'd12: fpart__h427874 = coarseFreq_samples_12[11:0];
      10'd13: fpart__h427874 = coarseFreq_samples_13[11:0];
      10'd14: fpart__h427874 = coarseFreq_samples_14[11:0];
      10'd15: fpart__h427874 = coarseFreq_samples_15[11:0];
      10'd16: fpart__h427874 = coarseFreq_samples_16[11:0];
      10'd17: fpart__h427874 = coarseFreq_samples_17[11:0];
      10'd18: fpart__h427874 = coarseFreq_samples_18[11:0];
      10'd19: fpart__h427874 = coarseFreq_samples_19[11:0];
      default: fpart__h427874 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_cordic_n)
  begin
    case (coarseFreq_cordic_n)
      4'd0: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3216;
      4'd1: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1899;
      4'd2: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1003;
      4'd3: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd509;
      4'd4: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd255;
      4'd5: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd127;
      4'd6: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd63;
      4'd7: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd31;
      4'd8: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd15;
      4'd9: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd7;
      4'd10: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd3;
      4'd11: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 = 12'd0;
      default: CASE_coarseFreq_cordic_n_0_3216_1_1899_2_1003__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_0[23:12];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_1[23:12];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_2[23:12];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_3[23:12];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_4[23:12];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_5[23:12];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_6[23:12];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_7[23:12];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_8[23:12];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_9[23:12];
      10'd10:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_10[23:12];
      10'd11:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_11[23:12];
      10'd12:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_12[23:12];
      10'd13:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_13[23:12];
      10'd14:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_14[23:12];
      10'd15:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_15[23:12];
      10'd16:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_16[23:12];
      10'd17:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_17[23:12];
      10'd18:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_18[23:12];
      10'd19:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
	      coarseFreq_samples_19[23:12];
      default: SEL_ARR_coarseFreq_samples_0_82_BITS_23_TO_12__ETC___d468 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(coarseFreq_n or
	  coarseFreq_samples_0 or
	  coarseFreq_samples_1 or
	  coarseFreq_samples_2 or
	  coarseFreq_samples_3 or
	  coarseFreq_samples_4 or
	  coarseFreq_samples_5 or
	  coarseFreq_samples_6 or
	  coarseFreq_samples_7 or
	  coarseFreq_samples_8 or
	  coarseFreq_samples_9 or
	  coarseFreq_samples_10 or
	  coarseFreq_samples_11 or
	  coarseFreq_samples_12 or
	  coarseFreq_samples_13 or
	  coarseFreq_samples_14 or
	  coarseFreq_samples_15 or
	  coarseFreq_samples_16 or
	  coarseFreq_samples_17 or
	  coarseFreq_samples_18 or coarseFreq_samples_19)
  begin
    case (coarseFreq_n)
      10'd0:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_0[47:36];
      10'd1:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_1[47:36];
      10'd2:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_2[47:36];
      10'd3:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_3[47:36];
      10'd4:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_4[47:36];
      10'd5:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_5[47:36];
      10'd6:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_6[47:36];
      10'd7:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_7[47:36];
      10'd8:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_8[47:36];
      10'd9:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_9[47:36];
      10'd10:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_10[47:36];
      10'd11:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_11[47:36];
      10'd12:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_12[47:36];
      10'd13:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_13[47:36];
      10'd14:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_14[47:36];
      10'd15:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_15[47:36];
      10'd16:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_16[47:36];
      10'd17:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_17[47:36];
      10'd18:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_18[47:36];
      10'd19:
	  SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
	      coarseFreq_samples_19[47:36];
      default: SEL_ARR_coarseFreq_samples_0_82_BITS_47_TO_36__ETC___d423 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    5'd0;
	coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	    1'd1;
	coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	    4'd0;
	coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY 24'd0;
	fV <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	inV <= `BSV_ASSIGNMENT_DELAY 12'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	outV <= `BSV_ASSIGNMENT_DELAY 24'd0;
	running <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 3'd0;
      end
    else
      begin
        if (coarseFreq_accumError$EN)
	  coarseFreq_accumError <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_accumError$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg$EN)
	  coarseFreq_coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg$D_IN;
	if (coarseFreq_coarseErrorCalc_start_reg_1$EN)
	  coarseFreq_coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_start_reg_1$D_IN;
	if (coarseFreq_coarseErrorCalc_state_can_overlap$EN)
	  coarseFreq_coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_can_overlap$D_IN;
	if (coarseFreq_coarseErrorCalc_state_fired$EN)
	  coarseFreq_coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_fired$D_IN;
	if (coarseFreq_coarseErrorCalc_state_mkFSMstate$EN)
	  coarseFreq_coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_coarseErrorCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg$EN)
	  coarseFreq_cordic_atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg$D_IN;
	if (coarseFreq_cordic_atanCalc_start_reg_1$EN)
	  coarseFreq_cordic_atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_start_reg_1$D_IN;
	if (coarseFreq_cordic_atanCalc_state_can_overlap$EN)
	  coarseFreq_cordic_atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_can_overlap$D_IN;
	if (coarseFreq_cordic_atanCalc_state_fired$EN)
	  coarseFreq_cordic_atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_fired$D_IN;
	if (coarseFreq_cordic_atanCalc_state_mkFSMstate$EN)
	  coarseFreq_cordic_atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_atanCalc_state_mkFSMstate$D_IN;
	if (coarseFreq_cordic_n$EN)
	  coarseFreq_cordic_n <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_n$D_IN;
	if (coarseFreq_cordic_x_$EN)
	  coarseFreq_cordic_x_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_x_$D_IN;
	if (coarseFreq_cordic_y_$EN)
	  coarseFreq_cordic_y_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_y_$D_IN;
	if (coarseFreq_cordic_z_$EN)
	  coarseFreq_cordic_z_ <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_cordic_z_$D_IN;
	if (coarseFreq_currSample$EN)
	  coarseFreq_currSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_currSample$D_IN;
	if (coarseFreq_fsError$EN)
	  coarseFreq_fsError <= `BSV_ASSIGNMENT_DELAY coarseFreq_fsError$D_IN;
	if (coarseFreq_lastSample$EN)
	  coarseFreq_lastSample <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_lastSample$D_IN;
	if (coarseFreq_n$EN)
	  coarseFreq_n <= `BSV_ASSIGNMENT_DELAY coarseFreq_n$D_IN;
	if (coarseFreq_samples_0$EN)
	  coarseFreq_samples_0 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_0$D_IN;
	if (coarseFreq_samples_1$EN)
	  coarseFreq_samples_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_1$D_IN;
	if (coarseFreq_samples_10$EN)
	  coarseFreq_samples_10 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_10$D_IN;
	if (coarseFreq_samples_11$EN)
	  coarseFreq_samples_11 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_11$D_IN;
	if (coarseFreq_samples_12$EN)
	  coarseFreq_samples_12 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_12$D_IN;
	if (coarseFreq_samples_13$EN)
	  coarseFreq_samples_13 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_13$D_IN;
	if (coarseFreq_samples_14$EN)
	  coarseFreq_samples_14 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_14$D_IN;
	if (coarseFreq_samples_15$EN)
	  coarseFreq_samples_15 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_15$D_IN;
	if (coarseFreq_samples_16$EN)
	  coarseFreq_samples_16 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_16$D_IN;
	if (coarseFreq_samples_17$EN)
	  coarseFreq_samples_17 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_17$D_IN;
	if (coarseFreq_samples_18$EN)
	  coarseFreq_samples_18 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_18$D_IN;
	if (coarseFreq_samples_19$EN)
	  coarseFreq_samples_19 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_19$D_IN;
	if (coarseFreq_samples_2$EN)
	  coarseFreq_samples_2 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_2$D_IN;
	if (coarseFreq_samples_3$EN)
	  coarseFreq_samples_3 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_3$D_IN;
	if (coarseFreq_samples_4$EN)
	  coarseFreq_samples_4 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_4$D_IN;
	if (coarseFreq_samples_5$EN)
	  coarseFreq_samples_5 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_5$D_IN;
	if (coarseFreq_samples_6$EN)
	  coarseFreq_samples_6 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_6$D_IN;
	if (coarseFreq_samples_7$EN)
	  coarseFreq_samples_7 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_7$D_IN;
	if (coarseFreq_samples_8$EN)
	  coarseFreq_samples_8 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_8$D_IN;
	if (coarseFreq_samples_9$EN)
	  coarseFreq_samples_9 <= `BSV_ASSIGNMENT_DELAY
	      coarseFreq_samples_9$D_IN;
	if (coarseFreq_xFix$EN)
	  coarseFreq_xFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_xFix$D_IN;
	if (coarseFreq_yFix$EN)
	  coarseFreq_yFix <= `BSV_ASSIGNMENT_DELAY coarseFreq_yFix$D_IN;
	if (fV$EN) fV <= `BSV_ASSIGNMENT_DELAY fV$D_IN;
	if (inV$EN) inV <= `BSV_ASSIGNMENT_DELAY inV$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (outV$EN) outV <= `BSV_ASSIGNMENT_DELAY outV$D_IN;
	if (running$EN) running <= `BSV_ASSIGNMENT_DELAY running$D_IN;
	if (start_reg$EN) start_reg <= `BSV_ASSIGNMENT_DELAY start_reg$D_IN;
	if (start_reg_1$EN)
	  start_reg_1 <= `BSV_ASSIGNMENT_DELAY start_reg_1$D_IN;
	if (state_can_overlap$EN)
	  state_can_overlap <= `BSV_ASSIGNMENT_DELAY state_can_overlap$D_IN;
	if (state_fired$EN)
	  state_fired <= `BSV_ASSIGNMENT_DELAY state_fired$D_IN;
	if (state_mkFSMstate$EN)
	  state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY state_mkFSMstate$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    coarseFreq_accumError = 48'hAAAAAAAAAAAA;
    coarseFreq_coarseErrorCalc_start_reg = 1'h0;
    coarseFreq_coarseErrorCalc_start_reg_1 = 1'h0;
    coarseFreq_coarseErrorCalc_state_can_overlap = 1'h0;
    coarseFreq_coarseErrorCalc_state_fired = 1'h0;
    coarseFreq_coarseErrorCalc_state_mkFSMstate = 5'h0A;
    coarseFreq_cordic_atanCalc_start_reg = 1'h0;
    coarseFreq_cordic_atanCalc_start_reg_1 = 1'h0;
    coarseFreq_cordic_atanCalc_state_can_overlap = 1'h0;
    coarseFreq_cordic_atanCalc_state_fired = 1'h0;
    coarseFreq_cordic_atanCalc_state_mkFSMstate = 4'hA;
    coarseFreq_cordic_n = 4'hA;
    coarseFreq_cordic_x_ = 24'hAAAAAA;
    coarseFreq_cordic_y_ = 24'hAAAAAA;
    coarseFreq_cordic_z_ = 24'hAAAAAA;
    coarseFreq_currSample = 48'hAAAAAAAAAAAA;
    coarseFreq_fsError = 24'hAAAAAA;
    coarseFreq_lastSample = 48'hAAAAAAAAAAAA;
    coarseFreq_n = 10'h2AA;
    coarseFreq_samples_0 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_1 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_10 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_11 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_12 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_13 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_14 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_15 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_16 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_17 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_18 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_19 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_2 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_3 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_4 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_5 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_6 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_7 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_8 = 48'hAAAAAAAAAAAA;
    coarseFreq_samples_9 = 48'hAAAAAAAAAAAA;
    coarseFreq_xFix = 24'hAAAAAA;
    coarseFreq_yFix = 24'hAAAAAA;
    fV = 24'hAAAAAA;
    inV = 12'hAAA;
    n = 10'h2AA;
    outV = 24'hAAAAAA;
    running = 1'h0;
    start_reg = 1'h0;
    start_reg_1 = 1'h0;
    state_can_overlap = 1'h0;
    state_fired = 1'h0;
    state_mkFSMstate = 3'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (state_mkFSMstate == 3'd1 &&
	  (WILL_FIRE_RL_action_l40c23 || WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 38, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_f_init_l38c9] and\n  [RL_action_l40c23, RL_action_l41c13, RL_action_f_update_l38c9] ) fired in\n  the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l40c23 &&
	  (WILL_FIRE_RL_action_l41c13 || state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 40, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l40c23] and\n  [RL_action_l41c13, RL_action_f_update_l38c9] ) fired in the same clock\n  cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l41c13 && state_mkFSMstate == 3'd4)
	$display("Error: \"Tb_tang.bsv\", line 41, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l41c13] and\n  [RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_action_l28c11 &&
	  (state_mkFSMstate == 3'd1 || WILL_FIRE_RL_action_l40c23 ||
	   WILL_FIRE_RL_action_l41c13 ||
	   state_mkFSMstate == 3'd4))
	$display("Error: \"Tb_tang.bsv\", line 28, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l28c11] and\n  [RL_action_f_init_l38c9, RL_action_l40c23, RL_action_l41c13,\n  RL_action_f_update_l38c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (running &&
	  abort_whas__603_AND_abort_wget__604_605_OR_sta_ETC___d1675 &&
	  !start_reg)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 &&
	  coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10)
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 66, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 47, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 48, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l48c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 49, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l49c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 50, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l50c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 51, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l51c11] and\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 53, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l53c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 59, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l59c32] and\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 65, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9] and\n  [RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l46c12 &&
	  (WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l47c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_coarseFreq_cordic_atanCalc_action_l66c13 ||
	   coarseFreq_cordic_atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 46, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_cordic_atanCalc_action_l46c12] and\n  [RL_coarseFreq_cordic_atanCalc_action_l47c11,\n  RL_coarseFreq_cordic_atanCalc_action_l48c12,\n  RL_coarseFreq_cordic_atanCalc_action_l49c11,\n  RL_coarseFreq_cordic_atanCalc_action_l50c12,\n  RL_coarseFreq_cordic_atanCalc_action_l51c11,\n  RL_coarseFreq_cordic_atanCalc_action_l53c32,\n  RL_coarseFreq_cordic_atanCalc_action_l59c32,\n  RL_coarseFreq_cordic_atanCalc_action_f_init_l65c9,\n  RL_coarseFreq_cordic_atanCalc_action_l66c13,\n  RL_coarseFreq_cordic_atanCalc_action_f_update_l65c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456[12] &&
	  fpart__h427088 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456[12] &&
	  fpart__h427088 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456[12] ||
	   fpart__h427088 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_47_T_ETC___d1456));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427314);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427381);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427470);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427559);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427648);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h427737);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520[12] &&
	  fpart__h427874 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520[12] &&
	  fpart__h427874 != 12'd0 &&
	  SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  (!SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520[12] ||
	   fpart__h427874 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_coarseFreq_samples_0_82_BITS_23_T_ETC___d1520));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428094);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428161);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428250);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428339);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428428);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20)
	$write("%0d", digit__h428517);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 83, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 84, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l84c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 85, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l85c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 88, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 87, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l87c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 91, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l91c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 92, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l92c23] and\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 93, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l93c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 94, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l94c24] and\n  [RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 95, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l95c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 98, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l98c17] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 100, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9] and\n  [RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 101, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l101c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 &&
	  (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 102, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l102c19] and\n  [RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 103, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l103c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 &&
	  coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21)
	$display("Error: \"CoarseFreq_optimal.bsv\", line 109, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l109c13] and\n  [RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l82c20 &&
	  (coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l88c22 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l91c24 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l98c17 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd16 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l101c20 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l102c19 ||
	   WILL_FIRE_RL_coarseFreq_coarseErrorCalc_action_l103c13 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd20 ||
	   coarseFreq_coarseErrorCalc_state_mkFSMstate == 5'd21))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 82, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseFreq_coarseErrorCalc_action_l82c20] and\n  [RL_coarseFreq_coarseErrorCalc_action_l83c20,\n  RL_coarseFreq_coarseErrorCalc_action_l84c20,\n  RL_coarseFreq_coarseErrorCalc_action_l85c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_l87c20,\n  RL_coarseFreq_coarseErrorCalc_action_l88c22,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l91c24,\n  RL_coarseFreq_coarseErrorCalc_action_l92c23,\n  RL_coarseFreq_coarseErrorCalc_action_l93c24,\n  RL_coarseFreq_coarseErrorCalc_action_l94c24,\n  RL_coarseFreq_coarseErrorCalc_action_l95c20,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseFreq_coarseErrorCalc_action_l98c17,\n  RL_coarseFreq_coarseErrorCalc_action_f_init_l100c9,\n  RL_coarseFreq_coarseErrorCalc_action_l101c20,\n  RL_coarseFreq_coarseErrorCalc_action_l102c19,\n  RL_coarseFreq_coarseErrorCalc_action_l103c13,\n  RL_coarseFreq_coarseErrorCalc_action_l109c13,\n  RL_coarseFreq_coarseErrorCalc_action_f_update_l100c9] ) fired in the same\n  clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkTb

