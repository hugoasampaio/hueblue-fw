//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 22:35:12 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_addSample                  O     1 reg
// getError                       O    24 reg
// RDY_getError                   O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// addSample_sample               I    48 reg
// EN_addSample                   I     1
// EN_getError                    I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCoarseFreqO(CLK,
		     RST_N,

		     addSample_sample,
		     EN_addSample,
		     RDY_addSample,

		     EN_getError,
		     getError,
		     RDY_getError);
  input  CLK;
  input  RST_N;

  // action method addSample
  input  [47 : 0] addSample_sample;
  input  EN_addSample;
  output RDY_addSample;

  // actionvalue method getError
  input  EN_getError;
  output [23 : 0] getError;
  output RDY_getError;

  // signals for module outputs
  wire [23 : 0] getError;
  wire RDY_addSample, RDY_getError;

  // inlined wires
  wire coarseErrorCalc_start_wire$whas, coarseErrorCalc_state_set_pw$whas;

  // register accumError
  reg [47 : 0] accumError;
  wire [47 : 0] accumError$D_IN;
  wire accumError$EN;

  // register coarseErrorCalc_start_reg
  reg coarseErrorCalc_start_reg;
  wire coarseErrorCalc_start_reg$D_IN, coarseErrorCalc_start_reg$EN;

  // register coarseErrorCalc_start_reg_1
  reg coarseErrorCalc_start_reg_1;
  wire coarseErrorCalc_start_reg_1$D_IN, coarseErrorCalc_start_reg_1$EN;

  // register coarseErrorCalc_state_can_overlap
  reg coarseErrorCalc_state_can_overlap;
  wire coarseErrorCalc_state_can_overlap$D_IN,
       coarseErrorCalc_state_can_overlap$EN;

  // register coarseErrorCalc_state_fired
  reg coarseErrorCalc_state_fired;
  wire coarseErrorCalc_state_fired$D_IN, coarseErrorCalc_state_fired$EN;

  // register coarseErrorCalc_state_mkFSMstate
  reg [4 : 0] coarseErrorCalc_state_mkFSMstate;
  reg [4 : 0] coarseErrorCalc_state_mkFSMstate$D_IN;
  wire coarseErrorCalc_state_mkFSMstate$EN;

  // register currSample
  reg [47 : 0] currSample;
  wire [47 : 0] currSample$D_IN;
  wire currSample$EN;

  // register fsError
  reg [23 : 0] fsError;
  wire [23 : 0] fsError$D_IN;
  wire fsError$EN;

  // register lastSample
  reg [47 : 0] lastSample;
  reg [47 : 0] lastSample$D_IN;
  wire lastSample$EN;

  // register n
  reg [9 : 0] n;
  wire [9 : 0] n$D_IN;
  wire n$EN;

  // register samples_0
  reg [47 : 0] samples_0;
  reg [47 : 0] samples_0$D_IN;
  wire samples_0$EN;

  // register samples_1
  reg [47 : 0] samples_1;
  reg [47 : 0] samples_1$D_IN;
  wire samples_1$EN;

  // register samples_2
  reg [47 : 0] samples_2;
  reg [47 : 0] samples_2$D_IN;
  wire samples_2$EN;

  // register samples_3
  reg [47 : 0] samples_3;
  reg [47 : 0] samples_3$D_IN;
  wire samples_3$EN;

  // register samples_4
  reg [47 : 0] samples_4;
  reg [47 : 0] samples_4$D_IN;
  wire samples_4$EN;

  // register samples_5
  reg [47 : 0] samples_5;
  reg [47 : 0] samples_5$D_IN;
  wire samples_5$EN;

  // register samples_6
  reg [47 : 0] samples_6;
  reg [47 : 0] samples_6$D_IN;
  wire samples_6$EN;

  // register samples_7
  reg [47 : 0] samples_7;
  reg [47 : 0] samples_7$D_IN;
  wire samples_7$EN;

  // register samples_8
  reg [47 : 0] samples_8;
  reg [47 : 0] samples_8$D_IN;
  wire samples_8$EN;

  // register samples_9
  reg [47 : 0] samples_9;
  reg [47 : 0] samples_9$D_IN;
  wire samples_9$EN;

  // register xFix
  reg [23 : 0] xFix;
  wire [23 : 0] xFix$D_IN;
  wire xFix$EN;

  // register yFix
  reg [23 : 0] yFix;
  wire [23 : 0] yFix$D_IN;
  wire yFix$EN;

  // ports of submodule cordic
  wire [23 : 0] cordic$getX,
		cordic$getY,
		cordic$setPolar_x,
		cordic$setPolar_y,
		cordic$setPolar_z;
  wire cordic$EN_getX,
       cordic$EN_getY,
       cordic$EN_setPolar,
       cordic$RDY_getX,
       cordic$RDY_getY,
       cordic$RDY_setPolar;

  // ports of submodule newSample
  wire [47 : 0] newSample$D_IN, newSample$D_OUT;
  wire newSample$CLR,
       newSample$DEQ,
       newSample$EMPTY_N,
       newSample$ENQ,
       newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9,
       WILL_FIRE_RL_coarseErrorCalc_action_l102c20,
       WILL_FIRE_RL_coarseErrorCalc_action_l103c19,
       WILL_FIRE_RL_coarseErrorCalc_action_l104c13,
       WILL_FIRE_RL_coarseErrorCalc_action_l82c20,
       WILL_FIRE_RL_coarseErrorCalc_action_l87c20,
       WILL_FIRE_RL_coarseErrorCalc_action_l88c22,
       WILL_FIRE_RL_coarseErrorCalc_action_l91c24,
       WILL_FIRE_RL_coarseErrorCalc_action_l99c17,
       WILL_FIRE_RL_coarseErrorCalc_fsm_start,
       WILL_FIRE_RL_coarseErrorCalc_idle_l81c22,
       WILL_FIRE_RL_coarseErrorCalc_idle_l81c22_1;

  // inputs to muxes for submodule ports
  wire [47 : 0] MUX_accumError$write_1__VAL_1,
		MUX_currSample$write_1__VAL_1,
		MUX_lastSample$write_1__VAL_2,
		MUX_lastSample$write_1__VAL_3,
		MUX_samples_0$write_1__VAL_3;
  wire [23 : 0] MUX_fsError$write_1__VAL_1;
  wire [9 : 0] MUX_n$write_1__VAL_1;
  wire MUX_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1,
       MUX_n$write_1__SEL_1,
       MUX_samples_0$write_1__SEL_1,
       MUX_samples_0$write_1__SEL_2,
       MUX_samples_0$write_1__SEL_3,
       MUX_samples_1$write_1__SEL_1,
       MUX_samples_1$write_1__SEL_2,
       MUX_samples_1$write_1__SEL_3,
       MUX_samples_2$write_1__SEL_1,
       MUX_samples_2$write_1__SEL_2,
       MUX_samples_2$write_1__SEL_3,
       MUX_samples_3$write_1__SEL_1,
       MUX_samples_3$write_1__SEL_2,
       MUX_samples_3$write_1__SEL_3,
       MUX_samples_4$write_1__SEL_1,
       MUX_samples_4$write_1__SEL_2,
       MUX_samples_4$write_1__SEL_3,
       MUX_samples_5$write_1__SEL_1,
       MUX_samples_5$write_1__SEL_2,
       MUX_samples_5$write_1__SEL_3,
       MUX_samples_6$write_1__SEL_1,
       MUX_samples_6$write_1__SEL_2,
       MUX_samples_6$write_1__SEL_3,
       MUX_samples_7$write_1__SEL_1,
       MUX_samples_7$write_1__SEL_2,
       MUX_samples_7$write_1__SEL_3,
       MUX_samples_8$write_1__SEL_1,
       MUX_samples_8$write_1__SEL_2,
       MUX_samples_8$write_1__SEL_3,
       MUX_samples_9$write_1__SEL_1,
       MUX_samples_9$write_1__SEL_2,
       MUX_samples_9$write_1__SEL_3;

  // remaining internal signals
  reg [11 : 0] SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133,
	       SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108,
	       fpart__h264013,
	       fpart__h264789;
  wire [89 : 0] _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1117,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1120,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1128,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1137,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1146,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1155,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1053,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1056,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1064,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1073,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1082,
		_0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1091,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1059,
		_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1123,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1068,
		_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1132,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1077,
		_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1141,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1086,
		_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1150,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1095,
		_10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1159;
  wire [47 : 0] IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d668,
		IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d574,
		IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d869,
		IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d946,
		IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d822,
		IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824,
		IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d908,
		IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d466,
		IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d251,
		IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d328,
		IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d207,
		IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d290,
		IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993,
		_25734_MUL_IF_fsError_87_BIT_23_88_THEN_NEG_fsE_ETC___d991,
		_651_MUL_IF_IF_accumError_67_BIT_23_80_AND_NOT__ETC___d770,
		x__h250375,
		x__h253108,
		x__h255823,
		x__h54665,
		x__h57852,
		x__h60576,
		x__h63304,
		x__h66016,
		x__h70961,
		x__h71893,
		x__h74753,
		x__h78685,
		x__h81412,
		x__h84124,
		x__h84790,
		x__h97784;
  wire [44 : 0] digit__h264229,
		digit__h264296,
		digit__h264385,
		digit__h264474,
		digit__h264563,
		digit__h264652,
		digit__h264999,
		digit__h265066,
		digit__h265155,
		digit__h265244,
		digit__h265333,
		digit__h265422,
		tx64294_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1,
		tx64383_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2,
		tx64472_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3,
		tx64561_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4,
		tx64650_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5,
		tx65064_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6,
		tx65153_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7,
		tx65242_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8,
		tx65331_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9,
		tx65420_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10,
		tx__h264294,
		tx__h264383,
		tx__h264472,
		tx__h264561,
		tx__h264650,
		tx__h265064,
		tx__h265153,
		tx__h265242,
		tx__h265331,
		tx__h265420,
		y__h264442,
		y__h264531,
		y__h264620,
		y__h264709,
		y__h265212,
		y__h265301,
		y__h265390,
		y__h265479;
  wire [38 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d626,
		IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d711,
		x__h78005,
		x__h88962,
		x__h91665;
  wire [36 : 0] IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d638,
		IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d723,
		x__h77666,
		x__h91326;
  wire [35 : 0] IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d682,
		IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d588,
		IF_IF_accumError_67_BIT_23_80_AND_NOT_IF_accum_ETC___d784,
		IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839,
		IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008,
		IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d883,
		IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d960,
		IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d836,
		IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d922,
		IF_accumError_67_BIT_23_80_THEN_0_CONCAT_IF_ac_ETC___d397,
		IF_accumError_67_BIT_23_80_THEN_NEG_accumError_ETC___d515,
		IF_accumError_67_BIT_47_19_AND_NOT_accumError__ETC___d480,
		IF_accumError_67_BIT_47_19_THEN_0_CONCAT_IF_ac_ETC___d436,
		IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d548,
		IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d265,
		IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d342,
		IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d221,
		IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d304,
		IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d1005,
		IF_lastSample_50_BIT_23_52_THEN_0_CONCAT_IF_la_ETC___d170,
		x__h250046,
		x__h252779,
		x__h255494,
		x__h54319,
		x__h57523,
		x__h60247,
		x__h62975,
		x__h65687,
		x__h70632,
		x__h71564,
		x__h74424,
		x__h78356,
		x__h81083,
		x__h83795,
		x__h84461,
		x__h97455;
  wire [25 : 0] ax2_f__h78028;
  wire [23 : 0] IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d658,
		IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d743,
		IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535,
		IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609,
		IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568,
		IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703,
		IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d751,
		IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d753,
		IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF_NOT__ETC___d418,
		IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d752,
		IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF_NOT__ETC___d457,
		_16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d659,
		ax1_f__h78033,
		x__h100583,
		x__h102631,
		x__h145364,
		x__h246972,
		x__h247723,
		x__h250430,
		x__h252449,
		x__h253155,
		x__h253174,
		x__h255889,
		x__h260887,
		x__h57193,
		x__h57928,
		x__h60627,
		x__h60646,
		x__h62645,
		x__h63349,
		x__h68488,
		x__h68525,
		x__h77044,
		x__h77076,
		x__h77209,
		x__h78730,
		x__h78749,
		x__h86933,
		x__h88981;
  wire [12 : 0] SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100,
		SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036,
		ax2_i__h78027;
  wire [11 : 0] IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d764,
		IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d766,
		IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d765,
		res_f__h80730,
		res_i__h90857,
		x__h264259,
		x__h265029,
		x__h78035,
		y_avValue_snd__h264193,
		y_avValue_snd__h264963,
		y_f__h101425,
		y_f__h103335,
		y_f__h146194,
		y_f__h248556,
		y_f__h251279,
		y_f__h254004,
		y_f__h256719,
		y_f__h261717,
		y_f__h55623,
		y_f__h58757,
		y_f__h61475,
		y_f__h64197,
		y_f__h66909,
		y_f__h72842,
		y_f__h75702,
		y_f__h79578,
		y_f__h82305,
		y_f__h85683,
		y_f__h87775,
		y_f__h89685;
  wire NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459,
       NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661,
       coarseErrorCalc_abort_whas_AND_coarseErrorCalc_ETC___d1175,
       n_6_ULT_5___d37;

  // action method addSample
  assign RDY_addSample = newSample$FULL_N ;

  // actionvalue method getError
  assign getError = fsError ;
  assign RDY_getError =
	     coarseErrorCalc_abort_whas_AND_coarseErrorCalc_ETC___d1175 &&
	     !coarseErrorCalc_start_reg ;

  // submodule cordic
  mkRotate cordic(.CLK(CLK),
		  .RST_N(RST_N),
		  .setPolar_x(cordic$setPolar_x),
		  .setPolar_y(cordic$setPolar_y),
		  .setPolar_z(cordic$setPolar_z),
		  .EN_setPolar(cordic$EN_setPolar),
		  .EN_getX(cordic$EN_getX),
		  .EN_getY(cordic$EN_getY),
		  .RDY_setPolar(cordic$RDY_setPolar),
		  .getX(cordic$getX),
		  .RDY_getX(cordic$RDY_getX),
		  .getY(cordic$getY),
		  .RDY_getY(cordic$RDY_getY));

  // submodule newSample
  FIFO2 #(.width(32'd48), .guarded(1'd1)) newSample(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(newSample$D_IN),
						    .ENQ(newSample$ENQ),
						    .DEQ(newSample$DEQ),
						    .CLR(newSample$CLR),
						    .D_OUT(newSample$D_OUT),
						    .FULL_N(newSample$FULL_N),
						    .EMPTY_N(newSample$EMPTY_N));

  // rule RL_coarseErrorCalc_action_l87c20
  assign WILL_FIRE_RL_coarseErrorCalc_action_l87c20 =
	     newSample$EMPTY_N && n_6_ULT_5___d37 &&
	     (coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseErrorCalc_action_l88c22
  assign WILL_FIRE_RL_coarseErrorCalc_action_l88c22 =
	     newSample$EMPTY_N && coarseErrorCalc_state_mkFSMstate == 5'd6 ;

  // rule RL_coarseErrorCalc_action_f_init_l90c9
  assign WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 =
	     !n_6_ULT_5___d37 &&
	     (coarseErrorCalc_state_mkFSMstate == 5'd5 ||
	      coarseErrorCalc_state_mkFSMstate == 5'd8) ;

  // rule RL_coarseErrorCalc_action_l91c24
  assign WILL_FIRE_RL_coarseErrorCalc_action_l91c24 =
	     n_6_ULT_5___d37 &&
	     (coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseErrorCalc_action_l99c17
  assign WILL_FIRE_RL_coarseErrorCalc_action_l99c17 =
	     !n_6_ULT_5___d37 &&
	     (coarseErrorCalc_state_mkFSMstate == 5'd9 ||
	      coarseErrorCalc_state_mkFSMstate == 5'd16) ;

  // rule RL_coarseErrorCalc_action_l102c20
  assign WILL_FIRE_RL_coarseErrorCalc_action_l102c20 =
	     n_6_ULT_5___d37 &&
	     (coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      coarseErrorCalc_state_mkFSMstate == 5'd23) ;

  // rule RL_coarseErrorCalc_action_l103c19
  assign WILL_FIRE_RL_coarseErrorCalc_action_l103c19 =
	     cordic$RDY_setPolar &&
	     coarseErrorCalc_state_mkFSMstate == 5'd19 ;

  // rule RL_coarseErrorCalc_action_l104c13
  assign WILL_FIRE_RL_coarseErrorCalc_action_l104c13 =
	     cordic$RDY_getY && cordic$RDY_getX &&
	     coarseErrorCalc_state_mkFSMstate == 5'd20 ;

  // rule RL_coarseErrorCalc_fsm_start
  assign WILL_FIRE_RL_coarseErrorCalc_fsm_start =
	     coarseErrorCalc_abort_whas_AND_coarseErrorCalc_ETC___d1175 &&
	     coarseErrorCalc_start_reg ;

  // rule RL_coarseErrorCalc_action_l82c20
  assign WILL_FIRE_RL_coarseErrorCalc_action_l82c20 =
	     coarseErrorCalc_start_wire$whas &&
	     coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	     !n_6_ULT_5___d37 && coarseErrorCalc_start_wire$whas &&
	     coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	     !n_6_ULT_5___d37 && coarseErrorCalc_start_wire$whas &&
	     coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // rule RL_coarseErrorCalc_idle_l81c22
  assign WILL_FIRE_RL_coarseErrorCalc_idle_l81c22 =
	     !n_6_ULT_5___d37 && !coarseErrorCalc_start_wire$whas &&
	     coarseErrorCalc_state_mkFSMstate == 5'd18 ;

  // rule RL_coarseErrorCalc_idle_l81c22_1
  assign WILL_FIRE_RL_coarseErrorCalc_idle_l81c22_1 =
	     !n_6_ULT_5___d37 && !coarseErrorCalc_start_wire$whas &&
	     coarseErrorCalc_state_mkFSMstate == 5'd23 ;

  // inputs to muxes for submodule ports
  assign MUX_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22 ;
  assign MUX_n$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd7 ;
  assign MUX_samples_0$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd0 ;
  assign MUX_samples_0$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd0 ;
  assign MUX_samples_0$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd0 ;
  assign MUX_samples_1$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd1 ;
  assign MUX_samples_1$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd1 ;
  assign MUX_samples_1$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd1 ;
  assign MUX_samples_2$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd2 ;
  assign MUX_samples_2$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd2 ;
  assign MUX_samples_2$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd2 ;
  assign MUX_samples_3$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd3 ;
  assign MUX_samples_3$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd3 ;
  assign MUX_samples_3$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd3 ;
  assign MUX_samples_4$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd4 ;
  assign MUX_samples_4$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd4 ;
  assign MUX_samples_4$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd4 ;
  assign MUX_samples_5$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd5 ;
  assign MUX_samples_5$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd5 ;
  assign MUX_samples_5$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd5 ;
  assign MUX_samples_6$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd6 ;
  assign MUX_samples_6$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd6 ;
  assign MUX_samples_6$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd6 ;
  assign MUX_samples_7$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd7 ;
  assign MUX_samples_7$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd7 ;
  assign MUX_samples_7$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd7 ;
  assign MUX_samples_8$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd8 ;
  assign MUX_samples_8$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd8 ;
  assign MUX_samples_8$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd8 ;
  assign MUX_samples_9$write_1__SEL_1 =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd9 ;
  assign MUX_samples_9$write_1__SEL_2 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd9 ;
  assign MUX_samples_9$write_1__SEL_3 =
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd9 ;
  assign MUX_accumError$write_1__VAL_1 = { x__h68488, x__h68525 } ;
  assign MUX_currSample$write_1__VAL_1 =
	     { x__h247723,
	       SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133,
	       fpart__h264789 } ;
  assign MUX_fsError$write_1__VAL_1 =
	     (!x__h70632[35] &&
	      (x__h70632[23] || x__h70632[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h70632[35] &&
		 (!x__h70632[23] || ~x__h70632[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h70632[23:0]) ;
  assign MUX_lastSample$write_1__VAL_2 =
	     { lastSample[47:24],
	       (!x__h54319[35] &&
		(x__h54319[23] || x__h54319[35:24] != 12'd0)) ?
		 24'd8388607 :
		 ((x__h54319[35] &&
		   (!x__h54319[23] || ~x__h54319[35:24] != 12'd0)) ?
		    24'd8388608 :
		    x__h54319[23:0]) } ;
  assign MUX_lastSample$write_1__VAL_3 = { x__h57193, x__h62645 } ;
  assign MUX_n$write_1__VAL_1 = n + 10'd1 ;
  assign MUX_samples_0$write_1__VAL_3 = { x__h246972, x__h252449 } ;

  // inlined wires
  assign coarseErrorCalc_start_wire$whas =
	     WILL_FIRE_RL_coarseErrorCalc_fsm_start ||
	     coarseErrorCalc_start_reg_1 && !coarseErrorCalc_state_fired ;
  assign coarseErrorCalc_state_set_pw$whas =
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l82c20 ;

  // register accumError
  assign accumError$D_IN =
	     (coarseErrorCalc_state_mkFSMstate == 5'd12) ?
	       MUX_accumError$write_1__VAL_1 :
	       48'd0 ;
  assign accumError$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd2 ;

  // register coarseErrorCalc_start_reg
  assign coarseErrorCalc_start_reg$D_IN =
	     !WILL_FIRE_RL_coarseErrorCalc_fsm_start ;
  assign coarseErrorCalc_start_reg$EN =
	     WILL_FIRE_RL_coarseErrorCalc_fsm_start ||
	     coarseErrorCalc_abort_whas_AND_coarseErrorCalc_ETC___d1175 &&
	     !coarseErrorCalc_start_reg ;

  // register coarseErrorCalc_start_reg_1
  assign coarseErrorCalc_start_reg_1$D_IN = coarseErrorCalc_start_wire$whas ;
  assign coarseErrorCalc_start_reg_1$EN = 1'd1 ;

  // register coarseErrorCalc_state_can_overlap
  assign coarseErrorCalc_state_can_overlap$D_IN =
	     coarseErrorCalc_state_set_pw$whas ||
	     coarseErrorCalc_state_can_overlap ;
  assign coarseErrorCalc_state_can_overlap$EN = 1'd1 ;

  // register coarseErrorCalc_state_fired
  assign coarseErrorCalc_state_fired$D_IN =
	     coarseErrorCalc_state_set_pw$whas ;
  assign coarseErrorCalc_state_fired$EN = 1'd1 ;

  // register coarseErrorCalc_state_mkFSMstate
  always@(MUX_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l82c20 or
	  coarseErrorCalc_state_mkFSMstate or
	  WILL_FIRE_RL_coarseErrorCalc_action_l87c20 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l88c22 or
	  WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l91c24 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l99c17 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l102c20 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l103c19 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l104c13)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_coarseErrorCalc_state_mkFSMstate$write_1__SEL_1:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd0;
      WILL_FIRE_RL_coarseErrorCalc_action_l82c20:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd1;
      coarseErrorCalc_state_mkFSMstate == 5'd1:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd2;
      coarseErrorCalc_state_mkFSMstate == 5'd2:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd3;
      coarseErrorCalc_state_mkFSMstate == 5'd3:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd4;
      coarseErrorCalc_state_mkFSMstate == 5'd4:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd5;
      WILL_FIRE_RL_coarseErrorCalc_action_l87c20:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd6;
      WILL_FIRE_RL_coarseErrorCalc_action_l88c22:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd7;
      coarseErrorCalc_state_mkFSMstate == 5'd7:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd8;
      WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd9;
      WILL_FIRE_RL_coarseErrorCalc_action_l91c24:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd10;
      coarseErrorCalc_state_mkFSMstate == 5'd10:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd11;
      coarseErrorCalc_state_mkFSMstate == 5'd11:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd12;
      coarseErrorCalc_state_mkFSMstate == 5'd12:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd13;
      coarseErrorCalc_state_mkFSMstate == 5'd13:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd14;
      coarseErrorCalc_state_mkFSMstate == 5'd14:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd15;
      coarseErrorCalc_state_mkFSMstate == 5'd15:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd16;
      WILL_FIRE_RL_coarseErrorCalc_action_l99c17:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd17;
      coarseErrorCalc_state_mkFSMstate == 5'd17:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd18;
      WILL_FIRE_RL_coarseErrorCalc_action_l102c20:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd19;
      WILL_FIRE_RL_coarseErrorCalc_action_l103c19:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd20;
      WILL_FIRE_RL_coarseErrorCalc_action_l104c13:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd21;
      coarseErrorCalc_state_mkFSMstate == 5'd21:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd22;
      coarseErrorCalc_state_mkFSMstate == 5'd22:
	  coarseErrorCalc_state_mkFSMstate$D_IN = 5'd23;
      default: coarseErrorCalc_state_mkFSMstate$D_IN =
		   5'bxxxxx /* unspecified value */ ;
    endcase
  end
  assign coarseErrorCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22_1 ||
	     WILL_FIRE_RL_coarseErrorCalc_idle_l81c22 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l82c20 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd22 ;

  // register currSample
  assign currSample$D_IN =
	     WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ?
	       MUX_currSample$write_1__VAL_1 :
	       48'd0 ;
  assign currSample$EN =
	     WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd1 ;

  // register fsError
  assign fsError$D_IN =
	     WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ?
	       MUX_fsError$write_1__VAL_1 :
	       24'd0 ;
  assign fsError$EN =
	     WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd3 ;

  // register lastSample
  always@(coarseErrorCalc_state_mkFSMstate or
	  currSample or
	  MUX_lastSample$write_1__VAL_2 or
	  MUX_lastSample$write_1__VAL_3 or
	  WILL_FIRE_RL_coarseErrorCalc_action_l82c20)
  begin
    case (1'b1) // synopsys parallel_case
      coarseErrorCalc_state_mkFSMstate == 5'd13: lastSample$D_IN = currSample;
      coarseErrorCalc_state_mkFSMstate == 5'd10:
	  lastSample$D_IN = MUX_lastSample$write_1__VAL_2;
      coarseErrorCalc_state_mkFSMstate == 5'd11:
	  lastSample$D_IN = MUX_lastSample$write_1__VAL_3;
      WILL_FIRE_RL_coarseErrorCalc_action_l82c20: lastSample$D_IN = 48'd0;
      default: lastSample$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign lastSample$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l82c20 ;

  // register n
  assign n$D_IN = MUX_n$write_1__SEL_1 ? MUX_n$write_1__VAL_1 : 10'd0 ;
  assign n$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd22 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	     coarseErrorCalc_state_mkFSMstate == 5'd4 ;

  // register samples_0
  always@(MUX_samples_0$write_1__SEL_1 or
	  currSample or
	  MUX_samples_0$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_0$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_0$write_1__SEL_1: samples_0$D_IN = currSample;
      MUX_samples_0$write_1__SEL_2: samples_0$D_IN = newSample$D_OUT;
      MUX_samples_0$write_1__SEL_3:
	  samples_0$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_0$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_0$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd0 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd0 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd0 ;

  // register samples_1
  always@(MUX_samples_1$write_1__SEL_1 or
	  currSample or
	  MUX_samples_1$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_1$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_1$write_1__SEL_1: samples_1$D_IN = currSample;
      MUX_samples_1$write_1__SEL_2: samples_1$D_IN = newSample$D_OUT;
      MUX_samples_1$write_1__SEL_3:
	  samples_1$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_1$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_1$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd1 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd1 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd1 ;

  // register samples_2
  always@(MUX_samples_2$write_1__SEL_1 or
	  currSample or
	  MUX_samples_2$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_2$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_2$write_1__SEL_1: samples_2$D_IN = currSample;
      MUX_samples_2$write_1__SEL_2: samples_2$D_IN = newSample$D_OUT;
      MUX_samples_2$write_1__SEL_3:
	  samples_2$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_2$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_2$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd2 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd2 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd2 ;

  // register samples_3
  always@(MUX_samples_3$write_1__SEL_1 or
	  currSample or
	  MUX_samples_3$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_3$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_3$write_1__SEL_1: samples_3$D_IN = currSample;
      MUX_samples_3$write_1__SEL_2: samples_3$D_IN = newSample$D_OUT;
      MUX_samples_3$write_1__SEL_3:
	  samples_3$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_3$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_3$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd3 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd3 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd3 ;

  // register samples_4
  always@(MUX_samples_4$write_1__SEL_1 or
	  currSample or
	  MUX_samples_4$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_4$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_4$write_1__SEL_1: samples_4$D_IN = currSample;
      MUX_samples_4$write_1__SEL_2: samples_4$D_IN = newSample$D_OUT;
      MUX_samples_4$write_1__SEL_3:
	  samples_4$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_4$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_4$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd4 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd4 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd4 ;

  // register samples_5
  always@(MUX_samples_5$write_1__SEL_1 or
	  currSample or
	  MUX_samples_5$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_5$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_5$write_1__SEL_1: samples_5$D_IN = currSample;
      MUX_samples_5$write_1__SEL_2: samples_5$D_IN = newSample$D_OUT;
      MUX_samples_5$write_1__SEL_3:
	  samples_5$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_5$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_5$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd5 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd5 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd5 ;

  // register samples_6
  always@(MUX_samples_6$write_1__SEL_1 or
	  currSample or
	  MUX_samples_6$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_6$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_6$write_1__SEL_1: samples_6$D_IN = currSample;
      MUX_samples_6$write_1__SEL_2: samples_6$D_IN = newSample$D_OUT;
      MUX_samples_6$write_1__SEL_3:
	  samples_6$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_6$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_6$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd6 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd6 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd6 ;

  // register samples_7
  always@(MUX_samples_7$write_1__SEL_1 or
	  currSample or
	  MUX_samples_7$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_7$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_7$write_1__SEL_1: samples_7$D_IN = currSample;
      MUX_samples_7$write_1__SEL_2: samples_7$D_IN = newSample$D_OUT;
      MUX_samples_7$write_1__SEL_3:
	  samples_7$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_7$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_7$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd7 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd7 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd7 ;

  // register samples_8
  always@(MUX_samples_8$write_1__SEL_1 or
	  currSample or
	  MUX_samples_8$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_8$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_8$write_1__SEL_1: samples_8$D_IN = currSample;
      MUX_samples_8$write_1__SEL_2: samples_8$D_IN = newSample$D_OUT;
      MUX_samples_8$write_1__SEL_3:
	  samples_8$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_8$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_8$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd8 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd8 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd8 ;

  // register samples_9
  always@(MUX_samples_9$write_1__SEL_1 or
	  currSample or
	  MUX_samples_9$write_1__SEL_2 or
	  newSample$D_OUT or
	  MUX_samples_9$write_1__SEL_3 or MUX_samples_0$write_1__VAL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_samples_9$write_1__SEL_1: samples_9$D_IN = currSample;
      MUX_samples_9$write_1__SEL_2: samples_9$D_IN = newSample$D_OUT;
      MUX_samples_9$write_1__SEL_3:
	  samples_9$D_IN = MUX_samples_0$write_1__VAL_3;
      default: samples_9$D_IN =
		   48'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign samples_9$EN =
	     coarseErrorCalc_state_mkFSMstate == 5'd14 && n == 10'd9 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l87c20 && n == 10'd9 ||
	     WILL_FIRE_RL_coarseErrorCalc_action_l102c20 && n == 10'd9 ;

  // register xFix
  assign xFix$D_IN = cordic$getX ;
  assign xFix$EN = WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ;

  // register yFix
  assign yFix$D_IN = cordic$getY ;
  assign yFix$EN = WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ;

  // submodule cordic
  assign cordic$setPolar_x = xFix ;
  assign cordic$setPolar_y = yFix ;
  assign cordic$setPolar_z =
	     (!IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[35] &&
	      (IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[23] ||
	       IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[35] &&
		 (!IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[23] ||
		  ~IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008[23:0]) ;
  assign cordic$EN_setPolar = WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ;
  assign cordic$EN_getX = WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ;
  assign cordic$EN_getY = WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ;

  // submodule newSample
  assign newSample$D_IN = addSample_sample ;
  assign newSample$ENQ = EN_addSample ;
  assign newSample$DEQ = WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ;
  assign newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d668 =
	     x__h86933 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d682 =
	     x__h84124[47:12] + { 24'd0, y_f__h87775 } ;
  assign IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d574 =
	     x__h100583 * 24'd1152 ;
  assign IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d588 =
	     x__h97784[47:12] + { 24'd0, y_f__h101425 } ;
  assign IF_IF_accumError_67_BIT_23_80_AND_NOT_IF_accum_ETC___d784 =
	     x__h70961[47:12] + { 24'd0, y_f__h146194 } ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d658 =
	     (!x__h91326[36] &&
	      (x__h91326[23] || x__h91326[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h91326[36] &&
		 (!x__h91326[23] || ~x__h91326[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h91326[23:0]) ;
  assign IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d743 =
	     (!x__h77666[36] &&
	      (x__h77666[23] || x__h77666[36:24] != 13'd0)) ?
	       24'd8388607 :
	       ((x__h77666[36] &&
		 (!x__h77666[23] || ~x__h77666[36:24] != 13'd0)) ?
		  24'd8388608 :
		  x__h77666[23:0]) ;
  assign IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535 =
	     (!x__h84461[35] &&
	      (x__h84461[23] || x__h84461[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h84461[35] &&
		 (!x__h84461[23] || ~x__h84461[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h84461[23:0]) ;
  assign IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535 +
	     ((!x__h97455[35] &&
	       (x__h97455[23] || x__h97455[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h97455[35] &&
		  (!x__h97455[23] || ~x__h97455[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h97455[23:0])) ;
  assign IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568 =
	     (!x__h81083[35] &&
	      (x__h81083[23] || x__h81083[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h81083[35] &&
		 (!x__h81083[23] || ~x__h81083[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h81083[23:0]) ;
  assign IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568 +
	     ((!x__h83795[35] &&
	       (x__h83795[23] || x__h83795[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h83795[35] &&
		  (!x__h83795[23] || ~x__h83795[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h83795[23:0])) ;
  assign IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839 =
	     (!IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824[47] &&
	      IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d836[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d836 ;
  assign IF_NOT_IF_fsError_87_BIT_23_88_THEN_25734_MUL__ETC___d1008 =
	     (!IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993[47] &&
	      IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d1005[35]) ?
	       36'h7FFFFFFFF :
	       IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d1005 ;
  assign IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d751 =
	     (!accumError[23] &&
	      NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459) ?
	       x__h77209 :
	       ((!accumError[47] &&
		 NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661) ?
		  IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d743 :
		  24'd0) ;
  assign IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d764 =
	     (!accumError[23] &&
	      NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459) ?
	       x__h77209[23:12] :
	       ((!accumError[47] &&
		 NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661) ?
		  res_i__h90857 :
		  12'd0) ;
  assign IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d869 =
	     x__h250430 * x__h253174 ;
  assign IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d883 =
	     x__h250375[47:12] + { 24'd0, y_f__h251279 } ;
  assign IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d946 =
	     x__h250430 * x__h255889 ;
  assign IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d960 =
	     x__h255823[47:12] + { 24'd0, y_f__h256719 } ;
  assign IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d822 =
	     x__h253155 * x__h255889 ;
  assign IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824 =
	     (SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11] &&
	      !xFix[23] ||
	      xFix[23] &&
	      !SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11]) ?
	       -IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d822 :
	       IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d822 ;
  assign IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d836 =
	     IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824[47:12] +
	     { 24'd0, y_f__h248556 } ;
  assign IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d908 =
	     x__h253155 * x__h253174 ;
  assign IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d922 =
	     x__h253108[47:12] + { 24'd0, y_f__h254004 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d626 =
	     x__h88962 / x__h102631 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d638 =
	     x__h91665[38:2] + { 25'd0, y_f__h103335 } ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d711 =
	     x__h88962 / x__h88981 ;
  assign IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d723 =
	     x__h78005[38:2] + { 25'd0, y_f__h89685 } ;
  assign IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d753 =
	     (accumError[23] &&
	      NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d659 :
	       IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d752 ;
  assign IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d766 =
	     (accumError[23] &&
	      NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459) ?
	       _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d659[23:12] :
	       IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d765 ;
  assign IF_accumError_67_BIT_23_80_THEN_0_CONCAT_IF_ac_ETC___d397 =
	     x__h71893[47:12] + { 24'd0, y_f__h72842 } ;
  assign IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF_NOT__ETC___d418 =
	     accumError[23] ?
	       ((!x__h71564[35] &&
		 (x__h71564[23] || x__h71564[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h71564[35] &&
		    (!x__h71564[23] || ~x__h71564[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h71564[23:0])) :
	       accumError[23:0] ;
  assign IF_accumError_67_BIT_23_80_THEN_NEG_accumError_ETC___d515 =
	     x__h84790[47:12] + { 24'd0, y_f__h85683 } ;
  assign IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d752 =
	     (accumError[47] &&
	      NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661) ?
	       (accumError[23] ? x__h77076 : x__h77044) :
	       IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d751 ;
  assign IF_accumError_67_BIT_47_19_AND_NOT_IF_accumErr_ETC___d765 =
	     (accumError[47] &&
	      NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661) ?
	       (accumError[23] ? x__h77076[23:12] : x__h77044[23:12]) :
	       IF_NOT_accumError_67_BIT_23_80_61_AND_NOT_IF_a_ETC___d764 ;
  assign IF_accumError_67_BIT_47_19_AND_NOT_accumError__ETC___d480 =
	     x__h78685[47:12] + { 24'd0, y_f__h79578 } ;
  assign IF_accumError_67_BIT_47_19_THEN_0_CONCAT_IF_ac_ETC___d436 =
	     x__h74753[47:12] + { 24'd0, y_f__h75702 } ;
  assign IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF_NOT__ETC___d457 =
	     accumError[47] ?
	       ((!x__h74424[35] &&
		 (x__h74424[23] || x__h74424[35:24] != 12'd0)) ?
		  24'd8388607 :
		  ((x__h74424[35] &&
		    (!x__h74424[23] || ~x__h74424[35:24] != 12'd0)) ?
		     24'd8388608 :
		     x__h74424[23:0])) :
	       accumError[47:24] ;
  assign IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d466 =
	     x__h78730 * x__h78749 ;
  assign IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d548 =
	     x__h81412[47:12] + { 24'd0, y_f__h82305 } ;
  assign IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d265 =
	     x__h60576[47:12] + { 24'd0, y_f__h61475 } ;
  assign IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d342 =
	     x__h66016[47:12] + { 24'd0, y_f__h66909 } ;
  assign IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d251 =
	     x__h60627 * x__h60646 ;
  assign IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d328 =
	     x__h60627 * x__h57928 ;
  assign IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d221 =
	     x__h57852[47:12] + { 24'd0, y_f__h58757 } ;
  assign IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d304 =
	     x__h63304[47:12] + { 24'd0, y_f__h64197 } ;
  assign IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d207 =
	     x__h63349 * x__h57928 ;
  assign IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d290 =
	     x__h63349 * x__h60646 ;
  assign IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d1005 =
	     IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993[47:12] +
	     { 24'd0, y_f__h261717 } ;
  assign IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993 =
	     fsError[23] ?
	       _25734_MUL_IF_fsError_87_BIT_23_88_THEN_NEG_fsE_ETC___d991 :
	       -_25734_MUL_IF_fsError_87_BIT_23_88_THEN_NEG_fsE_ETC___d991 ;
  assign IF_lastSample_50_BIT_23_52_THEN_0_CONCAT_IF_la_ETC___d170 =
	     x__h54665[47:12] + { 24'd0, y_f__h55623 } ;
  assign NOT_IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF__ETC___d459 =
	     (IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF_NOT__ETC___d418 ^
	      24'h800000) >=
	     (IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF_NOT__ETC___d457 ^
	      24'h800000) ;
  assign NOT_IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF__ETC___d661 =
	     (IF_accumError_67_BIT_47_19_THEN_IF_NOT_IF_NOT__ETC___d457 ^
	      24'h800000) >
	     (IF_accumError_67_BIT_23_80_THEN_IF_NOT_IF_NOT__ETC___d418 ^
	      24'h800000) ;
  assign SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100 =
	     { SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11],
	       SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 } ;
  assign SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036 =
	     { SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11],
	       SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 } ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1117 =
	     { 33'd0, x__h265029 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1120 =
	     { 33'd0, x__h265029 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1128 =
	     { 33'd0, x__h265029 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1137 =
	     { 33'd0, x__h265029 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1146 =
	     { 33'd0, x__h265029 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1155 =
	     { 33'd0, x__h265029 } * 45'd1000000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1053 =
	     { 33'd0, x__h264259 } * 45'd10 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1056 =
	     { 33'd0, x__h264259 } * 45'd100 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1064 =
	     { 33'd0, x__h264259 } * 45'd1000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1073 =
	     { 33'd0, x__h264259 } * 45'd10000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1082 =
	     { 33'd0, x__h264259 } * 45'd100000 ;
  assign _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1091 =
	     { 33'd0, x__h264259 } * 45'd1000000 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1059 =
	     45'd10 * digit__h264229 ;
  assign _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1123 =
	     45'd10 * digit__h264999 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1068 =
	     45'd10 * y__h264442 ;
  assign _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1132 =
	     45'd10 * y__h265212 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1077 =
	     45'd10 * y__h264531 ;
  assign _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1141 =
	     45'd10 * y__h265301 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1086 =
	     45'd10 * y__h264620 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1150 =
	     45'd10 * y__h265390 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1095 =
	     45'd10 * y__h264709 ;
  assign _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1159 =
	     45'd10 * y__h265479 ;
  assign _16770782_MINUS_IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_ETC___d659 =
	     24'd16770782 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d658 ;
  assign _25734_MUL_IF_fsError_87_BIT_23_88_THEN_NEG_fsE_ETC___d991 =
	     24'd25734 * x__h260887 ;
  assign _651_MUL_IF_IF_accumError_67_BIT_23_80_AND_NOT__ETC___d770 =
	     24'd651 * x__h145364 ;
  assign ax1_f__h78033 = { res_f__h80730, 12'd0 } ;
  assign ax2_f__h78028 = { ax1_f__h78033, 2'd0 } ;
  assign ax2_i__h78027 = { x__h78035[11], x__h78035 } ;
  assign coarseErrorCalc_abort_whas_AND_coarseErrorCalc_ETC___d1175 =
	     (coarseErrorCalc_state_mkFSMstate == 5'd0 ||
	      !n_6_ULT_5___d37 && coarseErrorCalc_state_mkFSMstate == 5'd18 ||
	      !n_6_ULT_5___d37 &&
	      coarseErrorCalc_state_mkFSMstate == 5'd23) &&
	     (!coarseErrorCalc_start_reg_1 || coarseErrorCalc_state_fired) ;
  assign digit__h264229 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1053[15:12] } ;
  assign digit__h264296 =
	     { 41'd0,
	       tx64294_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1[3:0] } ;
  assign digit__h264385 =
	     { 41'd0,
	       tx64383_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2[3:0] } ;
  assign digit__h264474 =
	     { 41'd0,
	       tx64472_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3[3:0] } ;
  assign digit__h264563 =
	     { 41'd0,
	       tx64561_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4[3:0] } ;
  assign digit__h264652 =
	     { 41'd0,
	       tx64650_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5[3:0] } ;
  assign digit__h264999 =
	     { 41'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1117[15:12] } ;
  assign digit__h265066 =
	     { 41'd0,
	       tx65064_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6[3:0] } ;
  assign digit__h265155 =
	     { 41'd0,
	       tx65153_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7[3:0] } ;
  assign digit__h265244 =
	     { 41'd0,
	       tx65242_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8[3:0] } ;
  assign digit__h265333 =
	     { 41'd0,
	       tx65331_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9[3:0] } ;
  assign digit__h265422 =
	     { 41'd0,
	       tx65420_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10[3:0] } ;
  assign n_6_ULT_5___d37 = n < 10'd5 ;
  assign res_f__h80730 =
	     (!x__h78356[35] &&
	      (x__h78356[23] || x__h78356[35:24] != 12'd0)) ?
	       12'd4095 :
	       ((x__h78356[35] &&
		 (!x__h78356[23] || ~x__h78356[35:24] != 12'd0)) ?
		  12'd0 :
		  x__h78356[11:0]) ;
  assign res_i__h90857 =
	     (!x__h77666[36] &&
	      (x__h77666[23] || x__h77666[36:24] != 13'd0)) ?
	       12'd2047 :
	       ((x__h77666[36] &&
		 (!x__h77666[23] || ~x__h77666[36:24] != 13'd0)) ?
		  12'd2048 :
		  x__h77666[23:12]) ;
  assign tx64294_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q1 =
	     tx__h264294 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1059[44:0] ;
  assign tx64383_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q2 =
	     tx__h264383 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1068[44:0] ;
  assign tx64472_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q3 =
	     tx__h264472 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1077[44:0] ;
  assign tx64561_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q4 =
	     tx__h264561 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1086[44:0] ;
  assign tx64650_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q5 =
	     tx__h264650 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1095[44:0] ;
  assign tx65064_MINUS_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC__q6 =
	     tx__h265064 -
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1123[44:0] ;
  assign tx65153_MINUS_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC__q7 =
	     tx__h265153 -
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1132[44:0] ;
  assign tx65242_MINUS_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC__q8 =
	     tx__h265242 -
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1141[44:0] ;
  assign tx65331_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_0_CO_ETC__q9 =
	     tx__h265331 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1150[44:0] ;
  assign tx65420_MINUS_10_MUL_10_MUL_10_MUL_10_MUL_10_M_ETC__q10 =
	     tx__h265420 -
	     _10_MUL_10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0__ETC___d1159[44:0] ;
  assign tx__h264294 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1056[44:12] } ;
  assign tx__h264383 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1064[44:12] } ;
  assign tx__h264472 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1073[44:12] } ;
  assign tx__h264561 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1082[44:12] } ;
  assign tx__h264650 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_47_T_ETC___d1091[44:12] } ;
  assign tx__h265064 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1120[44:12] } ;
  assign tx__h265153 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1128[44:12] } ;
  assign tx__h265242 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1137[44:12] } ;
  assign tx__h265331 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1146[44:12] } ;
  assign tx__h265420 =
	     { 12'd0,
	       _0_CONCAT_IF_SEXT_SEL_ARR_samples_0_7_BITS_23_T_ETC___d1155[44:12] } ;
  assign x__h100583 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568[23] ?
	       ((!x__h81083[35] &&
		 (x__h81083[23] || x__h81083[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h81083[35] &&
		    (!x__h81083[23] || ~x__h81083[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h81083[23:0])) :
	       IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568 ;
  assign x__h102631 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609[23] ?
	       -IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609 :
	       IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609 ;
  assign x__h145364 =
	     IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d766[11] ?
	       -IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d753 :
	       IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d753 ;
  assign x__h246972 =
	     ((!IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[35] &&
	       (IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[23] ||
		IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[35:24] !=
		12'd0)) ?
		24'd8388607 :
		((IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[35] &&
		  (!IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[23] ||
		   ~IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[35:24] !=
		   12'd0)) ?
		   24'd8388608 :
		   IF_NOT_IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8__ETC___d839[23:0])) -
	     ((!x__h250046[35] &&
	       (x__h250046[23] || x__h250046[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h250046[35] &&
		  (!x__h250046[23] || ~x__h250046[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h250046[23:0])) ;
  assign x__h247723 =
	     { SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108,
	       fpart__h264013 } ;
  assign x__h250046 =
	     (!x__h250375[47] &&
	      IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d883[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d883 ;
  assign x__h250375 =
	     (SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11] &&
	      !yFix[23] ||
	      yFix[23] &&
	      !SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11]) ?
	       -IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d869 :
	       IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d869 ;
  assign x__h250430 =
	     SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11] ?
	       -{ SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133,
		  fpart__h264789 } :
	       { SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133,
		 fpart__h264789 } ;
  assign x__h252449 =
	     ((!x__h252779[35] &&
	       (x__h252779[23] || x__h252779[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h252779[35] &&
		  (!x__h252779[23] || ~x__h252779[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h252779[23:0])) +
	     ((!x__h255494[35] &&
	       (x__h255494[23] || x__h255494[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h255494[35] &&
		  (!x__h255494[23] || ~x__h255494[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h255494[23:0])) ;
  assign x__h252779 =
	     (!x__h253108[47] &&
	      IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d922[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d922 ;
  assign x__h253108 =
	     (SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11] &&
	      !yFix[23] ||
	      yFix[23] &&
	      !SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11]) ?
	       -IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d908 :
	       IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d908 ;
  assign x__h253155 =
	     SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108[11] ?
	       -x__h247723 :
	       x__h247723 ;
  assign x__h253174 = yFix[23] ? -yFix : yFix ;
  assign x__h255494 =
	     (!x__h255823[47] &&
	      IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d960[35]) ?
	       36'h7FFFFFFFF :
	       IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d960 ;
  assign x__h255823 =
	     (SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11] &&
	      !xFix[23] ||
	      xFix[23] &&
	      !SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133[11]) ?
	       -IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d946 :
	       IF_SEL_ARR_samples_0_7_BITS_23_TO_12_22_sample_ETC___d946 ;
  assign x__h255889 = xFix[23] ? -xFix : xFix ;
  assign x__h260887 = fsError[23] ? -fsError : fsError ;
  assign x__h264259 =
	     (SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036[12] &&
	      fpart__h264013 != 12'd0) ?
	       y_avValue_snd__h264193 :
	       fpart__h264013 ;
  assign x__h265029 =
	     (SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100[12] &&
	      fpart__h264789 != 12'd0) ?
	       y_avValue_snd__h264963 :
	       fpart__h264789 ;
  assign x__h54319 =
	     (!x__h54665[47] &&
	      IF_lastSample_50_BIT_23_52_THEN_0_CONCAT_IF_la_ETC___d170[35]) ?
	       36'h7FFFFFFFF :
	       IF_lastSample_50_BIT_23_52_THEN_0_CONCAT_IF_la_ETC___d170 ;
  assign x__h54665 =
	     lastSample[23] ?
	       { 12'd0, x__h60646, 12'd0 } :
	       -{ 12'd0, x__h60646, 12'd0 } ;
  assign x__h57193 =
	     ((!x__h57523[35] &&
	       (x__h57523[23] || x__h57523[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h57523[35] &&
		  (!x__h57523[23] || ~x__h57523[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h57523[23:0])) -
	     ((!x__h60247[35] &&
	       (x__h60247[23] || x__h60247[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h60247[35] &&
		  (!x__h60247[23] || ~x__h60247[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h60247[23:0])) ;
  assign x__h57523 =
	     (!x__h57852[47] &&
	      IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d221[35]) ?
	       36'h7FFFFFFFF :
	       IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d221 ;
  assign x__h57852 =
	     (currSample[47] && !lastSample[47] ||
	      lastSample[47] && !currSample[47]) ?
	       -IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d207 :
	       IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d207 ;
  assign x__h57928 = lastSample[47] ? -lastSample[47:24] : lastSample[47:24] ;
  assign x__h60247 =
	     (!x__h60576[47] &&
	      IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d265[35]) ?
	       36'h7FFFFFFFF :
	       IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d265 ;
  assign x__h60576 =
	     (currSample[23] && !lastSample[23] ||
	      lastSample[23] && !currSample[23]) ?
	       -IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d251 :
	       IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d251 ;
  assign x__h60627 = currSample[23] ? -currSample[23:0] : currSample[23:0] ;
  assign x__h60646 = lastSample[23] ? -lastSample[23:0] : lastSample[23:0] ;
  assign x__h62645 =
	     ((!x__h62975[35] &&
	       (x__h62975[23] || x__h62975[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h62975[35] &&
		  (!x__h62975[23] || ~x__h62975[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h62975[23:0])) +
	     ((!x__h65687[35] &&
	       (x__h65687[23] || x__h65687[35:24] != 12'd0)) ?
		24'd8388607 :
		((x__h65687[35] &&
		  (!x__h65687[23] || ~x__h65687[35:24] != 12'd0)) ?
		   24'd8388608 :
		   x__h65687[23:0])) ;
  assign x__h62975 =
	     (!x__h63304[47] &&
	      IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d304[35]) ?
	       36'h7FFFFFFFF :
	       IF_currSample_94_BIT_47_95_AND_NOT_lastSample__ETC___d304 ;
  assign x__h63304 =
	     (currSample[47] && !lastSample[23] ||
	      lastSample[23] && !currSample[47]) ?
	       -IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d290 :
	       IF_currSample_94_BIT_47_95_THEN_NEG_currSample_ETC___d290 ;
  assign x__h63349 = currSample[47] ? -currSample[47:24] : currSample[47:24] ;
  assign x__h65687 =
	     (!x__h66016[47] &&
	      IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d342[35]) ?
	       36'h7FFFFFFFF :
	       IF_currSample_94_BIT_23_42_AND_NOT_lastSample__ETC___d342 ;
  assign x__h66016 =
	     (currSample[23] && !lastSample[47] ||
	      lastSample[47] && !currSample[23]) ?
	       -IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d328 :
	       IF_currSample_94_BIT_23_42_THEN_NEG_currSample_ETC___d328 ;
  assign x__h68488 = accumError[47:24] + lastSample[47:24] ;
  assign x__h68525 = accumError[23:0] + lastSample[23:0] ;
  assign x__h70632 =
	     (!x__h70961[47] &&
	      IF_IF_accumError_67_BIT_23_80_AND_NOT_IF_accum_ETC___d784[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_accumError_67_BIT_23_80_AND_NOT_IF_accum_ETC___d784 ;
  assign x__h70961 =
	     IF_accumError_67_BIT_23_80_AND_NOT_IF_accumErr_ETC___d753[23] ?
	       -_651_MUL_IF_IF_accumError_67_BIT_23_80_AND_NOT__ETC___d770 :
	       _651_MUL_IF_IF_accumError_67_BIT_23_80_AND_NOT__ETC___d770 ;
  assign x__h71564 =
	     (!x__h71893[47] &&
	      IF_accumError_67_BIT_23_80_THEN_0_CONCAT_IF_ac_ETC___d397[35]) ?
	       36'h7FFFFFFFF :
	       IF_accumError_67_BIT_23_80_THEN_0_CONCAT_IF_ac_ETC___d397 ;
  assign x__h71893 =
	     accumError[23] ?
	       { 12'd0, x__h78749, 12'd0 } :
	       -{ 12'd0, x__h78749, 12'd0 } ;
  assign x__h74424 =
	     (!x__h74753[47] &&
	      IF_accumError_67_BIT_47_19_THEN_0_CONCAT_IF_ac_ETC___d436[35]) ?
	       36'h7FFFFFFFF :
	       IF_accumError_67_BIT_47_19_THEN_0_CONCAT_IF_ac_ETC___d436 ;
  assign x__h74753 =
	     accumError[47] ?
	       { 12'd0, x__h78730, 12'd0 } :
	       -{ 12'd0, x__h78730, 12'd0 } ;
  assign x__h77044 =
	     24'd12867 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d743 ;
  assign x__h77076 =
	     24'd16764348 +
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d743 ;
  assign x__h77209 =
	     24'd6433 -
	     IF_NOT_IF_NOT_IF_SEXT_IF_NOT_IF_NOT_IF_accumEr_ETC___d658 ;
  assign x__h77666 =
	     (!x__h78005[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d723[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d723 ;
  assign x__h78005 =
	     (ax2_i__h78027[12] &&
	      !IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703[23] ||
	      !ax2_i__h78027[12] &&
	      IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d711 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d711 ;
  assign x__h78035 =
	     (!x__h78356[35] &&
	      (x__h78356[23] || x__h78356[35:24] != 12'd0)) ?
	       12'd2047 :
	       ((x__h78356[35] &&
		 (!x__h78356[23] || ~x__h78356[35:24] != 12'd0)) ?
		  12'd2048 :
		  x__h78356[23:12]) ;
  assign x__h78356 =
	     (!x__h78685[47] &&
	      IF_accumError_67_BIT_47_19_AND_NOT_accumError__ETC___d480[35]) ?
	       36'h7FFFFFFFF :
	       IF_accumError_67_BIT_47_19_AND_NOT_accumError__ETC___d480 ;
  assign x__h78685 =
	     (accumError[47] && !accumError[23] ||
	      accumError[23] && !accumError[47]) ?
	       -IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d466 :
	       IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d466 ;
  assign x__h78730 = accumError[47] ? -accumError[47:24] : accumError[47:24] ;
  assign x__h78749 = accumError[23] ? -accumError[23:0] : accumError[23:0] ;
  assign x__h81083 =
	     (!x__h81412[47] &&
	      IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d548[35]) ?
	       36'h7FFFFFFFF :
	       IF_accumError_67_BIT_47_19_THEN_NEG_accumError_ETC___d548 ;
  assign x__h81412 = x__h78730 * x__h78730 ;
  assign x__h83795 =
	     (!x__h84124[47] &&
	      IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d682[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d682 ;
  assign x__h84124 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535[23] ?
	       -IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d668 :
	       IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_TH_ETC___d668 ;
  assign x__h84461 =
	     (!x__h84790[47] &&
	      IF_accumError_67_BIT_23_80_THEN_NEG_accumError_ETC___d515[35]) ?
	       36'h7FFFFFFFF :
	       IF_accumError_67_BIT_23_80_THEN_NEG_accumError_ETC___d515 ;
  assign x__h84790 = x__h78749 * x__h78749 ;
  assign x__h86933 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535[23] ?
	       ((!x__h84461[35] &&
		 (x__h84461[23] || x__h84461[35:24] != 12'd0)) ?
		  24'd8388609 :
		  ((x__h84461[35] &&
		    (!x__h84461[23] || ~x__h84461[35:24] != 12'd0)) ?
		     24'd8388608 :
		     -x__h84461[23:0])) :
	       IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d535 ;
  assign x__h88962 =
	     ax2_i__h78027[12] ?
	       -{ ax2_i__h78027, ax2_f__h78028 } :
	       { ax2_i__h78027, ax2_f__h78028 } ;
  assign x__h88981 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703[23] ?
	       -IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703 :
	       IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d703 ;
  assign x__h91326 =
	     (!x__h91665[38] &&
	      IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d638[36]) ?
	       37'h0FFFFFFFFF :
	       IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d638 ;
  assign x__h91665 =
	     (ax2_i__h78027[12] &&
	      !IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609[23] ||
	      !ax2_i__h78027[12] &&
	      IF_NOT_IF_NOT_IF_accumError_67_BIT_23_80_THEN__ETC___d609[23]) ?
	       -IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d626 :
	       IF_SEXT_IF_NOT_IF_NOT_IF_accumError_67_BIT_47__ETC___d626 ;
  assign x__h97455 =
	     (!x__h97784[47] &&
	      IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d588[35]) ?
	       36'h7FFFFFFFF :
	       IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d588 ;
  assign x__h97784 =
	     IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_THEN__ETC___d568[23] ?
	       -IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d574 :
	       IF_IF_NOT_IF_NOT_IF_accumError_67_BIT_47_19_TH_ETC___d574 ;
  assign y__h264442 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1059[44:0] +
	     digit__h264296 ;
  assign y__h264531 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1068[44:0] +
	     digit__h264385 ;
  assign y__h264620 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1077[44:0] +
	     digit__h264474 ;
  assign y__h264709 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1086[44:0] +
	     digit__h264563 ;
  assign y__h265212 =
	     _10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_ARR_sampl_ETC___d1123[44:0] +
	     digit__h265066 ;
  assign y__h265301 =
	     _10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_SEL_AR_ETC___d1132[44:0] +
	     digit__h265155 ;
  assign y__h265390 =
	     _10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT_IF_SEXT_ETC___d1141[44:0] +
	     digit__h265244 ;
  assign y__h265479 =
	     _10_MUL_10_MUL_10_MUL_10_MUL_0_CONCAT_0_CONCAT__ETC___d1150[44:0] +
	     digit__h265333 ;
  assign y_avValue_snd__h264193 = 12'd0 - fpart__h264013 ;
  assign y_avValue_snd__h264963 = 12'd0 - fpart__h264789 ;
  assign y_f__h101425 =
	     (x__h97784[11] && (x__h97784[47] || x__h97784[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h103335 =
	     (x__h91665[1] && (x__h91665[38] || x__h91665[0])) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h146194 =
	     (x__h70961[11] && (x__h70961[47] || x__h70961[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h248556 =
	     (IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824[11] &&
	      (IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824[47] ||
	       IF_SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_ETC___d824[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h251279 =
	     (x__h250375[11] &&
	      (x__h250375[47] || x__h250375[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h254004 =
	     (x__h253108[11] &&
	      (x__h253108[47] || x__h253108[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h256719 =
	     (x__h255823[11] &&
	      (x__h255823[47] || x__h255823[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h261717 =
	     (IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993[11] &&
	      (IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993[47] ||
	       IF_fsError_87_BIT_23_88_THEN_25734_MUL_IF_fsEr_ETC___d993[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h55623 =
	     (x__h54665[11] && (x__h54665[47] || x__h54665[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h58757 =
	     (x__h57852[11] && (x__h57852[47] || x__h57852[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h61475 =
	     (x__h60576[11] && (x__h60576[47] || x__h60576[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h64197 =
	     (x__h63304[11] && (x__h63304[47] || x__h63304[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h66909 =
	     (x__h66016[11] && (x__h66016[47] || x__h66016[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h72842 =
	     (x__h71893[11] && (x__h71893[47] || x__h71893[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h75702 =
	     (x__h74753[11] && (x__h74753[47] || x__h74753[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h79578 =
	     (x__h78685[11] && (x__h78685[47] || x__h78685[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h82305 =
	     (x__h81412[11] && (x__h81412[47] || x__h81412[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h85683 =
	     (x__h84790[11] && (x__h84790[47] || x__h84790[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h87775 =
	     (x__h84124[11] && (x__h84124[47] || x__h84124[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h89685 =
	     (x__h78005[1] && (x__h78005[38] || x__h78005[0])) ?
	       12'd1 :
	       12'd0 ;
  always@(n or
	  samples_0 or
	  samples_1 or
	  samples_2 or
	  samples_3 or
	  samples_4 or
	  samples_5 or samples_6 or samples_7 or samples_8 or samples_9)
  begin
    case (n)
      10'd0: fpart__h264013 = samples_0[35:24];
      10'd1: fpart__h264013 = samples_1[35:24];
      10'd2: fpart__h264013 = samples_2[35:24];
      10'd3: fpart__h264013 = samples_3[35:24];
      10'd4: fpart__h264013 = samples_4[35:24];
      10'd5: fpart__h264013 = samples_5[35:24];
      10'd6: fpart__h264013 = samples_6[35:24];
      10'd7: fpart__h264013 = samples_7[35:24];
      10'd8: fpart__h264013 = samples_8[35:24];
      10'd9: fpart__h264013 = samples_9[35:24];
      default: fpart__h264013 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(n or
	  samples_0 or
	  samples_1 or
	  samples_2 or
	  samples_3 or
	  samples_4 or
	  samples_5 or samples_6 or samples_7 or samples_8 or samples_9)
  begin
    case (n)
      10'd0: fpart__h264789 = samples_0[11:0];
      10'd1: fpart__h264789 = samples_1[11:0];
      10'd2: fpart__h264789 = samples_2[11:0];
      10'd3: fpart__h264789 = samples_3[11:0];
      10'd4: fpart__h264789 = samples_4[11:0];
      10'd5: fpart__h264789 = samples_5[11:0];
      10'd6: fpart__h264789 = samples_6[11:0];
      10'd7: fpart__h264789 = samples_7[11:0];
      10'd8: fpart__h264789 = samples_8[11:0];
      10'd9: fpart__h264789 = samples_9[11:0];
      default: fpart__h264789 = 12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(n or
	  samples_0 or
	  samples_1 or
	  samples_2 or
	  samples_3 or
	  samples_4 or
	  samples_5 or samples_6 or samples_7 or samples_8 or samples_9)
  begin
    case (n)
      10'd0:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_0[23:12];
      10'd1:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_1[23:12];
      10'd2:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_2[23:12];
      10'd3:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_3[23:12];
      10'd4:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_4[23:12];
      10'd5:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_5[23:12];
      10'd6:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_6[23:12];
      10'd7:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_7[23:12];
      10'd8:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_8[23:12];
      10'd9:
	  SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
	      samples_9[23:12];
      default: SEL_ARR_samples_0_7_BITS_23_TO_12_22_samples_1_ETC___d133 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  always@(n or
	  samples_0 or
	  samples_1 or
	  samples_2 or
	  samples_3 or
	  samples_4 or
	  samples_5 or samples_6 or samples_7 or samples_8 or samples_9)
  begin
    case (n)
      10'd0:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_0[47:36];
      10'd1:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_1[47:36];
      10'd2:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_2[47:36];
      10'd3:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_3[47:36];
      10'd4:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_4[47:36];
      10'd5:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_5[47:36];
      10'd6:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_6[47:36];
      10'd7:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_7[47:36];
      10'd8:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_8[47:36];
      10'd9:
	  SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
	      samples_9[47:36];
      default: SEL_ARR_samples_0_7_BITS_47_TO_36_8_samples_1__ETC___d108 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        accumError <= `BSV_ASSIGNMENT_DELAY 48'd0;
	coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 5'd0;
	currSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	fsError <= `BSV_ASSIGNMENT_DELAY 24'd0;
	lastSample <= `BSV_ASSIGNMENT_DELAY 48'd0;
	n <= `BSV_ASSIGNMENT_DELAY 10'd0;
	samples_0 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_1 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_2 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_3 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_4 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_5 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_6 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_7 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_8 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	samples_9 <= `BSV_ASSIGNMENT_DELAY 48'd0;
	xFix <= `BSV_ASSIGNMENT_DELAY 24'd4096;
	yFix <= `BSV_ASSIGNMENT_DELAY 24'd0;
      end
    else
      begin
        if (accumError$EN)
	  accumError <= `BSV_ASSIGNMENT_DELAY accumError$D_IN;
	if (coarseErrorCalc_start_reg$EN)
	  coarseErrorCalc_start_reg <= `BSV_ASSIGNMENT_DELAY
	      coarseErrorCalc_start_reg$D_IN;
	if (coarseErrorCalc_start_reg_1$EN)
	  coarseErrorCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      coarseErrorCalc_start_reg_1$D_IN;
	if (coarseErrorCalc_state_can_overlap$EN)
	  coarseErrorCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      coarseErrorCalc_state_can_overlap$D_IN;
	if (coarseErrorCalc_state_fired$EN)
	  coarseErrorCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      coarseErrorCalc_state_fired$D_IN;
	if (coarseErrorCalc_state_mkFSMstate$EN)
	  coarseErrorCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      coarseErrorCalc_state_mkFSMstate$D_IN;
	if (currSample$EN)
	  currSample <= `BSV_ASSIGNMENT_DELAY currSample$D_IN;
	if (fsError$EN) fsError <= `BSV_ASSIGNMENT_DELAY fsError$D_IN;
	if (lastSample$EN)
	  lastSample <= `BSV_ASSIGNMENT_DELAY lastSample$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (samples_0$EN) samples_0 <= `BSV_ASSIGNMENT_DELAY samples_0$D_IN;
	if (samples_1$EN) samples_1 <= `BSV_ASSIGNMENT_DELAY samples_1$D_IN;
	if (samples_2$EN) samples_2 <= `BSV_ASSIGNMENT_DELAY samples_2$D_IN;
	if (samples_3$EN) samples_3 <= `BSV_ASSIGNMENT_DELAY samples_3$D_IN;
	if (samples_4$EN) samples_4 <= `BSV_ASSIGNMENT_DELAY samples_4$D_IN;
	if (samples_5$EN) samples_5 <= `BSV_ASSIGNMENT_DELAY samples_5$D_IN;
	if (samples_6$EN) samples_6 <= `BSV_ASSIGNMENT_DELAY samples_6$D_IN;
	if (samples_7$EN) samples_7 <= `BSV_ASSIGNMENT_DELAY samples_7$D_IN;
	if (samples_8$EN) samples_8 <= `BSV_ASSIGNMENT_DELAY samples_8$D_IN;
	if (samples_9$EN) samples_9 <= `BSV_ASSIGNMENT_DELAY samples_9$D_IN;
	if (xFix$EN) xFix <= `BSV_ASSIGNMENT_DELAY xFix$D_IN;
	if (yFix$EN) yFix <= `BSV_ASSIGNMENT_DELAY yFix$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    accumError = 48'hAAAAAAAAAAAA;
    coarseErrorCalc_start_reg = 1'h0;
    coarseErrorCalc_start_reg_1 = 1'h0;
    coarseErrorCalc_state_can_overlap = 1'h0;
    coarseErrorCalc_state_fired = 1'h0;
    coarseErrorCalc_state_mkFSMstate = 5'h0A;
    currSample = 48'hAAAAAAAAAAAA;
    fsError = 24'hAAAAAA;
    lastSample = 48'hAAAAAAAAAAAA;
    n = 10'h2AA;
    samples_0 = 48'hAAAAAAAAAAAA;
    samples_1 = 48'hAAAAAAAAAAAA;
    samples_2 = 48'hAAAAAAAAAAAA;
    samples_3 = 48'hAAAAAAAAAAAA;
    samples_4 = 48'hAAAAAAAAAAAA;
    samples_5 = 48'hAAAAAAAAAAAA;
    samples_6 = 48'hAAAAAAAAAAAA;
    samples_7 = 48'hAAAAAAAAAAAA;
    samples_8 = 48'hAAAAAAAAAAAA;
    samples_9 = 48'hAAAAAAAAAAAA;
    xFix = 24'hAAAAAA;
    yFix = 24'hAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036[12] &&
	  fpart__h264013 != 12'd0 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036[12] &&
	  fpart__h264013 != 12'd0 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036[12] ||
	   fpart__h264013 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_samples_0_7_BITS_47_TO_36_8_sampl_ETC___d1036));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264229);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264296);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264385);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264474);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264563);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264652);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21) $write(", ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100[12] &&
	  fpart__h264789 != 12'd0 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100 ==
	  13'd8191)
	$write("-0.");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100[12] &&
	  fpart__h264789 != 12'd0 &&
	  SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100 !=
	  13'd8191)
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100 +
		       13'd1));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  (!SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100[12] ||
	   fpart__h264789 == 12'd0))
	$write("%0d.",
	       $signed(SEXT_SEL_ARR_samples_0_7_BITS_23_TO_12_22_samp_ETC___d1100));
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h264999);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h265066);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h265155);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h265244);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h265333);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21)
	$write("%0d", digit__h265422);
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21) $display(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd1 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 83, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l83c20] and [RL_coarseErrorCalc_action_l84c20,\n  RL_coarseErrorCalc_action_l85c20, RL_coarseErrorCalc_action_f_init_l86c9,\n  RL_coarseErrorCalc_action_l87c20, RL_coarseErrorCalc_action_l88c22,\n  RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd2 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 84, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l84c20] and [RL_coarseErrorCalc_action_l85c20,\n  RL_coarseErrorCalc_action_f_init_l86c9, RL_coarseErrorCalc_action_l87c20,\n  RL_coarseErrorCalc_action_l88c22, RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd3 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 85, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l85c20] and\n  [RL_coarseErrorCalc_action_f_init_l86c9, RL_coarseErrorCalc_action_l87c20,\n  RL_coarseErrorCalc_action_l88c22, RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l87c20 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 87, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l87c20] and [RL_coarseErrorCalc_action_l88c22,\n  RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd4 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_f_init_l86c9] and\n  [RL_coarseErrorCalc_action_l87c20, RL_coarseErrorCalc_action_l88c22,\n  RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l88c22 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 88, column 22: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l88c22] and\n  [RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd7 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 86, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_f_update_l86c9] and\n  [RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l91c24 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 91, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l91c24] and [RL_coarseErrorCalc_action_l92c23,\n  RL_coarseErrorCalc_action_l93c24, RL_coarseErrorCalc_action_l94c24,\n  RL_coarseErrorCalc_action_l95c24, RL_coarseErrorCalc_action_l96c20,\n  RL_coarseErrorCalc_action_f_update_l90c9, RL_coarseErrorCalc_action_l99c17,\n  RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_f_init_l90c9] and\n  [RL_coarseErrorCalc_action_l91c24, RL_coarseErrorCalc_action_l92c23,\n  RL_coarseErrorCalc_action_l93c24, RL_coarseErrorCalc_action_l94c24,\n  RL_coarseErrorCalc_action_l95c24, RL_coarseErrorCalc_action_l96c20,\n  RL_coarseErrorCalc_action_f_update_l90c9, RL_coarseErrorCalc_action_l99c17,\n  RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd10 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 92, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l92c23] and [RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd11 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 93, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l93c24] and [RL_coarseErrorCalc_action_l94c24,\n  RL_coarseErrorCalc_action_l95c24, RL_coarseErrorCalc_action_l96c20,\n  RL_coarseErrorCalc_action_f_update_l90c9, RL_coarseErrorCalc_action_l99c17,\n  RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd13 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 95, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l95c24] and [RL_coarseErrorCalc_action_l96c20,\n  RL_coarseErrorCalc_action_f_update_l90c9, RL_coarseErrorCalc_action_l99c17,\n  RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd12 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 94, column 24: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l94c24] and [RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd14 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 96, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l96c20] and\n  [RL_coarseErrorCalc_action_f_update_l90c9, RL_coarseErrorCalc_action_l99c17,\n  RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd15 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 90, column 50: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_f_update_l90c9] and\n  [RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd17 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 101, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_f_init_l101c9] and\n  [RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l99c17 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 99, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l99c17] and\n  [RL_coarseErrorCalc_action_f_init_l101c9, RL_coarseErrorCalc_action_l102c20,\n  RL_coarseErrorCalc_action_l103c19, RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l102c20 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 102, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l102c20] and [RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l103c19 &&
	  (WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 103, column 19: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l103c19] and [RL_coarseErrorCalc_action_l104c13,\n  RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l104c13 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 104, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l104c13] and [RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (coarseErrorCalc_state_mkFSMstate == 5'd21 &&
	  coarseErrorCalc_state_mkFSMstate == 5'd22)
	$display("Error: \"CoarseFreq_optimal.bsv\", line 110, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l110c13] and\n  [RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_coarseErrorCalc_action_l82c20 &&
	  (coarseErrorCalc_state_mkFSMstate == 5'd1 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd2 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd3 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd4 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l87c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l88c22 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd7 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_f_init_l90c9 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l91c24 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd10 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd11 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd12 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd14 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd15 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l99c17 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd17 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l102c20 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l103c19 ||
	   WILL_FIRE_RL_coarseErrorCalc_action_l104c13 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd21 ||
	   coarseErrorCalc_state_mkFSMstate == 5'd22))
	$display("Error: \"CoarseFreq_optimal.bsv\", line 82, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets\n  [RL_coarseErrorCalc_action_l82c20] and [RL_coarseErrorCalc_action_l83c20,\n  RL_coarseErrorCalc_action_l84c20, RL_coarseErrorCalc_action_l85c20,\n  RL_coarseErrorCalc_action_f_init_l86c9, RL_coarseErrorCalc_action_l87c20,\n  RL_coarseErrorCalc_action_l88c22, RL_coarseErrorCalc_action_f_update_l86c9,\n  RL_coarseErrorCalc_action_f_init_l90c9, RL_coarseErrorCalc_action_l91c24,\n  RL_coarseErrorCalc_action_l92c23, RL_coarseErrorCalc_action_l93c24,\n  RL_coarseErrorCalc_action_l94c24, RL_coarseErrorCalc_action_l95c24,\n  RL_coarseErrorCalc_action_l96c20, RL_coarseErrorCalc_action_f_update_l90c9,\n  RL_coarseErrorCalc_action_l99c17, RL_coarseErrorCalc_action_f_init_l101c9,\n  RL_coarseErrorCalc_action_l102c20, RL_coarseErrorCalc_action_l103c19,\n  RL_coarseErrorCalc_action_l104c13, RL_coarseErrorCalc_action_l110c13,\n  RL_coarseErrorCalc_action_f_update_l101c9] ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkCoarseFreqO

