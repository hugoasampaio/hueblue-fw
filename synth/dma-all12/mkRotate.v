//
// Generated by Bluespec Compiler, version 2024.01-9-gc481d7f5 (build c481d7f5)
//
// On Sun May 26 20:29:16 -03 2024
//
//
// Ports:
// Name                         I/O  size props
// RDY_setPolar                   O     1
// getX                           O    24
// RDY_getX                       O     1
// getY                           O    24
// RDY_getY                       O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// setPolar_x                     I    24 reg
// setPolar_y                     I    24 reg
// setPolar_z                     I    24 reg
// EN_setPolar                    I     1
// EN_getX                        I     1 unused
// EN_getY                        I     1 unused
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkRotate(CLK,
		RST_N,

		setPolar_x,
		setPolar_y,
		setPolar_z,
		EN_setPolar,
		RDY_setPolar,

		EN_getX,
		getX,
		RDY_getX,

		EN_getY,
		getY,
		RDY_getY);
  input  CLK;
  input  RST_N;

  // action method setPolar
  input  [23 : 0] setPolar_x;
  input  [23 : 0] setPolar_y;
  input  [23 : 0] setPolar_z;
  input  EN_setPolar;
  output RDY_setPolar;

  // actionvalue method getX
  input  EN_getX;
  output [23 : 0] getX;
  output RDY_getX;

  // actionvalue method getY
  input  EN_getY;
  output [23 : 0] getY;
  output RDY_getY;

  // signals for module outputs
  wire [23 : 0] getX, getY;
  wire RDY_getX, RDY_getY, RDY_setPolar;

  // inlined wires
  wire atanCalc_start_wire$whas, atanCalc_state_set_pw$whas;

  // register atanCalc_start_reg
  reg atanCalc_start_reg;
  wire atanCalc_start_reg$D_IN, atanCalc_start_reg$EN;

  // register atanCalc_start_reg_1
  reg atanCalc_start_reg_1;
  wire atanCalc_start_reg_1$D_IN, atanCalc_start_reg_1$EN;

  // register atanCalc_state_can_overlap
  reg atanCalc_state_can_overlap;
  wire atanCalc_state_can_overlap$D_IN, atanCalc_state_can_overlap$EN;

  // register atanCalc_state_fired
  reg atanCalc_state_fired;
  wire atanCalc_state_fired$D_IN, atanCalc_state_fired$EN;

  // register atanCalc_state_mkFSMstate
  reg [3 : 0] atanCalc_state_mkFSMstate;
  reg [3 : 0] atanCalc_state_mkFSMstate$D_IN;
  wire atanCalc_state_mkFSMstate$EN;

  // register n
  reg [3 : 0] n;
  wire [3 : 0] n$D_IN;
  wire n$EN;

  // register x_
  reg [23 : 0] x_;
  reg [23 : 0] x_$D_IN;
  wire x_$EN;

  // register y_
  reg [23 : 0] y_;
  reg [23 : 0] y_$D_IN;
  wire y_$EN;

  // register z_
  reg [23 : 0] z_;
  reg [23 : 0] z_$D_IN;
  wire z_$EN;

  // ports of submodule ix
  wire [23 : 0] ix$D_IN, ix$D_OUT;
  wire ix$CLR, ix$DEQ, ix$EMPTY_N, ix$ENQ, ix$FULL_N;

  // ports of submodule iy
  wire [23 : 0] iy$D_IN, iy$D_OUT;
  wire iy$CLR, iy$DEQ, iy$EMPTY_N, iy$ENQ, iy$FULL_N;

  // ports of submodule iz
  wire [23 : 0] iz$D_IN, iz$D_OUT;
  wire iz$CLR, iz$DEQ, iz$EMPTY_N, iz$ENQ, iz$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_atanCalc_action_f_init_l65c9,
       WILL_FIRE_RL_atanCalc_action_l46c12,
       WILL_FIRE_RL_atanCalc_action_l47c11,
       WILL_FIRE_RL_atanCalc_action_l48c12,
       WILL_FIRE_RL_atanCalc_action_l49c11,
       WILL_FIRE_RL_atanCalc_action_l50c12,
       WILL_FIRE_RL_atanCalc_action_l51c11,
       WILL_FIRE_RL_atanCalc_action_l53c32,
       WILL_FIRE_RL_atanCalc_action_l59c32,
       WILL_FIRE_RL_atanCalc_action_l66c13,
       WILL_FIRE_RL_atanCalc_fsm_start,
       WILL_FIRE_RL_atanCalc_idle_l45c22,
       WILL_FIRE_RL_atanCalc_idle_l45c22_1;

  // inputs to muxes for submodule ports
  wire [23 : 0] MUX_x_$write_1__VAL_2,
		MUX_x_$write_1__VAL_3,
		MUX_x_$write_1__VAL_4,
		MUX_y_$write_1__VAL_2,
		MUX_y_$write_1__VAL_3,
		MUX_y_$write_1__VAL_4,
		MUX_z_$write_1__VAL_1,
		MUX_z_$write_1__VAL_2,
		MUX_z_$write_1__VAL_4;
  wire [3 : 0] MUX_n$write_1__VAL_1;
  wire MUX_atanCalc_state_mkFSMstate$write_1__SEL_1;

  // remaining internal signals
  reg [11 : 0] CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1;
  wire [47 : 0] IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298,
		IF_x__9_BIT_23_93_THEN_NEG_x__9_94_ELSE_x__9_9_ETC___d296,
		IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87,
		IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_x__9_MI_ETC___d85,
		IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_x__9_P_ETC___d172,
		IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335,
		IF_y__0_BIT_23_30_THEN_NEG_y__0_31_ELSE_y__0_3_ETC___d333,
		IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_y__0__ETC___d211,
		IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_y__0_P_ETC___d124,
		x__h37797,
		x__h40975,
		x__h43720;
  wire [35 : 0] IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313,
		IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102,
		IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350,
		IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d310,
		IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d99,
		IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_IF_x___ETC___d186,
		IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d347,
		IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_IF_y__ETC___d225,
		IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_IF_y___ETC___d138,
		x__h37468,
		x__h40646,
		x__h43391;
  wire [23 : 0] _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267,
		x__9_MINUS_y__0___d81,
		x__9_PLUS_y__0___d168,
		x__h35104,
		x__h37852,
		x__h41030,
		x__h43775,
		x__h46833,
		x__h46933,
		x__h47004,
		x__h47895,
		x__h47910,
		x__h47966,
		x__h47981,
		x__h48037,
		x__h49834,
		x__h52643,
		y__0_MINUS_x__9___d207,
		y__0_PLUS_x__9___d120;
  wire [11 : 0] y_f__h35949,
		y_f__h38694,
		y_f__h41872,
		y_f__h44617,
		y_f__h50676,
		y_f__h53485;
  wire atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283,
       n_8_ULT_14___d39,
       z__1_SLE_0___d256,
       z__1_SLE_3216___d72,
       z__1_SLT_3216___d160;

  // action method setPolar
  assign RDY_setPolar =
	     ix$FULL_N && iy$FULL_N && iz$FULL_N &&
	     atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283 &&
	     !atanCalc_start_reg ;

  // actionvalue method getX
  assign getX =
	     (!IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[35] &&
	      (IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[23] ||
	       IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[35] &&
		 (!IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[23] ||
		  ~IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313[23:0]) ;
  assign RDY_getX =
	     atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283 &&
	     !atanCalc_start_reg ;

  // actionvalue method getY
  assign getY =
	     (!IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[35] &&
	      (IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[23] ||
	       IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[35] &&
		 (!IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[23] ||
		  ~IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350[23:0]) ;
  assign RDY_getY =
	     atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283 &&
	     !atanCalc_start_reg ;

  // submodule ix
  FIFO2 #(.width(32'd24), .guarded(1'd1)) ix(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(ix$D_IN),
					     .ENQ(ix$ENQ),
					     .DEQ(ix$DEQ),
					     .CLR(ix$CLR),
					     .D_OUT(ix$D_OUT),
					     .FULL_N(ix$FULL_N),
					     .EMPTY_N(ix$EMPTY_N));

  // submodule iy
  FIFO2 #(.width(32'd24), .guarded(1'd1)) iy(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(iy$D_IN),
					     .ENQ(iy$ENQ),
					     .DEQ(iy$DEQ),
					     .CLR(iy$CLR),
					     .D_OUT(iy$D_OUT),
					     .FULL_N(iy$FULL_N),
					     .EMPTY_N(iy$EMPTY_N));

  // submodule iz
  FIFO2 #(.width(32'd24), .guarded(1'd1)) iz(.RST(RST_N),
					     .CLK(CLK),
					     .D_IN(iz$D_IN),
					     .ENQ(iz$ENQ),
					     .DEQ(iz$DEQ),
					     .CLR(iz$CLR),
					     .D_OUT(iz$D_OUT),
					     .FULL_N(iz$FULL_N),
					     .EMPTY_N(iz$EMPTY_N));

  // rule RL_atanCalc_action_l47c11
  assign WILL_FIRE_RL_atanCalc_action_l47c11 =
	     ix$EMPTY_N && atanCalc_state_mkFSMstate == 4'd1 ;

  // rule RL_atanCalc_action_l48c12
  assign WILL_FIRE_RL_atanCalc_action_l48c12 =
	     iy$EMPTY_N && atanCalc_state_mkFSMstate == 4'd2 ;

  // rule RL_atanCalc_action_l49c11
  assign WILL_FIRE_RL_atanCalc_action_l49c11 =
	     iy$EMPTY_N && atanCalc_state_mkFSMstate == 4'd3 ;

  // rule RL_atanCalc_action_l50c12
  assign WILL_FIRE_RL_atanCalc_action_l50c12 =
	     iz$EMPTY_N && atanCalc_state_mkFSMstate == 4'd4 ;

  // rule RL_atanCalc_action_l51c11
  assign WILL_FIRE_RL_atanCalc_action_l51c11 =
	     iz$EMPTY_N && atanCalc_state_mkFSMstate == 4'd5 ;

  // rule RL_atanCalc_action_l53c32
  assign WILL_FIRE_RL_atanCalc_action_l53c32 =
	     !z__1_SLE_3216___d72 &&
	     (atanCalc_state_mkFSMstate == 4'd6 ||
	      atanCalc_state_mkFSMstate == 4'd7) ;

  // rule RL_atanCalc_action_l66c13
  assign WILL_FIRE_RL_atanCalc_action_l66c13 =
	     n_8_ULT_14___d39 &&
	     (atanCalc_state_mkFSMstate == 4'd9 ||
	      atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_atanCalc_fsm_start
  assign WILL_FIRE_RL_atanCalc_fsm_start =
	     atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283 &&
	     atanCalc_start_reg ;

  // rule RL_atanCalc_action_l46c12
  assign WILL_FIRE_RL_atanCalc_action_l46c12 =
	     ix$EMPTY_N &&
	     (atanCalc_start_wire$whas && atanCalc_state_mkFSMstate == 4'd0 ||
	      !n_8_ULT_14___d39 && atanCalc_start_wire$whas &&
	      atanCalc_state_mkFSMstate == 4'd9 ||
	      !n_8_ULT_14___d39 && atanCalc_start_wire$whas &&
	      atanCalc_state_mkFSMstate == 4'd11) ;

  // rule RL_atanCalc_action_l59c32
  assign WILL_FIRE_RL_atanCalc_action_l59c32 =
	     z__1_SLE_3216___d72 && z__1_SLT_3216___d160 &&
	     (atanCalc_state_mkFSMstate == 4'd6 ||
	      atanCalc_state_mkFSMstate == 4'd7) ||
	     z__1_SLT_3216___d160 && atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_atanCalc_action_f_init_l65c9
  assign WILL_FIRE_RL_atanCalc_action_f_init_l65c9 =
	     z__1_SLE_3216___d72 && !z__1_SLT_3216___d160 &&
	     (atanCalc_state_mkFSMstate == 4'd6 ||
	      atanCalc_state_mkFSMstate == 4'd7) ||
	     !z__1_SLT_3216___d160 && atanCalc_state_mkFSMstate == 4'd8 ;

  // rule RL_atanCalc_idle_l45c22
  assign WILL_FIRE_RL_atanCalc_idle_l45c22 =
	     !n_8_ULT_14___d39 && !atanCalc_start_wire$whas &&
	     atanCalc_state_mkFSMstate == 4'd9 ;

  // rule RL_atanCalc_idle_l45c22_1
  assign WILL_FIRE_RL_atanCalc_idle_l45c22_1 =
	     !n_8_ULT_14___d39 && !atanCalc_start_wire$whas &&
	     atanCalc_state_mkFSMstate == 4'd11 ;

  // inputs to muxes for submodule ports
  assign MUX_atanCalc_state_mkFSMstate$write_1__SEL_1 =
	     WILL_FIRE_RL_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_atanCalc_idle_l45c22 ;
  assign MUX_n$write_1__VAL_1 = n + 4'd1 ;
  assign MUX_x_$write_1__VAL_2 =
	     (!IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[35] &&
	      (IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[23] ||
	       IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[35:24] !=
	       12'd0)) ?
	       24'd8388607 :
	       ((IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[35] &&
		 (!IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[23] ||
		  ~IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[35:24] !=
		  12'd0)) ?
		  24'd8388608 :
		  IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102[23:0]) ;
  assign MUX_x_$write_1__VAL_3 =
	     (!x__h40646[35] &&
	      (x__h40646[23] || x__h40646[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h40646[35] &&
		 (!x__h40646[23] || ~x__h40646[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h40646[23:0]) ;
  assign MUX_x_$write_1__VAL_4 = z__1_SLE_0___d256 ? x__h47895 : x__h46833 ;
  assign MUX_y_$write_1__VAL_2 =
	     (!x__h37468[35] &&
	      (x__h37468[23] || x__h37468[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h37468[35] &&
		 (!x__h37468[23] || ~x__h37468[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h37468[23:0]) ;
  assign MUX_y_$write_1__VAL_3 =
	     (!x__h43391[35] &&
	      (x__h43391[23] || x__h43391[35:24] != 12'd0)) ?
	       24'd8388607 :
	       ((x__h43391[35] &&
		 (!x__h43391[23] || ~x__h43391[35:24] != 12'd0)) ?
		  24'd8388608 :
		  x__h43391[23:0]) ;
  assign MUX_y_$write_1__VAL_4 = z__1_SLE_0___d256 ? x__h47966 : x__h46933 ;
  assign MUX_z_$write_1__VAL_1 = z_ + 24'd3216 ;
  assign MUX_z_$write_1__VAL_2 = z_ - 24'd3216 ;
  assign MUX_z_$write_1__VAL_4 = z__1_SLE_0___d256 ? x__h48037 : x__h47004 ;

  // inlined wires
  assign atanCalc_start_wire$whas =
	     WILL_FIRE_RL_atanCalc_fsm_start ||
	     atanCalc_start_reg_1 && !atanCalc_state_fired ;
  assign atanCalc_state_set_pw$whas =
	     WILL_FIRE_RL_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_atanCalc_idle_l45c22 ||
	     atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_atanCalc_action_l66c13 ||
	     WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_atanCalc_action_l46c12 ;

  // register atanCalc_start_reg
  assign atanCalc_start_reg$D_IN = !WILL_FIRE_RL_atanCalc_fsm_start ;
  assign atanCalc_start_reg$EN =
	     WILL_FIRE_RL_atanCalc_fsm_start || EN_setPolar ;

  // register atanCalc_start_reg_1
  assign atanCalc_start_reg_1$D_IN = atanCalc_start_wire$whas ;
  assign atanCalc_start_reg_1$EN = 1'd1 ;

  // register atanCalc_state_can_overlap
  assign atanCalc_state_can_overlap$D_IN =
	     atanCalc_state_set_pw$whas || atanCalc_state_can_overlap ;
  assign atanCalc_state_can_overlap$EN = 1'd1 ;

  // register atanCalc_state_fired
  assign atanCalc_state_fired$D_IN = atanCalc_state_set_pw$whas ;
  assign atanCalc_state_fired$EN = 1'd1 ;

  // register atanCalc_state_mkFSMstate
  always@(MUX_atanCalc_state_mkFSMstate$write_1__SEL_1 or
	  WILL_FIRE_RL_atanCalc_action_l46c12 or
	  WILL_FIRE_RL_atanCalc_action_l47c11 or
	  WILL_FIRE_RL_atanCalc_action_l48c12 or
	  WILL_FIRE_RL_atanCalc_action_l49c11 or
	  WILL_FIRE_RL_atanCalc_action_l50c12 or
	  WILL_FIRE_RL_atanCalc_action_l51c11 or
	  WILL_FIRE_RL_atanCalc_action_l53c32 or
	  WILL_FIRE_RL_atanCalc_action_l59c32 or
	  WILL_FIRE_RL_atanCalc_action_f_init_l65c9 or
	  WILL_FIRE_RL_atanCalc_action_l66c13 or atanCalc_state_mkFSMstate)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_atanCalc_state_mkFSMstate$write_1__SEL_1:
	  atanCalc_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_atanCalc_action_l46c12:
	  atanCalc_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_atanCalc_action_l47c11:
	  atanCalc_state_mkFSMstate$D_IN = 4'd2;
      WILL_FIRE_RL_atanCalc_action_l48c12:
	  atanCalc_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_atanCalc_action_l49c11:
	  atanCalc_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_atanCalc_action_l50c12:
	  atanCalc_state_mkFSMstate$D_IN = 4'd5;
      WILL_FIRE_RL_atanCalc_action_l51c11:
	  atanCalc_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_atanCalc_action_l53c32:
	  atanCalc_state_mkFSMstate$D_IN = 4'd7;
      WILL_FIRE_RL_atanCalc_action_l59c32:
	  atanCalc_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_atanCalc_action_f_init_l65c9:
	  atanCalc_state_mkFSMstate$D_IN = 4'd9;
      WILL_FIRE_RL_atanCalc_action_l66c13:
	  atanCalc_state_mkFSMstate$D_IN = 4'd10;
      atanCalc_state_mkFSMstate == 4'd10:
	  atanCalc_state_mkFSMstate$D_IN = 4'd11;
      default: atanCalc_state_mkFSMstate$D_IN =
		   4'bxxxx /* unspecified value */ ;
    endcase
  end
  assign atanCalc_state_mkFSMstate$EN =
	     WILL_FIRE_RL_atanCalc_idle_l45c22_1 ||
	     WILL_FIRE_RL_atanCalc_idle_l45c22 ||
	     WILL_FIRE_RL_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_atanCalc_action_l47c11 ||
	     WILL_FIRE_RL_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_atanCalc_action_l49c11 ||
	     WILL_FIRE_RL_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_atanCalc_action_l51c11 ||
	     WILL_FIRE_RL_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	     WILL_FIRE_RL_atanCalc_action_l66c13 ||
	     atanCalc_state_mkFSMstate == 4'd10 ;

  // register n
  assign n$D_IN =
	     (atanCalc_state_mkFSMstate == 4'd10) ?
	       MUX_n$write_1__VAL_1 :
	       4'd0 ;
  assign n$EN =
	     atanCalc_state_mkFSMstate == 4'd10 ||
	     WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ;

  // register x_
  always@(WILL_FIRE_RL_atanCalc_action_l46c12 or
	  ix$D_OUT or
	  WILL_FIRE_RL_atanCalc_action_l53c32 or
	  MUX_x_$write_1__VAL_2 or
	  WILL_FIRE_RL_atanCalc_action_l59c32 or
	  MUX_x_$write_1__VAL_3 or
	  WILL_FIRE_RL_atanCalc_action_l66c13 or MUX_x_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_atanCalc_action_l46c12: x_$D_IN = ix$D_OUT;
      WILL_FIRE_RL_atanCalc_action_l53c32: x_$D_IN = MUX_x_$write_1__VAL_2;
      WILL_FIRE_RL_atanCalc_action_l59c32: x_$D_IN = MUX_x_$write_1__VAL_3;
      WILL_FIRE_RL_atanCalc_action_l66c13: x_$D_IN = MUX_x_$write_1__VAL_4;
      default: x_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign x_$EN =
	     WILL_FIRE_RL_atanCalc_action_l46c12 ||
	     WILL_FIRE_RL_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_atanCalc_action_l66c13 ;

  // register y_
  always@(WILL_FIRE_RL_atanCalc_action_l48c12 or
	  iy$D_OUT or
	  WILL_FIRE_RL_atanCalc_action_l53c32 or
	  MUX_y_$write_1__VAL_2 or
	  WILL_FIRE_RL_atanCalc_action_l59c32 or
	  MUX_y_$write_1__VAL_3 or
	  WILL_FIRE_RL_atanCalc_action_l66c13 or MUX_y_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_atanCalc_action_l48c12: y_$D_IN = iy$D_OUT;
      WILL_FIRE_RL_atanCalc_action_l53c32: y_$D_IN = MUX_y_$write_1__VAL_2;
      WILL_FIRE_RL_atanCalc_action_l59c32: y_$D_IN = MUX_y_$write_1__VAL_3;
      WILL_FIRE_RL_atanCalc_action_l66c13: y_$D_IN = MUX_y_$write_1__VAL_4;
      default: y_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign y_$EN =
	     WILL_FIRE_RL_atanCalc_action_l48c12 ||
	     WILL_FIRE_RL_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_atanCalc_action_l66c13 ;

  // register z_
  always@(WILL_FIRE_RL_atanCalc_action_l59c32 or
	  MUX_z_$write_1__VAL_1 or
	  WILL_FIRE_RL_atanCalc_action_l53c32 or
	  MUX_z_$write_1__VAL_2 or
	  WILL_FIRE_RL_atanCalc_action_l50c12 or
	  iz$D_OUT or
	  WILL_FIRE_RL_atanCalc_action_l66c13 or MUX_z_$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_atanCalc_action_l59c32: z_$D_IN = MUX_z_$write_1__VAL_1;
      WILL_FIRE_RL_atanCalc_action_l53c32: z_$D_IN = MUX_z_$write_1__VAL_2;
      WILL_FIRE_RL_atanCalc_action_l50c12: z_$D_IN = iz$D_OUT;
      WILL_FIRE_RL_atanCalc_action_l66c13: z_$D_IN = MUX_z_$write_1__VAL_4;
      default: z_$D_IN =
		   24'bxxxxxxxxxxxxxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end
  assign z_$EN =
	     WILL_FIRE_RL_atanCalc_action_l59c32 ||
	     WILL_FIRE_RL_atanCalc_action_l53c32 ||
	     WILL_FIRE_RL_atanCalc_action_l50c12 ||
	     WILL_FIRE_RL_atanCalc_action_l66c13 ;

  // submodule ix
  assign ix$D_IN = setPolar_x ;
  assign ix$ENQ = EN_setPolar ;
  assign ix$DEQ = WILL_FIRE_RL_atanCalc_action_l47c11 ;
  assign ix$CLR = 1'b0 ;

  // submodule iy
  assign iy$D_IN = setPolar_y ;
  assign iy$ENQ = EN_setPolar ;
  assign iy$DEQ = WILL_FIRE_RL_atanCalc_action_l49c11 ;
  assign iy$CLR = 1'b0 ;

  // submodule iz
  assign iz$D_IN = setPolar_z ;
  assign iz$ENQ = EN_setPolar ;
  assign iz$DEQ = WILL_FIRE_RL_atanCalc_action_l51c11 ;
  assign iz$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_NOT_IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT__ETC___d313 =
	     (!IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298[47] &&
	      IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d310[35]) ?
	       36'h7FFFFFFFF :
	       IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d310 ;
  assign IF_NOT_IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG__ETC___d102 =
	     (!IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87[47] &&
	      IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d99[35]) ?
	       36'h7FFFFFFFF :
	       IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d99 ;
  assign IF_NOT_IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT__ETC___d350 =
	     (!IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335[47] &&
	      IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d347[35]) ?
	       36'h7FFFFFFFF :
	       IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d347 ;
  assign IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298 =
	     x_[23] ?
	       -IF_x__9_BIT_23_93_THEN_NEG_x__9_94_ELSE_x__9_9_ETC___d296 :
	       IF_x__9_BIT_23_93_THEN_NEG_x__9_94_ELSE_x__9_9_ETC___d296 ;
  assign IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d310 =
	     IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298[47:12] +
	     { 24'd0, y_f__h50676 } ;
  assign IF_x__9_BIT_23_93_THEN_NEG_x__9_94_ELSE_x__9_9_ETC___d296 =
	     x__h49834 * 24'd2487 ;
  assign IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87 =
	     x__9_MINUS_y__0___d81[23] ?
	       -IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_x__9_MI_ETC___d85 :
	       IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_x__9_MI_ETC___d85 ;
  assign IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d99 =
	     IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87[47:12] +
	     { 24'd0, y_f__h35949 } ;
  assign IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_x__9_MI_ETC___d85 =
	     x__h35104 * 24'd2896 ;
  assign IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_IF_x___ETC___d186 =
	     x__h40975[47:12] + { 24'd0, y_f__h41872 } ;
  assign IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_x__9_P_ETC___d172 =
	     x__h41030 * 24'd2896 ;
  assign IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335 =
	     y_[23] ?
	       -IF_y__0_BIT_23_30_THEN_NEG_y__0_31_ELSE_y__0_3_ETC___d333 :
	       IF_y__0_BIT_23_30_THEN_NEG_y__0_31_ELSE_y__0_3_ETC___d333 ;
  assign IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d347 =
	     IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335[47:12] +
	     { 24'd0, y_f__h53485 } ;
  assign IF_y__0_BIT_23_30_THEN_NEG_y__0_31_ELSE_y__0_3_ETC___d333 =
	     x__h52643 * 24'd2487 ;
  assign IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_IF_y__ETC___d225 =
	     x__h43720[47:12] + { 24'd0, y_f__h44617 } ;
  assign IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_y__0__ETC___d211 =
	     x__h43775 * 24'd2896 ;
  assign IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_IF_y___ETC___d138 =
	     x__h37797[47:12] + { 24'd0, y_f__h38694 } ;
  assign IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_y__0_P_ETC___d124 =
	     x__h37852 * 24'd2896 ;
  assign _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 =
	     { 12'd0,
	       CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 } ;
  assign atanCalc_abort_whas_AND_atanCalc_abort_wget_OR_ETC___d283 =
	     (atanCalc_state_mkFSMstate == 4'd0 ||
	      !n_8_ULT_14___d39 && atanCalc_state_mkFSMstate == 4'd9 ||
	      !n_8_ULT_14___d39 && atanCalc_state_mkFSMstate == 4'd11) &&
	     (!atanCalc_start_reg_1 || atanCalc_state_fired) ;
  assign n_8_ULT_14___d39 = n < 4'd14 ;
  assign x__9_MINUS_y__0___d81 = x_ - y_ ;
  assign x__9_PLUS_y__0___d168 = x_ + y_ ;
  assign x__h35104 =
	     x__9_MINUS_y__0___d81[23] ?
	       -x__9_MINUS_y__0___d81 :
	       x__9_MINUS_y__0___d81 ;
  assign x__h37468 =
	     (!x__h37797[47] &&
	      IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_IF_y___ETC___d138[35]) ?
	       36'h7FFFFFFFF :
	       IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_IF_y___ETC___d138 ;
  assign x__h37797 =
	     y__0_PLUS_x__9___d120[23] ?
	       -IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_y__0_P_ETC___d124 :
	       IF_y__0_PLUS_x__9_20_BIT_23_21_THEN_NEG_y__0_P_ETC___d124 ;
  assign x__h37852 =
	     y__0_PLUS_x__9___d120[23] ?
	       -y__0_PLUS_x__9___d120 :
	       y__0_PLUS_x__9___d120 ;
  assign x__h40646 =
	     (!x__h40975[47] &&
	      IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_IF_x___ETC___d186[35]) ?
	       36'h7FFFFFFFF :
	       IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_IF_x___ETC___d186 ;
  assign x__h40975 =
	     x__9_PLUS_y__0___d168[23] ?
	       -IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_x__9_P_ETC___d172 :
	       IF_x__9_PLUS_y__0_68_BIT_23_69_THEN_NEG_x__9_P_ETC___d172 ;
  assign x__h41030 =
	     x__9_PLUS_y__0___d168[23] ?
	       -x__9_PLUS_y__0___d168 :
	       x__9_PLUS_y__0___d168 ;
  assign x__h43391 =
	     (!x__h43720[47] &&
	      IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_IF_y__ETC___d225[35]) ?
	       36'h7FFFFFFFF :
	       IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_IF_y__ETC___d225 ;
  assign x__h43720 =
	     y__0_MINUS_x__9___d207[23] ?
	       -IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_y__0__ETC___d211 :
	       IF_y__0_MINUS_x__9_07_BIT_23_08_THEN_NEG_y__0__ETC___d211 ;
  assign x__h43775 =
	     y__0_MINUS_x__9___d207[23] ?
	       -y__0_MINUS_x__9___d207 :
	       y__0_MINUS_x__9___d207 ;
  assign x__h46833 = x_ - x__h47910 ;
  assign x__h46933 = y_ + x__h47981 ;
  assign x__h47004 =
	     z_ - _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h47895 = x_ + x__h47910 ;
  assign x__h47910 = y_ >> n | ~(24'hFFFFFF >> n) & {24{y_[23]}} ;
  assign x__h47966 = y_ - x__h47981 ;
  assign x__h47981 = x_ >> n | ~(24'hFFFFFF >> n) & {24{x_[23]}} ;
  assign x__h48037 =
	     z_ + _0_CONCAT_SEL_ARR_3216_1899_1003_509_255_127_63_ETC___d267 ;
  assign x__h49834 = x_[23] ? -x_ : x_ ;
  assign x__h52643 = y_[23] ? -y_ : y_ ;
  assign y__0_MINUS_x__9___d207 = y_ - x_ ;
  assign y__0_PLUS_x__9___d120 = y_ + x_ ;
  assign y_f__h35949 =
	     (IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87[11] &&
	      (IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87[47] ||
	       IF_x__9_MINUS_y__0_1_BIT_23_2_THEN_NEG_IF_x__9_ETC___d87[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h38694 =
	     (x__h37797[11] && (x__h37797[47] || x__h37797[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h41872 =
	     (x__h40975[11] && (x__h40975[47] || x__h40975[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h44617 =
	     (x__h43720[11] && (x__h43720[47] || x__h43720[10:0] != 11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h50676 =
	     (IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298[11] &&
	      (IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298[47] ||
	       IF_x__9_BIT_23_93_THEN_NEG_IF_x__9_BIT_23_93_T_ETC___d298[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign y_f__h53485 =
	     (IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335[11] &&
	      (IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335[47] ||
	       IF_y__0_BIT_23_30_THEN_NEG_IF_y__0_BIT_23_30_T_ETC___d335[10:0] !=
	       11'd0)) ?
	       12'd1 :
	       12'd0 ;
  assign z__1_SLE_0___d256 = (z_ ^ 24'h800000) <= 24'd8388608 ;
  assign z__1_SLE_3216___d72 = (z_ ^ 24'h800000) <= 24'd8391824 ;
  assign z__1_SLT_3216___d160 = (z_ ^ 24'h800000) < 24'd8391824 ;
  always@(n)
  begin
    case (n)
      4'd0: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd3216;
      4'd1: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd1899;
      4'd2: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd1003;
      4'd3: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd509;
      4'd4: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd255;
      4'd5: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd127;
      4'd6: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd63;
      4'd7: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd31;
      4'd8: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd15;
      4'd9: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd7;
      4'd10: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd3;
      4'd11: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd1;
      4'd12, 4'd13:
	  CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 = 12'd0;
      default: CASE_n_0_3216_1_1899_2_1003_3_509_4_255_5_127__ETC__q1 =
		   12'bxxxxxxxxxxxx /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	n <= `BSV_ASSIGNMENT_DELAY 4'd0;
	x_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	y_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
	z_ <= `BSV_ASSIGNMENT_DELAY 24'd0;
      end
    else
      begin
        if (atanCalc_start_reg$EN)
	  atanCalc_start_reg <= `BSV_ASSIGNMENT_DELAY atanCalc_start_reg$D_IN;
	if (atanCalc_start_reg_1$EN)
	  atanCalc_start_reg_1 <= `BSV_ASSIGNMENT_DELAY
	      atanCalc_start_reg_1$D_IN;
	if (atanCalc_state_can_overlap$EN)
	  atanCalc_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      atanCalc_state_can_overlap$D_IN;
	if (atanCalc_state_fired$EN)
	  atanCalc_state_fired <= `BSV_ASSIGNMENT_DELAY
	      atanCalc_state_fired$D_IN;
	if (atanCalc_state_mkFSMstate$EN)
	  atanCalc_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      atanCalc_state_mkFSMstate$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (x_$EN) x_ <= `BSV_ASSIGNMENT_DELAY x_$D_IN;
	if (y_$EN) y_ <= `BSV_ASSIGNMENT_DELAY y_$D_IN;
	if (z_$EN) z_ <= `BSV_ASSIGNMENT_DELAY z_$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    atanCalc_start_reg = 1'h0;
    atanCalc_start_reg_1 = 1'h0;
    atanCalc_state_can_overlap = 1'h0;
    atanCalc_state_fired = 1'h0;
    atanCalc_state_mkFSMstate = 4'hA;
    n = 4'hA;
    x_ = 24'hAAAAAA;
    y_ = 24'hAAAAAA;
    z_ = 24'hAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l66c13 &&
	  atanCalc_state_mkFSMstate == 4'd10)
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 66, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l66c13] and\n  [RL_atanCalc_action_f_update_l65c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l46c12 &&
	  (WILL_FIRE_RL_atanCalc_action_l47c11 ||
	   WILL_FIRE_RL_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 46, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l46c12] and\n  [RL_atanCalc_action_l47c11, RL_atanCalc_action_l48c12,\n  RL_atanCalc_action_l49c11, RL_atanCalc_action_l50c12,\n  RL_atanCalc_action_l51c11, RL_atanCalc_action_l53c32,\n  RL_atanCalc_action_l59c32, RL_atanCalc_action_f_init_l65c9,\n  RL_atanCalc_action_l66c13, RL_atanCalc_action_f_update_l65c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l47c11 &&
	  (WILL_FIRE_RL_atanCalc_action_l48c12 ||
	   WILL_FIRE_RL_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 47, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l47c11] and\n  [RL_atanCalc_action_l48c12, RL_atanCalc_action_l49c11,\n  RL_atanCalc_action_l50c12, RL_atanCalc_action_l51c11,\n  RL_atanCalc_action_l53c32, RL_atanCalc_action_l59c32,\n  RL_atanCalc_action_f_init_l65c9, RL_atanCalc_action_l66c13,\n  RL_atanCalc_action_f_update_l65c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l48c12 &&
	  (WILL_FIRE_RL_atanCalc_action_l49c11 ||
	   WILL_FIRE_RL_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 48, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l48c12] and\n  [RL_atanCalc_action_l49c11, RL_atanCalc_action_l50c12,\n  RL_atanCalc_action_l51c11, RL_atanCalc_action_l53c32,\n  RL_atanCalc_action_l59c32, RL_atanCalc_action_f_init_l65c9,\n  RL_atanCalc_action_l66c13, RL_atanCalc_action_f_update_l65c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l49c11 &&
	  (WILL_FIRE_RL_atanCalc_action_l50c12 ||
	   WILL_FIRE_RL_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 49, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l49c11] and\n  [RL_atanCalc_action_l50c12, RL_atanCalc_action_l51c11,\n  RL_atanCalc_action_l53c32, RL_atanCalc_action_l59c32,\n  RL_atanCalc_action_f_init_l65c9, RL_atanCalc_action_l66c13,\n  RL_atanCalc_action_f_update_l65c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l50c12 &&
	  (WILL_FIRE_RL_atanCalc_action_l51c11 ||
	   WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 50, column 12: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l50c12] and\n  [RL_atanCalc_action_l51c11, RL_atanCalc_action_l53c32,\n  RL_atanCalc_action_l59c32, RL_atanCalc_action_f_init_l65c9,\n  RL_atanCalc_action_l66c13, RL_atanCalc_action_f_update_l65c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l51c11 &&
	  (WILL_FIRE_RL_atanCalc_action_l53c32 ||
	   WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 51, column 11: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l51c11] and\n  [RL_atanCalc_action_l53c32, RL_atanCalc_action_l59c32,\n  RL_atanCalc_action_f_init_l65c9, RL_atanCalc_action_l66c13,\n  RL_atanCalc_action_f_update_l65c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l53c32 &&
	  (WILL_FIRE_RL_atanCalc_action_l59c32 ||
	   WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 53, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l53c32] and\n  [RL_atanCalc_action_l59c32, RL_atanCalc_action_f_init_l65c9,\n  RL_atanCalc_action_l66c13, RL_atanCalc_action_f_update_l65c9] ) fired in the\n  same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_l59c32 &&
	  (WILL_FIRE_RL_atanCalc_action_f_init_l65c9 ||
	   WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 59, column 32: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_l59c32] and\n  [RL_atanCalc_action_f_init_l65c9, RL_atanCalc_action_l66c13,\n  RL_atanCalc_action_f_update_l65c9] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_atanCalc_action_f_init_l65c9 &&
	  (WILL_FIRE_RL_atanCalc_action_l66c13 ||
	   atanCalc_state_mkFSMstate == 4'd10))
	$display("Error: \"../Cordic/Cordic_optimal.bsv\", line 65, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_atanCalc_action_f_init_l65c9]\n  and [RL_atanCalc_action_l66c13, RL_atanCalc_action_f_update_l65c9] ) fired\n  in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkRotate

