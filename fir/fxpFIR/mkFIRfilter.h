/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri Apr 28 16:52:50 -03 2023
 * 
 */

/* Generation options: */
#ifndef __mkFIRfilter_h__
#define __mkFIRfilter_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkFIRfilter module */
class MOD_mkFIRfilter : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUInt32> INST_acc;
  MOD_Wire<tUInt8> INST_conv_abort;
  MOD_Reg<tUInt8> INST_conv_start_reg;
  MOD_Reg<tUInt8> INST_conv_start_reg_1;
  MOD_Wire<tUInt8> INST_conv_start_reg_2;
  MOD_Wire<tUInt8> INST_conv_start_wire;
  MOD_Reg<tUInt8> INST_conv_state_can_overlap;
  MOD_Reg<tUInt8> INST_conv_state_fired;
  MOD_Wire<tUInt8> INST_conv_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_conv_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_conv_state_overlap_pw;
  MOD_Wire<tUInt8> INST_conv_state_set_pw;
  MOD_Reg<tUInt8> INST_n;
  MOD_Fifo<tUInt32> INST_newSample;
  MOD_Reg<tUInt32> INST_samples_0;
  MOD_Reg<tUInt32> INST_samples_1;
  MOD_Reg<tUInt32> INST_samples_10;
  MOD_Reg<tUInt32> INST_samples_11;
  MOD_Reg<tUInt32> INST_samples_12;
  MOD_Reg<tUInt32> INST_samples_13;
  MOD_Reg<tUInt32> INST_samples_14;
  MOD_Reg<tUInt32> INST_samples_15;
  MOD_Reg<tUInt32> INST_samples_16;
  MOD_Reg<tUInt32> INST_samples_17;
  MOD_Reg<tUInt32> INST_samples_18;
  MOD_Reg<tUInt32> INST_samples_19;
  MOD_Reg<tUInt32> INST_samples_2;
  MOD_Reg<tUInt32> INST_samples_20;
  MOD_Reg<tUInt32> INST_samples_21;
  MOD_Reg<tUInt32> INST_samples_22;
  MOD_Reg<tUInt32> INST_samples_23;
  MOD_Reg<tUInt32> INST_samples_24;
  MOD_Reg<tUInt32> INST_samples_25;
  MOD_Reg<tUInt32> INST_samples_26;
  MOD_Reg<tUInt32> INST_samples_27;
  MOD_Reg<tUInt32> INST_samples_28;
  MOD_Reg<tUInt32> INST_samples_29;
  MOD_Reg<tUInt32> INST_samples_3;
  MOD_Reg<tUInt32> INST_samples_30;
  MOD_Reg<tUInt32> INST_samples_31;
  MOD_Reg<tUInt32> INST_samples_32;
  MOD_Reg<tUInt32> INST_samples_33;
  MOD_Reg<tUInt32> INST_samples_34;
  MOD_Reg<tUInt32> INST_samples_35;
  MOD_Reg<tUInt32> INST_samples_36;
  MOD_Reg<tUInt32> INST_samples_37;
  MOD_Reg<tUInt32> INST_samples_38;
  MOD_Reg<tUInt32> INST_samples_39;
  MOD_Reg<tUInt32> INST_samples_4;
  MOD_Reg<tUInt32> INST_samples_40;
  MOD_Reg<tUInt32> INST_samples_41;
  MOD_Reg<tUInt32> INST_samples_42;
  MOD_Reg<tUInt32> INST_samples_5;
  MOD_Reg<tUInt32> INST_samples_6;
  MOD_Reg<tUInt32> INST_samples_7;
  MOD_Reg<tUInt32> INST_samples_8;
  MOD_Reg<tUInt32> INST_samples_9;
  MOD_Reg<tUInt32> INST_sum;
 
 /* Constructor */
 public:
  MOD_mkFIRfilter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l37c13;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l36c12;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_update_l32c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l33c17;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_init_l32c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l31c18;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l30c16;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_update_l26c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l26c38;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_init_l26c9;
  tUInt8 DEF_x__h33436;
 
 /* Local definitions */
 private:
  tUInt32 DEF_b__h29559;
  tUInt32 DEF_b__h29558;
  tUInt32 DEF_b__h29557;
  tUInt32 DEF_b__h29556;
  tUInt32 DEF_b__h29555;
  tUInt32 DEF_b__h29554;
  tUInt32 DEF_b__h29553;
  tUInt32 DEF_b__h29552;
  tUInt32 DEF_b__h29551;
  tUInt32 DEF_b__h29550;
  tUInt32 DEF_b__h29549;
  tUInt32 DEF_b__h29548;
  tUInt32 DEF_b__h29547;
  tUInt32 DEF_b__h29546;
  tUInt32 DEF_b__h29545;
  tUInt32 DEF_b__h29544;
  tUInt32 DEF_b__h29543;
  tUInt32 DEF_b__h29542;
  tUInt32 DEF_b__h29541;
  tUInt32 DEF_b__h29540;
  tUInt32 DEF_b__h29539;
  tUInt32 DEF_b__h29538;
  tUInt32 DEF_b__h29537;
  tUInt32 DEF_b__h29536;
  tUInt32 DEF_b__h29535;
  tUInt32 DEF_b__h29534;
  tUInt32 DEF_b__h29533;
  tUInt32 DEF_b__h29532;
  tUInt32 DEF_b__h29531;
  tUInt32 DEF_b__h29530;
  tUInt32 DEF_b__h29529;
  tUInt32 DEF_b__h29528;
  tUInt32 DEF_b__h29527;
  tUInt32 DEF_b__h29526;
  tUInt32 DEF_b__h29525;
  tUInt32 DEF_b__h29524;
  tUInt32 DEF_b__h29523;
  tUInt32 DEF_b__h29522;
  tUInt32 DEF_b__h29521;
  tUInt32 DEF_b__h29520;
  tUInt32 DEF_b__h29519;
  tUInt32 DEF_b__h29518;
  tUInt32 DEF_b__h29517;
  tUInt32 DEF_b__h33368;
  tUInt8 DEF_x__h29472;
 
 /* Rules */
 public:
  void RL_conv_start_reg__dreg_update();
  void RL_conv_state_handle_abort();
  void RL_conv_state_fired__dreg_update();
  void RL_conv_state_every();
  void RL_conv_restart();
  void RL_conv_action_f_init_l26c9();
  void RL_conv_action_l26c38();
  void RL_conv_action_f_update_l26c9();
  void RL_conv_action_l30c16();
  void RL_conv_action_l31c18();
  void RL_conv_action_f_init_l32c9();
  void RL_conv_action_l33c17();
  void RL_conv_action_f_update_l32c9();
  void RL_conv_action_l36c12();
  void RL_conv_action_l37c13();
  void RL_conv_idle_l25c20();
  void RL_conv_fsm_start();
  void RL_init();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
 
 /* Methods */
 public:
  void METH_add_sample(tUInt32 ARG_add_sample_sample);
  tUInt8 METH_RDY_add_sample();
  tUInt32 METH_get_value();
  tUInt8 METH_RDY_get_value();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFIRfilter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkFIRfilter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkFIRfilter &backing);
};

#endif /* ifndef __mkFIRfilter_h__ */
