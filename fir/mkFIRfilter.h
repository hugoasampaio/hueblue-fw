/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri Apr 28 15:25:38 -03 2023
 * 
 */

/* Generation options: */
#ifndef __mkFIRfilter_h__
#define __mkFIRfilter_h__

#include "bluesim_types.h"
#include "bs_module.h"
#include "bluesim_primitives.h"
#include "bs_vcd.h"


/* Class declaration for the mkFIRfilter module */
class MOD_mkFIRfilter : public Module {
 
 /* Clock handles */
 private:
  tClock __clk_handle_0;
 
 /* Clock gate handles */
 public:
  tUInt8 *clk_gate[0];
 
 /* Instantiation parameters */
 public:
 
 /* Module state */
 public:
  MOD_Fifo<tUInt32> INST_acc;
  MOD_Wire<tUInt8> INST_conv_abort;
  MOD_Reg<tUInt8> INST_conv_start_reg;
  MOD_Reg<tUInt8> INST_conv_start_reg_1;
  MOD_Wire<tUInt8> INST_conv_start_reg_2;
  MOD_Wire<tUInt8> INST_conv_start_wire;
  MOD_Reg<tUInt8> INST_conv_state_can_overlap;
  MOD_Reg<tUInt8> INST_conv_state_fired;
  MOD_Wire<tUInt8> INST_conv_state_fired_1;
  MOD_ConfigReg<tUInt8> INST_conv_state_mkFSMstate;
  MOD_Wire<tUInt8> INST_conv_state_overlap_pw;
  MOD_Wire<tUInt8> INST_conv_state_set_pw;
  MOD_Reg<tUInt8> INST_n;
  MOD_Fifo<tUInt32> INST_newSample;
  MOD_Reg<tUInt32> INST_samples_0;
  MOD_Reg<tUInt32> INST_samples_1;
  MOD_Reg<tUInt32> INST_samples_10;
  MOD_Reg<tUInt32> INST_samples_11;
  MOD_Reg<tUInt32> INST_samples_12;
  MOD_Reg<tUInt32> INST_samples_13;
  MOD_Reg<tUInt32> INST_samples_14;
  MOD_Reg<tUInt32> INST_samples_15;
  MOD_Reg<tUInt32> INST_samples_16;
  MOD_Reg<tUInt32> INST_samples_17;
  MOD_Reg<tUInt32> INST_samples_18;
  MOD_Reg<tUInt32> INST_samples_19;
  MOD_Reg<tUInt32> INST_samples_2;
  MOD_Reg<tUInt32> INST_samples_20;
  MOD_Reg<tUInt32> INST_samples_21;
  MOD_Reg<tUInt32> INST_samples_22;
  MOD_Reg<tUInt32> INST_samples_23;
  MOD_Reg<tUInt32> INST_samples_24;
  MOD_Reg<tUInt32> INST_samples_25;
  MOD_Reg<tUInt32> INST_samples_26;
  MOD_Reg<tUInt32> INST_samples_27;
  MOD_Reg<tUInt32> INST_samples_28;
  MOD_Reg<tUInt32> INST_samples_29;
  MOD_Reg<tUInt32> INST_samples_3;
  MOD_Reg<tUInt32> INST_samples_30;
  MOD_Reg<tUInt32> INST_samples_31;
  MOD_Reg<tUInt32> INST_samples_32;
  MOD_Reg<tUInt32> INST_samples_33;
  MOD_Reg<tUInt32> INST_samples_34;
  MOD_Reg<tUInt32> INST_samples_35;
  MOD_Reg<tUInt32> INST_samples_36;
  MOD_Reg<tUInt32> INST_samples_37;
  MOD_Reg<tUInt32> INST_samples_38;
  MOD_Reg<tUInt32> INST_samples_39;
  MOD_Reg<tUInt32> INST_samples_4;
  MOD_Reg<tUInt32> INST_samples_40;
  MOD_Reg<tUInt32> INST_samples_41;
  MOD_Reg<tUInt32> INST_samples_42;
  MOD_Reg<tUInt32> INST_samples_5;
  MOD_Reg<tUInt32> INST_samples_6;
  MOD_Reg<tUInt32> INST_samples_7;
  MOD_Reg<tUInt32> INST_samples_8;
  MOD_Reg<tUInt32> INST_samples_9;
  MOD_Reg<tUInt32> INST_sum;
 
 /* Constructor */
 public:
  MOD_mkFIRfilter(tSimStateHdl simHdl, char const *name, Module *parent);
 
 /* Symbol init methods */
 private:
  void init_symbols_0();
 
 /* Reset signal definitions */
 private:
  tUInt8 PORT_RST_N;
 
 /* Port definitions */
 public:
 
 /* Publicly accessible definitions */
 public:
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l36c13;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l35c12;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_update_l31c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l33c16;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l32c16;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_init_l31c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l30c18;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l29c16;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_update_l25c9;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_l25c38;
  tUInt8 DEF_WILL_FIRE_RL_conv_action_f_init_l25c9;
  tUInt8 DEF_x__h36308;
 
 /* Local definitions */
 private:
  tUInt32 DEF_samples_42___d130;
  tUInt32 DEF_samples_41___d128;
  tUInt32 DEF_samples_40___d126;
  tUInt32 DEF_samples_39___d124;
  tUInt32 DEF_samples_38___d122;
  tUInt32 DEF_samples_37___d120;
  tUInt32 DEF_samples_36___d118;
  tUInt32 DEF_samples_35___d116;
  tUInt32 DEF_samples_34___d114;
  tUInt32 DEF_samples_33___d112;
  tUInt32 DEF_samples_32___d110;
  tUInt32 DEF_samples_31___d108;
  tUInt32 DEF_samples_30___d106;
  tUInt32 DEF_samples_29___d104;
  tUInt32 DEF_samples_28___d102;
  tUInt32 DEF_samples_27___d100;
  tUInt32 DEF_samples_26___d98;
  tUInt32 DEF_samples_25___d96;
  tUInt32 DEF_samples_24___d94;
  tUInt32 DEF_samples_23___d92;
  tUInt32 DEF_samples_22___d90;
  tUInt32 DEF_samples_21___d88;
  tUInt32 DEF_samples_20___d86;
  tUInt32 DEF_samples_19___d84;
  tUInt32 DEF_samples_18___d82;
  tUInt32 DEF_samples_17___d80;
  tUInt32 DEF_samples_16___d78;
  tUInt32 DEF_samples_15___d76;
  tUInt32 DEF_samples_14___d74;
  tUInt32 DEF_samples_13___d72;
  tUInt32 DEF_samples_12___d70;
  tUInt32 DEF_samples_11___d68;
  tUInt32 DEF_samples_10___d66;
  tUInt32 DEF_samples_9___d64;
  tUInt32 DEF_samples_8___d62;
  tUInt32 DEF_samples_7___d60;
  tUInt32 DEF_samples_6___d58;
  tUInt32 DEF_samples_5___d56;
  tUInt32 DEF_samples_4___d54;
  tUInt32 DEF_samples_3___d52;
  tUInt32 DEF_samples_2___d50;
  tUInt32 DEF_samples_1___d48;
  tUInt32 DEF_samples_0___d46;
  tUInt32 DEF_sum___d240;
  tUInt32 DEF_b__h35212;
  tUInt32 DEF_b__h35867;
  tUInt32 DEF_b__h31084;
  tUInt32 DEF_b__h31215;
  tUInt32 DEF_b__h31083;
  tUInt32 DEF_b__h31214;
  tUInt32 DEF_b__h31082;
  tUInt32 DEF_b__h31213;
  tUInt32 DEF_b__h31081;
  tUInt32 DEF_b__h31212;
  tUInt32 DEF_b__h31080;
  tUInt32 DEF_b__h31211;
  tUInt32 DEF_b__h31079;
  tUInt32 DEF_b__h31210;
  tUInt32 DEF_b__h31078;
  tUInt32 DEF_b__h31209;
  tUInt32 DEF_b__h31077;
  tUInt32 DEF_b__h31208;
  tUInt32 DEF_b__h31076;
  tUInt32 DEF_b__h31207;
  tUInt32 DEF_b__h31075;
  tUInt32 DEF_b__h31206;
  tUInt32 DEF_b__h31074;
  tUInt32 DEF_b__h31205;
  tUInt32 DEF_b__h31073;
  tUInt32 DEF_b__h31204;
  tUInt32 DEF_b__h31072;
  tUInt32 DEF_b__h31203;
  tUInt32 DEF_b__h31071;
  tUInt32 DEF_b__h31202;
  tUInt32 DEF_b__h31070;
  tUInt32 DEF_b__h31201;
  tUInt32 DEF_b__h31069;
  tUInt32 DEF_b__h31200;
  tUInt32 DEF_b__h31068;
  tUInt32 DEF_b__h31199;
  tUInt32 DEF_b__h31067;
  tUInt32 DEF_b__h31198;
  tUInt32 DEF_b__h31066;
  tUInt32 DEF_b__h31197;
  tUInt32 DEF_b__h31065;
  tUInt32 DEF_b__h31196;
  tUInt32 DEF_b__h31064;
  tUInt32 DEF_b__h31195;
  tUInt32 DEF_b__h31063;
  tUInt32 DEF_b__h31194;
  tUInt32 DEF_b__h31062;
  tUInt32 DEF_b__h31193;
  tUInt32 DEF_b__h31061;
  tUInt32 DEF_b__h31192;
  tUInt32 DEF_b__h31060;
  tUInt32 DEF_b__h31191;
  tUInt32 DEF_b__h31059;
  tUInt32 DEF_b__h31190;
  tUInt32 DEF_b__h31058;
  tUInt32 DEF_b__h31189;
  tUInt32 DEF_b__h31057;
  tUInt32 DEF_b__h31188;
  tUInt32 DEF_b__h31056;
  tUInt32 DEF_b__h31187;
  tUInt32 DEF_b__h31055;
  tUInt32 DEF_b__h31186;
  tUInt32 DEF_b__h31054;
  tUInt32 DEF_b__h31185;
  tUInt32 DEF_b__h31053;
  tUInt32 DEF_b__h31184;
  tUInt32 DEF_b__h31052;
  tUInt32 DEF_b__h31183;
  tUInt32 DEF_b__h31051;
  tUInt32 DEF_b__h31182;
  tUInt32 DEF_b__h31050;
  tUInt32 DEF_b__h31181;
  tUInt32 DEF_b__h31049;
  tUInt32 DEF_b__h31180;
  tUInt32 DEF_b__h31048;
  tUInt32 DEF_b__h31179;
  tUInt32 DEF_b__h31047;
  tUInt32 DEF_b__h31178;
  tUInt32 DEF_b__h31046;
  tUInt32 DEF_b__h31177;
  tUInt32 DEF_b__h31045;
  tUInt32 DEF_b__h31176;
  tUInt32 DEF_b__h31044;
  tUInt32 DEF_b__h31175;
  tUInt32 DEF_b__h31042;
  tUInt32 DEF_b__h31173;
  tUInt32 DEF_b__h31043;
  tUInt32 DEF_b__h31174;
  tUInt32 DEF_SEL_ARR_186_233_248_217_134_0_8019_7828_7652_7_ETC___d244;
  tUInt8 DEF_x__h30825;
 
 /* Rules */
 public:
  void RL_conv_start_reg__dreg_update();
  void RL_conv_state_handle_abort();
  void RL_conv_state_fired__dreg_update();
  void RL_conv_state_every();
  void RL_conv_restart();
  void RL_conv_action_f_init_l25c9();
  void RL_conv_action_l25c38();
  void RL_conv_action_f_update_l25c9();
  void RL_conv_action_l29c16();
  void RL_conv_action_l30c18();
  void RL_conv_action_f_init_l31c9();
  void RL_conv_action_l32c16();
  void RL_conv_action_l33c16();
  void RL_conv_action_f_update_l31c9();
  void RL_conv_action_l35c12();
  void RL_conv_action_l36c13();
  void RL_conv_idle_l24c20();
  void RL_conv_fsm_start();
  void RL_init();
  void __me_check_5();
  void __me_check_6();
  void __me_check_7();
  void __me_check_8();
  void __me_check_9();
  void __me_check_10();
  void __me_check_11();
  void __me_check_12();
  void __me_check_13();
  void __me_check_14();
 
 /* Methods */
 public:
  void METH_add_sample(tUInt32 ARG_add_sample_sample);
  tUInt8 METH_RDY_add_sample();
  tUInt32 METH_get_value();
  tUInt8 METH_RDY_get_value();
 
 /* Reset routines */
 public:
  void reset_RST_N(tUInt8 ARG_rst_in);
 
 /* Static handles to reset routines */
 public:
 
 /* Pointers to reset fns in parent module for asserting output resets */
 private:
 
 /* Functions for the parent module to register its reset fns */
 public:
 
 /* Functions to set the elaborated clock id */
 public:
  void set_clk_0(char const *s);
 
 /* State dumping routine */
 public:
  void dump_state(unsigned int indent);
 
 /* VCD dumping routines */
 public:
  unsigned int dump_VCD_defs(unsigned int levels);
  void dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFIRfilter &backing);
  void vcd_defs(tVCDDumpType dt, MOD_mkFIRfilter &backing);
  void vcd_prims(tVCDDumpType dt, MOD_mkFIRfilter &backing);
};

#endif /* ifndef __mkFIRfilter_h__ */
