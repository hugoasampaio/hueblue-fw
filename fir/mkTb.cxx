/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri Apr 28 15:25:38 -03 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_6("\n", 1u);
static std::string const __str_literal_1(" ", 1u);
static std::string const __str_literal_3("%d", 2u);
static std::string const __str_literal_4(",", 1u);
static std::string const __str_literal_2("<C ", 3u);
static std::string const __str_literal_5(">", 1u);
static std::string const __str_literal_7("Error: \"Tb.bsv\", line 18, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l18c18] and\n  [RL_action_l20c16, RL_action_l23c20, RL_action_l24c23, RL_action_l26c13,\n  RL_action_l30c13] ) fired in the same clock cycle.\n",
					 241u);
static std::string const __str_literal_8("Error: \"Tb.bsv\", line 20, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l20c16] and\n  [RL_action_l23c20, RL_action_l24c23, RL_action_l26c13, RL_action_l30c13] )\n  fired in the same clock cycle.\n",
					 223u);
static std::string const __str_literal_9("Error: \"Tb.bsv\", line 23, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l23c20] and\n  [RL_action_l24c23, RL_action_l26c13, RL_action_l30c13] ) fired in the same\n  clock cycle.\n",
					 205u);
static std::string const __str_literal_10("Error: \"Tb.bsv\", line 24, column 23: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l24c23] and\n  [RL_action_l26c13, RL_action_l30c13] ) fired in the same clock cycle.\n",
					  185u);
static std::string const __str_literal_11("Error: \"Tb.bsv\", line 26, column 13: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_action_l26c13] and\n  [RL_action_l30c13] ) fired in the same clock cycle.\n",
					  167u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_abort(simHdl, "abort", this, 1u, (tUInt8)0u),
    INST_fir(simHdl, "fir", this),
    INST_first(simHdl, "first", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_loop(simHdl, "loop", this, 8u, (tUInt8)0u, (tUInt8)0u),
    INST_result(simHdl, "result", this, 26u, 0u, (tUInt8)0u),
    INST_running(simHdl, "running", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg(simHdl, "start_reg", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_1(simHdl, "start_reg_1", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_start_reg_2(simHdl, "start_reg_2", this, 1u, (tUInt8)0u),
    INST_start_wire(simHdl, "start_wire", this, 1u, (tUInt8)0u),
    INST_state_can_overlap(simHdl, "state_can_overlap", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_state_fired(simHdl, "state_fired", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_state_fired_1(simHdl, "state_fired_1", this, 1u, (tUInt8)0u),
    INST_state_mkFSMstate(simHdl, "state_mkFSMstate", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state_overlap_pw(simHdl, "state_overlap_pw", this, 0u),
    INST_state_set_pw(simHdl, "state_set_pw", this, 0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 44u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "__me_check_5", SYM_RULE);
  init_symbol(&symbols[1u], "__me_check_6", SYM_RULE);
  init_symbol(&symbols[2u], "__me_check_7", SYM_RULE);
  init_symbol(&symbols[3u], "__me_check_8", SYM_RULE);
  init_symbol(&symbols[4u], "__me_check_9", SYM_RULE);
  init_symbol(&symbols[5u], "abort", SYM_MODULE, &INST_abort);
  init_symbol(&symbols[6u], "b__h6880", SYM_DEF, &DEF_b__h6880, 8u);
  init_symbol(&symbols[7u], "fir", SYM_MODULE, &INST_fir);
  init_symbol(&symbols[8u], "first", SYM_MODULE, &INST_first);
  init_symbol(&symbols[9u], "loop", SYM_MODULE, &INST_loop);
  init_symbol(&symbols[10u], "RL_action_l18c18", SYM_RULE);
  init_symbol(&symbols[11u], "RL_action_l20c16", SYM_RULE);
  init_symbol(&symbols[12u], "RL_action_l23c20", SYM_RULE);
  init_symbol(&symbols[13u], "RL_action_l24c23", SYM_RULE);
  init_symbol(&symbols[14u], "RL_action_l26c13", SYM_RULE);
  init_symbol(&symbols[15u], "RL_action_l30c13", SYM_RULE);
  init_symbol(&symbols[16u], "RL_auto_finish", SYM_RULE);
  init_symbol(&symbols[17u], "RL_auto_start", SYM_RULE);
  init_symbol(&symbols[18u], "RL_fsm_start", SYM_RULE);
  init_symbol(&symbols[19u], "RL_idle_l17c9", SYM_RULE);
  init_symbol(&symbols[20u], "RL_idle_l17c9_1", SYM_RULE);
  init_symbol(&symbols[21u], "RL_restart", SYM_RULE);
  init_symbol(&symbols[22u], "RL_start_reg__dreg_update", SYM_RULE);
  init_symbol(&symbols[23u], "RL_state_every", SYM_RULE);
  init_symbol(&symbols[24u], "RL_state_fired__dreg_update", SYM_RULE);
  init_symbol(&symbols[25u], "RL_state_handle_abort", SYM_RULE);
  init_symbol(&symbols[26u], "result", SYM_MODULE, &INST_result);
  init_symbol(&symbols[27u], "running", SYM_MODULE, &INST_running);
  init_symbol(&symbols[28u], "start_reg", SYM_MODULE, &INST_start_reg);
  init_symbol(&symbols[29u], "start_reg_1", SYM_MODULE, &INST_start_reg_1);
  init_symbol(&symbols[30u], "start_reg_2", SYM_MODULE, &INST_start_reg_2);
  init_symbol(&symbols[31u], "start_wire", SYM_MODULE, &INST_start_wire);
  init_symbol(&symbols[32u], "state_can_overlap", SYM_MODULE, &INST_state_can_overlap);
  init_symbol(&symbols[33u], "state_fired", SYM_MODULE, &INST_state_fired);
  init_symbol(&symbols[34u], "state_fired_1", SYM_MODULE, &INST_state_fired_1);
  init_symbol(&symbols[35u], "state_mkFSMstate", SYM_MODULE, &INST_state_mkFSMstate);
  init_symbol(&symbols[36u], "state_overlap_pw", SYM_MODULE, &INST_state_overlap_pw);
  init_symbol(&symbols[37u], "state_set_pw", SYM_MODULE, &INST_state_set_pw);
  init_symbol(&symbols[38u],
	      "WILL_FIRE_RL_action_l18c18",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l18c18,
	      1u);
  init_symbol(&symbols[39u],
	      "WILL_FIRE_RL_action_l20c16",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l20c16,
	      1u);
  init_symbol(&symbols[40u],
	      "WILL_FIRE_RL_action_l23c20",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l23c20,
	      1u);
  init_symbol(&symbols[41u],
	      "WILL_FIRE_RL_action_l24c23",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l24c23,
	      1u);
  init_symbol(&symbols[42u],
	      "WILL_FIRE_RL_action_l26c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l26c13,
	      1u);
  init_symbol(&symbols[43u],
	      "WILL_FIRE_RL_action_l30c13",
	      SYM_DEF,
	      &DEF_WILL_FIRE_RL_action_l30c13,
	      1u);
}


/* Rule actions */

void MOD_mkTb::RL_start_reg__dreg_update()
{
  tUInt8 DEF_start_reg_2_whas_AND_start_reg_2_wget___d3;
  DEF_start_reg_2_whas_AND_start_reg_2_wget___d3 = INST_start_reg_2.METH_whas() && INST_start_reg_2.METH_wget();
  INST_start_reg_1.METH_write(DEF_start_reg_2_whas_AND_start_reg_2_wget___d3);
}

void MOD_mkTb::RL_state_handle_abort()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_state_fired__dreg_update()
{
  tUInt8 DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15;
  DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15 = INST_state_fired_1.METH_whas() && INST_state_fired_1.METH_wget();
  INST_state_fired.METH_write(DEF_state_fired_1_whas__3_AND_state_fired_1_wget__4___d15);
}

void MOD_mkTb::RL_state_every()
{
  tUInt8 DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21;
  tUInt8 DEF_state_can_overlap__h2838;
  DEF_state_can_overlap__h2838 = INST_state_can_overlap.METH_read();
  DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21 = INST_state_set_pw.METH_whas() || (!INST_state_overlap_pw.METH_whas() && DEF_state_can_overlap__h2838);
  INST_state_can_overlap.METH_write(DEF_state_set_pw_whas__6_OR_NOT_state_overlap_pw_w_ETC___d21);
}

void MOD_mkTb::RL_restart()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
}

void MOD_mkTb::RL_action_l18c18()
{
  tUInt8 DEF_loop_2_PLUS_1___d44;
  DEF_b__h6880 = INST_loop.METH_read();
  DEF_loop_2_PLUS_1___d44 = (tUInt8)255u & (DEF_b__h6880 + (tUInt8)1u);
  INST_state_mkFSMstate.METH_write((tUInt8)1u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_loop.METH_write(DEF_loop_2_PLUS_1___d44);
}

void MOD_mkTb::RL_action_l20c16()
{
  INST_state_mkFSMstate.METH_write((tUInt8)2u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_fir.METH_add_sample(0u);
}

void MOD_mkTb::RL_action_l23c20()
{
  INST_state_mkFSMstate.METH_write((tUInt8)3u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_fir.METH_add_sample(16383u);
}

void MOD_mkTb::RL_action_l24c23()
{
  INST_state_mkFSMstate.METH_write((tUInt8)4u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  INST_first.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_action_l26c13()
{
  tUInt32 DEF_fir_get_value___d67;
  tUInt32 DEF_AVMeth_fir_get_value;
  INST_state_mkFSMstate.METH_write((tUInt8)5u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  DEF_AVMeth_fir_get_value = INST_fir.METH_get_value();
  DEF_fir_get_value___d67 = DEF_AVMeth_fir_get_value;
  INST_result.METH_write(DEF_fir_get_value___d67);
}

void MOD_mkTb::RL_action_l30c13()
{
  tUInt32 DEF_result___d70;
  tUInt32 DEF_x__h23169;
  tUInt32 DEF_signed_result_0_BITS_12_TO_0_3___d74;
  tUInt32 DEF_x__h23157;
  tUInt32 DEF_signed_result_0_BITS_25_TO_13_1___d72;
  DEF_result___d70 = INST_result.METH_read();
  DEF_x__h23157 = (tUInt32)(DEF_result___d70 >> 13u);
  DEF_signed_result_0_BITS_25_TO_13_1___d72 = DEF_x__h23157;
  DEF_x__h23169 = (tUInt32)(8191u & DEF_result___d70);
  DEF_signed_result_0_BITS_12_TO_0_3___d74 = DEF_x__h23169;
  INST_state_mkFSMstate.METH_write((tUInt8)6u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl, this, "s", &__str_literal_1);
    dollar_write(sim_hdl, this, "s", &__str_literal_2);
    dollar_write(sim_hdl, this, "s,-13", &__str_literal_3, DEF_signed_result_0_BITS_25_TO_13_1___d72);
    dollar_write(sim_hdl, this, "s", &__str_literal_4);
    dollar_write(sim_hdl,
		 this,
		 "s,-13,s",
		 &__str_literal_3,
		 DEF_signed_result_0_BITS_12_TO_0_3___d74,
		 &__str_literal_5);
    dollar_write(sim_hdl, this, "s", &__str_literal_6);
  }
}

void MOD_mkTb::RL_idle_l17c9()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTb::RL_idle_l17c9_1()
{
  INST_state_mkFSMstate.METH_write((tUInt8)0u);
  INST_state_fired_1.METH_wset((tUInt8)1u);
  INST_state_set_pw.METH_wset();
}

void MOD_mkTb::RL_fsm_start()
{
  INST_start_wire.METH_wset((tUInt8)1u);
  INST_start_reg_2.METH_wset((tUInt8)1u);
  INST_start_reg.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_auto_start()
{
  INST_start_reg.METH_write((tUInt8)1u);
  INST_running.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_auto_finish()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}

void MOD_mkTb::__me_check_5()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l18c18 && ((((DEF_WILL_FIRE_RL_action_l20c16 || DEF_WILL_FIRE_RL_action_l23c20) || DEF_WILL_FIRE_RL_action_l24c23) || DEF_WILL_FIRE_RL_action_l26c13) || DEF_WILL_FIRE_RL_action_l30c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_7);
}

void MOD_mkTb::__me_check_6()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l20c16 && (((DEF_WILL_FIRE_RL_action_l23c20 || DEF_WILL_FIRE_RL_action_l24c23) || DEF_WILL_FIRE_RL_action_l26c13) || DEF_WILL_FIRE_RL_action_l30c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_8);
}

void MOD_mkTb::__me_check_7()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l23c20 && ((DEF_WILL_FIRE_RL_action_l24c23 || DEF_WILL_FIRE_RL_action_l26c13) || DEF_WILL_FIRE_RL_action_l30c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_9);
}

void MOD_mkTb::__me_check_8()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l24c23 && (DEF_WILL_FIRE_RL_action_l26c13 || DEF_WILL_FIRE_RL_action_l30c13))
      dollar_error(sim_hdl, this, "s", &__str_literal_10);
}

void MOD_mkTb::__me_check_9()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_WILL_FIRE_RL_action_l26c13 && DEF_WILL_FIRE_RL_action_l30c13)
      dollar_error(sim_hdl, this, "s", &__str_literal_11);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_state_mkFSMstate.reset_RST(ARG_rst_in);
  INST_state_fired.reset_RST(ARG_rst_in);
  INST_state_can_overlap.reset_RST(ARG_rst_in);
  INST_start_reg_1.reset_RST(ARG_rst_in);
  INST_start_reg.reset_RST(ARG_rst_in);
  INST_running.reset_RST(ARG_rst_in);
  INST_result.reset_RST(ARG_rst_in);
  INST_loop.reset_RST(ARG_rst_in);
  INST_first.reset_RST(ARG_rst_in);
  INST_fir.reset_RST_N(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_abort.dump_state(indent + 2u);
  INST_fir.dump_state(indent + 2u);
  INST_first.dump_state(indent + 2u);
  INST_loop.dump_state(indent + 2u);
  INST_result.dump_state(indent + 2u);
  INST_running.dump_state(indent + 2u);
  INST_start_reg.dump_state(indent + 2u);
  INST_start_reg_1.dump_state(indent + 2u);
  INST_start_reg_2.dump_state(indent + 2u);
  INST_start_wire.dump_state(indent + 2u);
  INST_state_can_overlap.dump_state(indent + 2u);
  INST_state_fired.dump_state(indent + 2u);
  INST_state_fired_1.dump_state(indent + 2u);
  INST_state_mkFSMstate.dump_state(indent + 2u);
  INST_state_overlap_pw.dump_state(indent + 2u);
  INST_state_set_pw.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 23u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l18c18", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l20c16", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l23c20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l24c23", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l26c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "WILL_FIRE_RL_action_l30c13", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h6880", 8u);
  num = INST_abort.dump_VCD_defs(num);
  num = INST_first.dump_VCD_defs(num);
  num = INST_loop.dump_VCD_defs(num);
  num = INST_result.dump_VCD_defs(num);
  num = INST_running.dump_VCD_defs(num);
  num = INST_start_reg.dump_VCD_defs(num);
  num = INST_start_reg_1.dump_VCD_defs(num);
  num = INST_start_reg_2.dump_VCD_defs(num);
  num = INST_start_wire.dump_VCD_defs(num);
  num = INST_state_can_overlap.dump_VCD_defs(num);
  num = INST_state_fired.dump_VCD_defs(num);
  num = INST_state_fired_1.dump_VCD_defs(num);
  num = INST_state_mkFSMstate.dump_VCD_defs(num);
  num = INST_state_overlap_pw.dump_VCD_defs(num);
  num = INST_state_set_pw.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_fir.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 8u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l18c18) != DEF_WILL_FIRE_RL_action_l18c18)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l18c18, 1u);
	backing.DEF_WILL_FIRE_RL_action_l18c18 = DEF_WILL_FIRE_RL_action_l18c18;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l20c16) != DEF_WILL_FIRE_RL_action_l20c16)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l20c16, 1u);
	backing.DEF_WILL_FIRE_RL_action_l20c16 = DEF_WILL_FIRE_RL_action_l20c16;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l23c20) != DEF_WILL_FIRE_RL_action_l23c20)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l23c20, 1u);
	backing.DEF_WILL_FIRE_RL_action_l23c20 = DEF_WILL_FIRE_RL_action_l23c20;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l24c23) != DEF_WILL_FIRE_RL_action_l24c23)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l24c23, 1u);
	backing.DEF_WILL_FIRE_RL_action_l24c23 = DEF_WILL_FIRE_RL_action_l24c23;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l26c13) != DEF_WILL_FIRE_RL_action_l26c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l26c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l26c13 = DEF_WILL_FIRE_RL_action_l26c13;
      }
      ++num;
      if ((backing.DEF_WILL_FIRE_RL_action_l30c13) != DEF_WILL_FIRE_RL_action_l30c13)
      {
	vcd_write_val(sim_hdl, num, DEF_WILL_FIRE_RL_action_l30c13, 1u);
	backing.DEF_WILL_FIRE_RL_action_l30c13 = DEF_WILL_FIRE_RL_action_l30c13;
      }
      ++num;
      if ((backing.DEF_b__h6880) != DEF_b__h6880)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h6880, 8u);
	backing.DEF_b__h6880 = DEF_b__h6880;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l18c18, 1u);
      backing.DEF_WILL_FIRE_RL_action_l18c18 = DEF_WILL_FIRE_RL_action_l18c18;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l20c16, 1u);
      backing.DEF_WILL_FIRE_RL_action_l20c16 = DEF_WILL_FIRE_RL_action_l20c16;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l23c20, 1u);
      backing.DEF_WILL_FIRE_RL_action_l23c20 = DEF_WILL_FIRE_RL_action_l23c20;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l24c23, 1u);
      backing.DEF_WILL_FIRE_RL_action_l24c23 = DEF_WILL_FIRE_RL_action_l24c23;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l26c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l26c13 = DEF_WILL_FIRE_RL_action_l26c13;
      vcd_write_val(sim_hdl, num++, DEF_WILL_FIRE_RL_action_l30c13, 1u);
      backing.DEF_WILL_FIRE_RL_action_l30c13 = DEF_WILL_FIRE_RL_action_l30c13;
      vcd_write_val(sim_hdl, num++, DEF_b__h6880, 8u);
      backing.DEF_b__h6880 = DEF_b__h6880;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_abort.dump_VCD(dt, backing.INST_abort);
  INST_first.dump_VCD(dt, backing.INST_first);
  INST_loop.dump_VCD(dt, backing.INST_loop);
  INST_result.dump_VCD(dt, backing.INST_result);
  INST_running.dump_VCD(dt, backing.INST_running);
  INST_start_reg.dump_VCD(dt, backing.INST_start_reg);
  INST_start_reg_1.dump_VCD(dt, backing.INST_start_reg_1);
  INST_start_reg_2.dump_VCD(dt, backing.INST_start_reg_2);
  INST_start_wire.dump_VCD(dt, backing.INST_start_wire);
  INST_state_can_overlap.dump_VCD(dt, backing.INST_state_can_overlap);
  INST_state_fired.dump_VCD(dt, backing.INST_state_fired);
  INST_state_fired_1.dump_VCD(dt, backing.INST_state_fired_1);
  INST_state_mkFSMstate.dump_VCD(dt, backing.INST_state_mkFSMstate);
  INST_state_overlap_pw.dump_VCD(dt, backing.INST_state_overlap_pw);
  INST_state_set_pw.dump_VCD(dt, backing.INST_state_set_pw);
}

void MOD_mkTb::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  INST_fir.dump_VCD(dt, levels, backing.INST_fir);
}
