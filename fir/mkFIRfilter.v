//
// Generated by Bluespec Compiler, version 2021.07 (build 4cac6eb)
//
// On Tue Feb  1 06:19:46 -03 2022
//
//
// Ports:
// Name                         I/O  size props
// RDY_add_sample                 O     1 reg
// get_value                      O    32 reg
// RDY_get_value                  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// add_sample_sample              I    13 reg
// EN_add_sample                  I     1
// EN_get_value                   I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFIRfilter(CLK,
		   RST_N,

		   add_sample_sample,
		   EN_add_sample,
		   RDY_add_sample,

		   EN_get_value,
		   get_value,
		   RDY_get_value);
  input  CLK;
  input  RST_N;

  // action method add_sample
  input  [12 : 0] add_sample_sample;
  input  EN_add_sample;
  output RDY_add_sample;

  // actionvalue method get_value
  input  EN_get_value;
  output [31 : 0] get_value;
  output RDY_get_value;

  // signals for module outputs
  wire [31 : 0] get_value;
  wire RDY_add_sample, RDY_get_value;

  // inlined wires
  wire conv_start_wire$whas, conv_state_set_pw$whas;

  // register conv_start_reg
  reg conv_start_reg;
  wire conv_start_reg$D_IN, conv_start_reg$EN;

  // register conv_start_reg_1
  reg conv_start_reg_1;
  wire conv_start_reg_1$D_IN, conv_start_reg_1$EN;

  // register conv_state_can_overlap
  reg conv_state_can_overlap;
  wire conv_state_can_overlap$D_IN, conv_state_can_overlap$EN;

  // register conv_state_fired
  reg conv_state_fired;
  wire conv_state_fired$D_IN, conv_state_fired$EN;

  // register conv_state_mkFSMstate
  reg [3 : 0] conv_state_mkFSMstate;
  reg [3 : 0] conv_state_mkFSMstate$D_IN;
  wire conv_state_mkFSMstate$EN;

  // register n
  reg [6 : 0] n;
  wire [6 : 0] n$D_IN;
  wire n$EN;

  // register samples_0
  reg [12 : 0] samples_0;
  wire [12 : 0] samples_0$D_IN;
  wire samples_0$EN;

  // register samples_1
  reg [12 : 0] samples_1;
  wire [12 : 0] samples_1$D_IN;
  wire samples_1$EN;

  // register samples_10
  reg [12 : 0] samples_10;
  wire [12 : 0] samples_10$D_IN;
  wire samples_10$EN;

  // register samples_11
  reg [12 : 0] samples_11;
  wire [12 : 0] samples_11$D_IN;
  wire samples_11$EN;

  // register samples_12
  reg [12 : 0] samples_12;
  wire [12 : 0] samples_12$D_IN;
  wire samples_12$EN;

  // register samples_13
  reg [12 : 0] samples_13;
  wire [12 : 0] samples_13$D_IN;
  wire samples_13$EN;

  // register samples_14
  reg [12 : 0] samples_14;
  wire [12 : 0] samples_14$D_IN;
  wire samples_14$EN;

  // register samples_15
  reg [12 : 0] samples_15;
  wire [12 : 0] samples_15$D_IN;
  wire samples_15$EN;

  // register samples_16
  reg [12 : 0] samples_16;
  wire [12 : 0] samples_16$D_IN;
  wire samples_16$EN;

  // register samples_17
  reg [12 : 0] samples_17;
  wire [12 : 0] samples_17$D_IN;
  wire samples_17$EN;

  // register samples_18
  reg [12 : 0] samples_18;
  wire [12 : 0] samples_18$D_IN;
  wire samples_18$EN;

  // register samples_19
  reg [12 : 0] samples_19;
  wire [12 : 0] samples_19$D_IN;
  wire samples_19$EN;

  // register samples_2
  reg [12 : 0] samples_2;
  wire [12 : 0] samples_2$D_IN;
  wire samples_2$EN;

  // register samples_20
  reg [12 : 0] samples_20;
  wire [12 : 0] samples_20$D_IN;
  wire samples_20$EN;

  // register samples_21
  reg [12 : 0] samples_21;
  wire [12 : 0] samples_21$D_IN;
  wire samples_21$EN;

  // register samples_22
  reg [12 : 0] samples_22;
  wire [12 : 0] samples_22$D_IN;
  wire samples_22$EN;

  // register samples_23
  reg [12 : 0] samples_23;
  wire [12 : 0] samples_23$D_IN;
  wire samples_23$EN;

  // register samples_24
  reg [12 : 0] samples_24;
  wire [12 : 0] samples_24$D_IN;
  wire samples_24$EN;

  // register samples_25
  reg [12 : 0] samples_25;
  wire [12 : 0] samples_25$D_IN;
  wire samples_25$EN;

  // register samples_26
  reg [12 : 0] samples_26;
  wire [12 : 0] samples_26$D_IN;
  wire samples_26$EN;

  // register samples_27
  reg [12 : 0] samples_27;
  wire [12 : 0] samples_27$D_IN;
  wire samples_27$EN;

  // register samples_28
  reg [12 : 0] samples_28;
  wire [12 : 0] samples_28$D_IN;
  wire samples_28$EN;

  // register samples_29
  reg [12 : 0] samples_29;
  wire [12 : 0] samples_29$D_IN;
  wire samples_29$EN;

  // register samples_3
  reg [12 : 0] samples_3;
  wire [12 : 0] samples_3$D_IN;
  wire samples_3$EN;

  // register samples_30
  reg [12 : 0] samples_30;
  wire [12 : 0] samples_30$D_IN;
  wire samples_30$EN;

  // register samples_31
  reg [12 : 0] samples_31;
  wire [12 : 0] samples_31$D_IN;
  wire samples_31$EN;

  // register samples_32
  reg [12 : 0] samples_32;
  wire [12 : 0] samples_32$D_IN;
  wire samples_32$EN;

  // register samples_33
  reg [12 : 0] samples_33;
  wire [12 : 0] samples_33$D_IN;
  wire samples_33$EN;

  // register samples_34
  reg [12 : 0] samples_34;
  wire [12 : 0] samples_34$D_IN;
  wire samples_34$EN;

  // register samples_35
  reg [12 : 0] samples_35;
  wire [12 : 0] samples_35$D_IN;
  wire samples_35$EN;

  // register samples_36
  reg [12 : 0] samples_36;
  wire [12 : 0] samples_36$D_IN;
  wire samples_36$EN;

  // register samples_37
  reg [12 : 0] samples_37;
  wire [12 : 0] samples_37$D_IN;
  wire samples_37$EN;

  // register samples_38
  reg [12 : 0] samples_38;
  wire [12 : 0] samples_38$D_IN;
  wire samples_38$EN;

  // register samples_39
  reg [12 : 0] samples_39;
  wire [12 : 0] samples_39$D_IN;
  wire samples_39$EN;

  // register samples_4
  reg [12 : 0] samples_4;
  wire [12 : 0] samples_4$D_IN;
  wire samples_4$EN;

  // register samples_40
  reg [12 : 0] samples_40;
  wire [12 : 0] samples_40$D_IN;
  wire samples_40$EN;

  // register samples_41
  reg [12 : 0] samples_41;
  wire [12 : 0] samples_41$D_IN;
  wire samples_41$EN;

  // register samples_42
  reg [12 : 0] samples_42;
  wire [12 : 0] samples_42$D_IN;
  wire samples_42$EN;

  // register samples_5
  reg [12 : 0] samples_5;
  wire [12 : 0] samples_5$D_IN;
  wire samples_5$EN;

  // register samples_6
  reg [12 : 0] samples_6;
  wire [12 : 0] samples_6$D_IN;
  wire samples_6$EN;

  // register samples_7
  reg [12 : 0] samples_7;
  wire [12 : 0] samples_7$D_IN;
  wire samples_7$EN;

  // register samples_8
  reg [12 : 0] samples_8;
  wire [12 : 0] samples_8$D_IN;
  wire samples_8$EN;

  // register samples_9
  reg [12 : 0] samples_9;
  wire [12 : 0] samples_9$D_IN;
  wire samples_9$EN;

  // register sum
  reg [31 : 0] sum;
  wire [31 : 0] sum$D_IN;
  wire sum$EN;

  // ports of submodule acc
  wire [31 : 0] acc$D_IN, acc$D_OUT;
  wire acc$CLR, acc$DEQ, acc$EMPTY_N, acc$ENQ, acc$FULL_N;

  // ports of submodule newSample
  wire [12 : 0] newSample$D_IN, newSample$D_OUT;
  wire newSample$CLR,
       newSample$DEQ,
       newSample$EMPTY_N,
       newSample$ENQ,
       newSample$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_conv_action_f_init_l25c9,
       WILL_FIRE_RL_conv_action_l26c20,
       WILL_FIRE_RL_conv_action_l29c16,
       WILL_FIRE_RL_conv_action_l30c18,
       WILL_FIRE_RL_conv_action_l32c17,
       WILL_FIRE_RL_conv_action_l34c12,
       WILL_FIRE_RL_conv_fsm_start,
       WILL_FIRE_RL_conv_idle_l24c20;

  // inputs to muxes for submodule ports
  wire MUX_n$write_1__SEL_1, MUX_samples_0$write_1__SEL_1;

  // remaining internal signals
  reg [12 : 0] CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1,
	       SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90;
  wire [63 : 0] SEXT_SEL_ARR_samples_0_6_samples_1_7_samples_2_ETC___d155;
  wire [6 : 0] x__h26804;
  wire conv_abort_whas_AND_conv_abort_wget_OR_conv_st_ETC___d167,
       n_7_SLT_42___d38;

  // action method add_sample
  assign RDY_add_sample = newSample$FULL_N ;

  // actionvalue method get_value
  assign get_value = acc$D_OUT ;
  assign RDY_get_value = acc$EMPTY_N ;

  // submodule acc
  FIFO2 #(.width(32'd32), .guarded(1'd1)) acc(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(acc$D_IN),
					      .ENQ(acc$ENQ),
					      .DEQ(acc$DEQ),
					      .CLR(acc$CLR),
					      .D_OUT(acc$D_OUT),
					      .FULL_N(acc$FULL_N),
					      .EMPTY_N(acc$EMPTY_N));

  // submodule newSample
  FIFO2 #(.width(32'd13), .guarded(1'd1)) newSample(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(newSample$D_IN),
						    .ENQ(newSample$ENQ),
						    .DEQ(newSample$DEQ),
						    .CLR(newSample$CLR),
						    .D_OUT(newSample$D_OUT),
						    .FULL_N(newSample$FULL_N),
						    .EMPTY_N(newSample$EMPTY_N));

  // rule RL_conv_action_l26c20
  assign WILL_FIRE_RL_conv_action_l26c20 =
	     n_7_SLT_42___d38 &&
	     (conv_state_mkFSMstate == 4'd1 ||
	      conv_state_mkFSMstate == 4'd3) ;

  // rule RL_conv_action_l29c16
  assign WILL_FIRE_RL_conv_action_l29c16 =
	     newSample$EMPTY_N && !n_7_SLT_42___d38 &&
	     (conv_state_mkFSMstate == 4'd1 ||
	      conv_state_mkFSMstate == 4'd3) ;

  // rule RL_conv_action_l30c18
  assign WILL_FIRE_RL_conv_action_l30c18 =
	     newSample$EMPTY_N && conv_state_mkFSMstate == 4'd4 ;

  // rule RL_conv_action_l32c17
  assign WILL_FIRE_RL_conv_action_l32c17 =
	     n_7_SLT_42___d38 &&
	     (conv_state_mkFSMstate == 4'd6 ||
	      conv_state_mkFSMstate == 4'd8) ;

  // rule RL_conv_action_l34c12
  assign WILL_FIRE_RL_conv_action_l34c12 =
	     acc$FULL_N && !n_7_SLT_42___d38 &&
	     (conv_state_mkFSMstate == 4'd6 ||
	      conv_state_mkFSMstate == 4'd8) ;

  // rule RL_conv_fsm_start
  assign WILL_FIRE_RL_conv_fsm_start =
	     conv_abort_whas_AND_conv_abort_wget_OR_conv_st_ETC___d167 &&
	     conv_start_reg ;

  // rule RL_conv_action_f_init_l25c9
  assign WILL_FIRE_RL_conv_action_f_init_l25c9 =
	     conv_start_wire$whas &&
	     (conv_state_mkFSMstate == 4'd0 ||
	      conv_state_mkFSMstate == 4'd9) ;

  // rule RL_conv_idle_l24c20
  assign WILL_FIRE_RL_conv_idle_l24c20 =
	     !conv_start_wire$whas && conv_state_mkFSMstate == 4'd9 ;

  // inputs to muxes for submodule ports
  assign MUX_n$write_1__SEL_1 =
	     conv_state_mkFSMstate == 4'd7 || conv_state_mkFSMstate == 4'd2 ;
  assign MUX_samples_0$write_1__SEL_1 =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd0 ;

  // inlined wires
  assign conv_start_wire$whas =
	     WILL_FIRE_RL_conv_fsm_start ||
	     conv_start_reg_1 && !conv_state_fired ;
  assign conv_state_set_pw$whas =
	     WILL_FIRE_RL_conv_idle_l24c20 ||
	     WILL_FIRE_RL_conv_action_l34c12 ||
	     conv_state_mkFSMstate == 4'd7 ||
	     WILL_FIRE_RL_conv_action_l32c17 ||
	     conv_state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_conv_action_l30c18 ||
	     WILL_FIRE_RL_conv_action_l29c16 ||
	     conv_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_conv_action_l26c20 ||
	     WILL_FIRE_RL_conv_action_f_init_l25c9 ;

  // register conv_start_reg
  assign conv_start_reg$D_IN = !WILL_FIRE_RL_conv_fsm_start ;
  assign conv_start_reg$EN =
	     WILL_FIRE_RL_conv_fsm_start ||
	     conv_abort_whas_AND_conv_abort_wget_OR_conv_st_ETC___d167 &&
	     !conv_start_reg ;

  // register conv_start_reg_1
  assign conv_start_reg_1$D_IN = conv_start_wire$whas ;
  assign conv_start_reg_1$EN = 1'd1 ;

  // register conv_state_can_overlap
  assign conv_state_can_overlap$D_IN =
	     conv_state_set_pw$whas || conv_state_can_overlap ;
  assign conv_state_can_overlap$EN = 1'd1 ;

  // register conv_state_fired
  assign conv_state_fired$D_IN = conv_state_set_pw$whas ;
  assign conv_state_fired$EN = 1'd1 ;

  // register conv_state_mkFSMstate
  always@(WILL_FIRE_RL_conv_idle_l24c20 or
	  WILL_FIRE_RL_conv_action_f_init_l25c9 or
	  WILL_FIRE_RL_conv_action_l26c20 or
	  conv_state_mkFSMstate or
	  WILL_FIRE_RL_conv_action_l29c16 or
	  WILL_FIRE_RL_conv_action_l30c18 or
	  WILL_FIRE_RL_conv_action_l32c17 or WILL_FIRE_RL_conv_action_l34c12)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_conv_idle_l24c20: conv_state_mkFSMstate$D_IN = 4'd0;
      WILL_FIRE_RL_conv_action_f_init_l25c9:
	  conv_state_mkFSMstate$D_IN = 4'd1;
      WILL_FIRE_RL_conv_action_l26c20: conv_state_mkFSMstate$D_IN = 4'd2;
      conv_state_mkFSMstate == 4'd2: conv_state_mkFSMstate$D_IN = 4'd3;
      WILL_FIRE_RL_conv_action_l29c16: conv_state_mkFSMstate$D_IN = 4'd4;
      WILL_FIRE_RL_conv_action_l30c18: conv_state_mkFSMstate$D_IN = 4'd5;
      conv_state_mkFSMstate == 4'd5: conv_state_mkFSMstate$D_IN = 4'd6;
      WILL_FIRE_RL_conv_action_l32c17: conv_state_mkFSMstate$D_IN = 4'd7;
      conv_state_mkFSMstate == 4'd7: conv_state_mkFSMstate$D_IN = 4'd8;
      WILL_FIRE_RL_conv_action_l34c12: conv_state_mkFSMstate$D_IN = 4'd9;
      default: conv_state_mkFSMstate$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign conv_state_mkFSMstate$EN =
	     WILL_FIRE_RL_conv_idle_l24c20 ||
	     WILL_FIRE_RL_conv_action_f_init_l25c9 ||
	     WILL_FIRE_RL_conv_action_l26c20 ||
	     conv_state_mkFSMstate == 4'd2 ||
	     WILL_FIRE_RL_conv_action_l29c16 ||
	     WILL_FIRE_RL_conv_action_l30c18 ||
	     conv_state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_conv_action_l32c17 ||
	     conv_state_mkFSMstate == 4'd7 ||
	     WILL_FIRE_RL_conv_action_l34c12 ;

  // register n
  assign n$D_IN = MUX_n$write_1__SEL_1 ? x__h26804 : 7'd0 ;
  assign n$EN =
	     conv_state_mkFSMstate == 4'd7 || conv_state_mkFSMstate == 4'd2 ||
	     conv_state_mkFSMstate == 4'd5 ||
	     WILL_FIRE_RL_conv_action_f_init_l25c9 ;

  // register samples_0
  assign samples_0$D_IN =
	     MUX_samples_0$write_1__SEL_1 ?
	       SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 :
	       newSample$D_OUT ;
  assign samples_0$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd0 ||
	     WILL_FIRE_RL_conv_action_l29c16 ;

  // register samples_1
  assign samples_1$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_1$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd1 ;

  // register samples_10
  assign samples_10$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_10$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd10 ;

  // register samples_11
  assign samples_11$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_11$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd11 ;

  // register samples_12
  assign samples_12$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_12$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd12 ;

  // register samples_13
  assign samples_13$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_13$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd13 ;

  // register samples_14
  assign samples_14$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_14$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd14 ;

  // register samples_15
  assign samples_15$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_15$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd15 ;

  // register samples_16
  assign samples_16$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_16$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd16 ;

  // register samples_17
  assign samples_17$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_17$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd17 ;

  // register samples_18
  assign samples_18$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_18$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd18 ;

  // register samples_19
  assign samples_19$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_19$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd19 ;

  // register samples_2
  assign samples_2$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_2$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd2 ;

  // register samples_20
  assign samples_20$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_20$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd20 ;

  // register samples_21
  assign samples_21$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_21$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd21 ;

  // register samples_22
  assign samples_22$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_22$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd22 ;

  // register samples_23
  assign samples_23$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_23$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd23 ;

  // register samples_24
  assign samples_24$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_24$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd24 ;

  // register samples_25
  assign samples_25$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_25$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd25 ;

  // register samples_26
  assign samples_26$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_26$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd26 ;

  // register samples_27
  assign samples_27$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_27$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd27 ;

  // register samples_28
  assign samples_28$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_28$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd28 ;

  // register samples_29
  assign samples_29$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_29$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd29 ;

  // register samples_3
  assign samples_3$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_3$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd3 ;

  // register samples_30
  assign samples_30$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_30$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd30 ;

  // register samples_31
  assign samples_31$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_31$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd31 ;

  // register samples_32
  assign samples_32$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_32$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd32 ;

  // register samples_33
  assign samples_33$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_33$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd33 ;

  // register samples_34
  assign samples_34$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_34$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd34 ;

  // register samples_35
  assign samples_35$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_35$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd35 ;

  // register samples_36
  assign samples_36$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_36$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd36 ;

  // register samples_37
  assign samples_37$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_37$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd37 ;

  // register samples_38
  assign samples_38$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_38$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd38 ;

  // register samples_39
  assign samples_39$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_39$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd39 ;

  // register samples_4
  assign samples_4$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_4$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd4 ;

  // register samples_40
  assign samples_40$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_40$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd40 ;

  // register samples_41
  assign samples_41$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_41$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd41 ;

  // register samples_42
  assign samples_42$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_42$EN =
	     WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd42 ;

  // register samples_5
  assign samples_5$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_5$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd5 ;

  // register samples_6
  assign samples_6$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_6$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd6 ;

  // register samples_7
  assign samples_7$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_7$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd7 ;

  // register samples_8
  assign samples_8$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_8$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd8 ;

  // register samples_9
  assign samples_9$D_IN =
	     SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 ;
  assign samples_9$EN = WILL_FIRE_RL_conv_action_l26c20 && x__h26804 == 7'd9 ;

  // register sum
  assign sum$D_IN =
	     sum +
	     SEXT_SEL_ARR_samples_0_6_samples_1_7_samples_2_ETC___d155[31:0] ;
  assign sum$EN = WILL_FIRE_RL_conv_action_l32c17 ;

  // submodule acc
  assign acc$D_IN = sum ;
  assign acc$ENQ = WILL_FIRE_RL_conv_action_l34c12 ;
  assign acc$DEQ = EN_get_value ;
  assign acc$CLR = 1'b0 ;

  // submodule newSample
  assign newSample$D_IN = add_sample_sample ;
  assign newSample$ENQ = EN_add_sample ;
  assign newSample$DEQ = WILL_FIRE_RL_conv_action_l30c18 ;
  assign newSample$CLR = 1'b0 ;

  // remaining internal signals
  assign SEXT_SEL_ARR_samples_0_6_samples_1_7_samples_2_ETC___d155 =
	     { {19{SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90[12]}},
	       SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 } *
	     { {19{CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1[12]}},
	       CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 } ;
  assign conv_abort_whas_AND_conv_abort_wget_OR_conv_st_ETC___d167 =
	     (conv_state_mkFSMstate == 4'd0 ||
	      conv_state_mkFSMstate == 4'd9) &&
	     (!conv_start_reg_1 || conv_state_fired) ;
  assign n_7_SLT_42___d38 = (n ^ 7'h40) < 7'd106 ;
  assign x__h26804 = n + 7'd1 ;
  always@(n or
	  samples_0 or
	  samples_1 or
	  samples_2 or
	  samples_3 or
	  samples_4 or
	  samples_5 or
	  samples_6 or
	  samples_7 or
	  samples_8 or
	  samples_9 or
	  samples_10 or
	  samples_11 or
	  samples_12 or
	  samples_13 or
	  samples_14 or
	  samples_15 or
	  samples_16 or
	  samples_17 or
	  samples_18 or
	  samples_19 or
	  samples_20 or
	  samples_21 or
	  samples_22 or
	  samples_23 or
	  samples_24 or
	  samples_25 or
	  samples_26 or
	  samples_27 or
	  samples_28 or
	  samples_29 or
	  samples_30 or
	  samples_31 or
	  samples_32 or
	  samples_33 or
	  samples_34 or
	  samples_35 or
	  samples_36 or
	  samples_37 or
	  samples_38 or samples_39 or samples_40 or samples_41 or samples_42)
  begin
    case (n)
      7'd0:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_0;
      7'd1:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_1;
      7'd2:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_2;
      7'd3:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_3;
      7'd4:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_4;
      7'd5:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_5;
      7'd6:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_6;
      7'd7:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_7;
      7'd8:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_8;
      7'd9:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_9;
      7'd10:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_10;
      7'd11:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_11;
      7'd12:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_12;
      7'd13:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_13;
      7'd14:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_14;
      7'd15:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_15;
      7'd16:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_16;
      7'd17:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_17;
      7'd18:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_18;
      7'd19:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_19;
      7'd20:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_20;
      7'd21:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_21;
      7'd22:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_22;
      7'd23:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_23;
      7'd24:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_24;
      7'd25:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_25;
      7'd26:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_26;
      7'd27:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_27;
      7'd28:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_28;
      7'd29:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_29;
      7'd30:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_30;
      7'd31:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_31;
      7'd32:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_32;
      7'd33:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_33;
      7'd34:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_34;
      7'd35:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_35;
      7'd36:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_36;
      7'd37:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_37;
      7'd38:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_38;
      7'd39:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_39;
      7'd40:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_40;
      7'd41:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_41;
      7'd42:
	  SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
	      samples_42;
      default: SEL_ARR_samples_0_6_samples_1_7_samples_2_8_sa_ETC___d90 =
		   13'b0101010101010 /* unspecified value */ ;
    endcase
  end
  always@(n)
  begin
    case (n)
      7'd0, 7'd42:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd186;
      7'd1, 7'd41:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd233;
      7'd2, 7'd40:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd248;
      7'd3, 7'd39:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd217;
      7'd4, 7'd38:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd134;
      7'd5, 7'd13, 7'd29, 7'd37:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd0;
      7'd6, 7'd36:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd8019;
      7'd7, 7'd35:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7828;
      7'd8, 7'd34:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7652;
      7'd9, 7'd33:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7527;
      7'd10, 7'd32:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7492;
      7'd11, 7'd31:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7579;
      7'd12, 7'd30:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd7810;
      7'd14, 7'd28:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd521;
      7'd15, 7'd27:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd1151;
      7'd16, 7'd26:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd1842;
      7'd17, 7'd25:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd2533;
      7'd18, 7'd24:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd3159;
      7'd19, 7'd23:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd3660;
      7'd20, 7'd22:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd3983;
      7'd21:
	  CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 = 13'd4095;
      default: CASE_n_0_186_1_233_2_248_3_217_4_134_5_0_6_801_ETC__q1 =
		   13'b0101010101010 /* unspecified value */ ;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        conv_start_reg <= `BSV_ASSIGNMENT_DELAY 1'd0;
	conv_start_reg_1 <= `BSV_ASSIGNMENT_DELAY 1'd0;
	conv_state_can_overlap <= `BSV_ASSIGNMENT_DELAY 1'd1;
	conv_state_fired <= `BSV_ASSIGNMENT_DELAY 1'd0;
	conv_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY 4'd0;
	n <= `BSV_ASSIGNMENT_DELAY 7'd0;
	samples_0 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_1 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_10 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_11 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_12 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_13 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_14 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_15 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_16 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_17 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_18 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_19 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_2 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_20 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_21 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_22 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_23 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_24 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_25 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_26 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_27 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_28 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_29 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_3 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_30 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_31 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_32 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_33 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_34 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_35 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_36 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_37 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_38 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_39 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_4 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_40 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_41 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_42 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_5 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_6 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_7 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_8 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	samples_9 <= `BSV_ASSIGNMENT_DELAY 13'd0;
	sum <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (conv_start_reg$EN)
	  conv_start_reg <= `BSV_ASSIGNMENT_DELAY conv_start_reg$D_IN;
	if (conv_start_reg_1$EN)
	  conv_start_reg_1 <= `BSV_ASSIGNMENT_DELAY conv_start_reg_1$D_IN;
	if (conv_state_can_overlap$EN)
	  conv_state_can_overlap <= `BSV_ASSIGNMENT_DELAY
	      conv_state_can_overlap$D_IN;
	if (conv_state_fired$EN)
	  conv_state_fired <= `BSV_ASSIGNMENT_DELAY conv_state_fired$D_IN;
	if (conv_state_mkFSMstate$EN)
	  conv_state_mkFSMstate <= `BSV_ASSIGNMENT_DELAY
	      conv_state_mkFSMstate$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (samples_0$EN) samples_0 <= `BSV_ASSIGNMENT_DELAY samples_0$D_IN;
	if (samples_1$EN) samples_1 <= `BSV_ASSIGNMENT_DELAY samples_1$D_IN;
	if (samples_10$EN)
	  samples_10 <= `BSV_ASSIGNMENT_DELAY samples_10$D_IN;
	if (samples_11$EN)
	  samples_11 <= `BSV_ASSIGNMENT_DELAY samples_11$D_IN;
	if (samples_12$EN)
	  samples_12 <= `BSV_ASSIGNMENT_DELAY samples_12$D_IN;
	if (samples_13$EN)
	  samples_13 <= `BSV_ASSIGNMENT_DELAY samples_13$D_IN;
	if (samples_14$EN)
	  samples_14 <= `BSV_ASSIGNMENT_DELAY samples_14$D_IN;
	if (samples_15$EN)
	  samples_15 <= `BSV_ASSIGNMENT_DELAY samples_15$D_IN;
	if (samples_16$EN)
	  samples_16 <= `BSV_ASSIGNMENT_DELAY samples_16$D_IN;
	if (samples_17$EN)
	  samples_17 <= `BSV_ASSIGNMENT_DELAY samples_17$D_IN;
	if (samples_18$EN)
	  samples_18 <= `BSV_ASSIGNMENT_DELAY samples_18$D_IN;
	if (samples_19$EN)
	  samples_19 <= `BSV_ASSIGNMENT_DELAY samples_19$D_IN;
	if (samples_2$EN) samples_2 <= `BSV_ASSIGNMENT_DELAY samples_2$D_IN;
	if (samples_20$EN)
	  samples_20 <= `BSV_ASSIGNMENT_DELAY samples_20$D_IN;
	if (samples_21$EN)
	  samples_21 <= `BSV_ASSIGNMENT_DELAY samples_21$D_IN;
	if (samples_22$EN)
	  samples_22 <= `BSV_ASSIGNMENT_DELAY samples_22$D_IN;
	if (samples_23$EN)
	  samples_23 <= `BSV_ASSIGNMENT_DELAY samples_23$D_IN;
	if (samples_24$EN)
	  samples_24 <= `BSV_ASSIGNMENT_DELAY samples_24$D_IN;
	if (samples_25$EN)
	  samples_25 <= `BSV_ASSIGNMENT_DELAY samples_25$D_IN;
	if (samples_26$EN)
	  samples_26 <= `BSV_ASSIGNMENT_DELAY samples_26$D_IN;
	if (samples_27$EN)
	  samples_27 <= `BSV_ASSIGNMENT_DELAY samples_27$D_IN;
	if (samples_28$EN)
	  samples_28 <= `BSV_ASSIGNMENT_DELAY samples_28$D_IN;
	if (samples_29$EN)
	  samples_29 <= `BSV_ASSIGNMENT_DELAY samples_29$D_IN;
	if (samples_3$EN) samples_3 <= `BSV_ASSIGNMENT_DELAY samples_3$D_IN;
	if (samples_30$EN)
	  samples_30 <= `BSV_ASSIGNMENT_DELAY samples_30$D_IN;
	if (samples_31$EN)
	  samples_31 <= `BSV_ASSIGNMENT_DELAY samples_31$D_IN;
	if (samples_32$EN)
	  samples_32 <= `BSV_ASSIGNMENT_DELAY samples_32$D_IN;
	if (samples_33$EN)
	  samples_33 <= `BSV_ASSIGNMENT_DELAY samples_33$D_IN;
	if (samples_34$EN)
	  samples_34 <= `BSV_ASSIGNMENT_DELAY samples_34$D_IN;
	if (samples_35$EN)
	  samples_35 <= `BSV_ASSIGNMENT_DELAY samples_35$D_IN;
	if (samples_36$EN)
	  samples_36 <= `BSV_ASSIGNMENT_DELAY samples_36$D_IN;
	if (samples_37$EN)
	  samples_37 <= `BSV_ASSIGNMENT_DELAY samples_37$D_IN;
	if (samples_38$EN)
	  samples_38 <= `BSV_ASSIGNMENT_DELAY samples_38$D_IN;
	if (samples_39$EN)
	  samples_39 <= `BSV_ASSIGNMENT_DELAY samples_39$D_IN;
	if (samples_4$EN) samples_4 <= `BSV_ASSIGNMENT_DELAY samples_4$D_IN;
	if (samples_40$EN)
	  samples_40 <= `BSV_ASSIGNMENT_DELAY samples_40$D_IN;
	if (samples_41$EN)
	  samples_41 <= `BSV_ASSIGNMENT_DELAY samples_41$D_IN;
	if (samples_42$EN)
	  samples_42 <= `BSV_ASSIGNMENT_DELAY samples_42$D_IN;
	if (samples_5$EN) samples_5 <= `BSV_ASSIGNMENT_DELAY samples_5$D_IN;
	if (samples_6$EN) samples_6 <= `BSV_ASSIGNMENT_DELAY samples_6$D_IN;
	if (samples_7$EN) samples_7 <= `BSV_ASSIGNMENT_DELAY samples_7$D_IN;
	if (samples_8$EN) samples_8 <= `BSV_ASSIGNMENT_DELAY samples_8$D_IN;
	if (samples_9$EN) samples_9 <= `BSV_ASSIGNMENT_DELAY samples_9$D_IN;
	if (sum$EN) sum <= `BSV_ASSIGNMENT_DELAY sum$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    conv_start_reg = 1'h0;
    conv_start_reg_1 = 1'h0;
    conv_state_can_overlap = 1'h0;
    conv_state_fired = 1'h0;
    conv_state_mkFSMstate = 4'hA;
    n = 7'h2A;
    samples_0 = 13'h0AAA;
    samples_1 = 13'h0AAA;
    samples_10 = 13'h0AAA;
    samples_11 = 13'h0AAA;
    samples_12 = 13'h0AAA;
    samples_13 = 13'h0AAA;
    samples_14 = 13'h0AAA;
    samples_15 = 13'h0AAA;
    samples_16 = 13'h0AAA;
    samples_17 = 13'h0AAA;
    samples_18 = 13'h0AAA;
    samples_19 = 13'h0AAA;
    samples_2 = 13'h0AAA;
    samples_20 = 13'h0AAA;
    samples_21 = 13'h0AAA;
    samples_22 = 13'h0AAA;
    samples_23 = 13'h0AAA;
    samples_24 = 13'h0AAA;
    samples_25 = 13'h0AAA;
    samples_26 = 13'h0AAA;
    samples_27 = 13'h0AAA;
    samples_28 = 13'h0AAA;
    samples_29 = 13'h0AAA;
    samples_3 = 13'h0AAA;
    samples_30 = 13'h0AAA;
    samples_31 = 13'h0AAA;
    samples_32 = 13'h0AAA;
    samples_33 = 13'h0AAA;
    samples_34 = 13'h0AAA;
    samples_35 = 13'h0AAA;
    samples_36 = 13'h0AAA;
    samples_37 = 13'h0AAA;
    samples_38 = 13'h0AAA;
    samples_39 = 13'h0AAA;
    samples_4 = 13'h0AAA;
    samples_40 = 13'h0AAA;
    samples_41 = 13'h0AAA;
    samples_42 = 13'h0AAA;
    samples_5 = 13'h0AAA;
    samples_6 = 13'h0AAA;
    samples_7 = 13'h0AAA;
    samples_8 = 13'h0AAA;
    samples_9 = 13'h0AAA;
    sum = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_conv_action_l26c20 &&
	  (conv_state_mkFSMstate == 4'd2 || WILL_FIRE_RL_conv_action_l29c16 ||
	   WILL_FIRE_RL_conv_action_l30c18 ||
	   conv_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_conv_action_l32c17 ||
	   conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 26, column 20: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_l26c20] and\n  [RL_conv_action_f_update_l25c9, RL_conv_action_l29c16,\n  RL_conv_action_l30c18, RL_conv_action_f_init_l31c9, RL_conv_action_l32c17,\n  RL_conv_action_f_update_l31c9, RL_conv_action_l34c12] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (conv_state_mkFSMstate == 4'd2 &&
	  (WILL_FIRE_RL_conv_action_l29c16 ||
	   WILL_FIRE_RL_conv_action_l30c18 ||
	   conv_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_conv_action_l32c17 ||
	   conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 25, column 31: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_f_update_l25c9]\n  and [RL_conv_action_l29c16, RL_conv_action_l30c18,\n  RL_conv_action_f_init_l31c9, RL_conv_action_l32c17,\n  RL_conv_action_f_update_l31c9, RL_conv_action_l34c12] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_conv_action_l29c16 &&
	  (WILL_FIRE_RL_conv_action_l30c18 || conv_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_conv_action_l32c17 ||
	   conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 29, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_l29c16] and\n  [RL_conv_action_l30c18, RL_conv_action_f_init_l31c9, RL_conv_action_l32c17,\n  RL_conv_action_f_update_l31c9, RL_conv_action_l34c12] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_conv_action_l30c18 &&
	  (conv_state_mkFSMstate == 4'd5 || WILL_FIRE_RL_conv_action_l32c17 ||
	   conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 30, column 18: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_l30c18] and\n  [RL_conv_action_f_init_l31c9, RL_conv_action_l32c17,\n  RL_conv_action_f_update_l31c9, RL_conv_action_l34c12] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (conv_state_mkFSMstate == 4'd5 &&
	  (WILL_FIRE_RL_conv_action_l32c17 || conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 31, column 15: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_f_init_l31c9] and\n  [RL_conv_action_l32c17, RL_conv_action_f_update_l31c9,\n  RL_conv_action_l34c12] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_conv_action_l32c17 &&
	  (conv_state_mkFSMstate == 4'd7 || WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 32, column 17: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_l32c17] and\n  [RL_conv_action_f_update_l31c9, RL_conv_action_l34c12] ) fired in the same\n  clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (conv_state_mkFSMstate == 4'd7 && WILL_FIRE_RL_conv_action_l34c12)
	$display("Error: \"FIRfilter.bsv\", line 31, column 30: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_f_update_l31c9]\n  and [RL_conv_action_l34c12] ) fired in the same clock cycle.\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_conv_action_f_init_l25c9 &&
	  (WILL_FIRE_RL_conv_action_l26c20 || conv_state_mkFSMstate == 4'd2 ||
	   WILL_FIRE_RL_conv_action_l29c16 ||
	   WILL_FIRE_RL_conv_action_l30c18 ||
	   conv_state_mkFSMstate == 4'd5 ||
	   WILL_FIRE_RL_conv_action_l32c17 ||
	   conv_state_mkFSMstate == 4'd7 ||
	   WILL_FIRE_RL_conv_action_l34c12))
	$display("Error: \"FIRfilter.bsv\", line 25, column 16: (R0001)\n  Mutually exclusive rules (from the ME sets [RL_conv_action_f_init_l25c9] and\n  [RL_conv_action_l26c20, RL_conv_action_f_update_l25c9,\n  RL_conv_action_l29c16, RL_conv_action_l30c18, RL_conv_action_f_init_l31c9,\n  RL_conv_action_l32c17, RL_conv_action_f_update_l31c9, RL_conv_action_l34c12]\n  ) fired in the same clock cycle.\n");
  end
  // synopsys translate_on
endmodule  // mkFIRfilter

